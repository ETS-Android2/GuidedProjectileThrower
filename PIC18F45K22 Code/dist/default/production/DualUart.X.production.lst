

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Apr 16 15:53:48 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001D66                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _count
    72  001D66  0006               	dw	6
    73                           
    74                           	psect	nvCOMRAM
    75  000046                     __pnvCOMRAM:
    76                           	opt stack 0
    77  000046                     _init_count:
    78                           	opt stack 0
    79  000046                     	ds	2
    80  0000                     _ANSELA	set	3896
    81  0000                     _ANSELB	set	3897
    82  0000                     _ANSELC	set	3898
    83  0000                     _ANSELD	set	3899
    84  0000                     _ANSELE	set	3900
    85  0000                     _ADCON0	set	4034
    86  0000                     _ADCON0bits	set	4034
    87  0000                     _ADCON1	set	4033
    88  0000                     _ADCON2	set	4032
    89  0000                     _ADRESH	set	4036
    90  0000                     _ADRESL	set	4035
    91  0000                     _INTCON2bits	set	4081
    92  0000                     _INTCONbits	set	4082
    93  0000                     _IPR3bits	set	4005
    94  0000                     _LATBbits	set	3978
    95  0000                     _LATDbits	set	3980
    96  0000                     _OSCCON	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIE3bits	set	4003
    99  0000                     _PIR1bits	set	3998
   100  0000                     _PIR3bits	set	4004
   101  0000                     _PORTAbits	set	3968
   102  0000                     _RCONbits	set	4048
   103  0000                     _RCREG1	set	4014
   104  0000                     _RCREG2	set	3956
   105  0000                     _RCSTA1bits	set	4011
   106  0000                     _RCSTA2bits	set	3953
   107  0000                     _SPBRG1	set	4015
   108  0000                     _SPBRG2	set	3957
   109  0000                     _T0CONbits	set	4053
   110  0000                     _TMR0H	set	4055
   111  0000                     _TMR0L	set	4054
   112  0000                     _TRISAbits	set	3986
   113  0000                     _TRISBbits	set	3987
   114  0000                     _TRISCbits	set	3988
   115  0000                     _TRISDbits	set	3989
   116  0000                     _TRISE	set	3990
   117  0000                     _TXREG1	set	4013
   118  0000                     _TXREG2	set	3955
   119  0000                     _TXSTA1bits	set	4012
   120  0000                     _TXSTA2bits	set	3954
   121                           
   122                           	psect	smallconst
   123  000600                     __psmallconst:
   124                           	opt stack 0
   125  000600  00                 	db	0
   126  000601                     STR_9:
   127  000601  53                 	db	83	;'S'
   128  000602  74                 	db	116	;'t'
   129  000603  6F                 	db	111	;'o'
   130  000604  70                 	db	112	;'p'
   131  000605  20                 	db	32
   132  000606  47                 	db	71	;'G'
   133  000607  50                 	db	80	;'P'
   134  000608  53                 	db	83	;'S'
   135  000609  20                 	db	32
   136  00060A  20                 	db	32
   137  00060B  20                 	db	32
   138  00060C  20                 	db	32
   139  00060D  20                 	db	32
   140  00060E  20                 	db	32
   141  00060F  20                 	db	32
   142  000610  20                 	db	32
   143  000611  00                 	db	0
   144  000612                     STR_8:
   145  000612  53                 	db	83	;'S'
   146  000613  74                 	db	116	;'t'
   147  000614  61                 	db	97	;'a'
   148  000615  72                 	db	114	;'r'
   149  000616  74                 	db	116	;'t'
   150  000617  20                 	db	32
   151  000618  47                 	db	71	;'G'
   152  000619  50                 	db	80	;'P'
   153  00061A  53                 	db	83	;'S'
   154  00061B  20                 	db	32
   155  00061C  20                 	db	32
   156  00061D  20                 	db	32
   157  00061E  20                 	db	32
   158  00061F  20                 	db	32
   159  000620  20                 	db	32
   160  000621  20                 	db	32
   161  000622  00                 	db	0
   162  000623                     STR_10:
   163  000623  49                 	db	73	;'I'
   164  000624  6E                 	db	110	;'n'
   165  000625  69                 	db	105	;'i'
   166  000626  74                 	db	116	;'t'
   167  000627  69                 	db	105	;'i'
   168  000628  61                 	db	97	;'a'
   169  000629  6C                 	db	108	;'l'
   170  00062A  69                 	db	105	;'i'
   171  00062B  7A                 	db	122	;'z'
   172  00062C  69                 	db	105	;'i'
   173  00062D  6E                 	db	110	;'n'
   174  00062E  67                 	db	103	;'g'
   175  00062F  20                 	db	32
   176  000630  20                 	db	32
   177  000631  20                 	db	32
   178  000632  20                 	db	32
   179  000633  00                 	db	0
   180  000634                     STR_2:
   181  000634  57                 	db	87	;'W'
   182  000635  61                 	db	97	;'a'
   183  000636  69                 	db	105	;'i'
   184  000637  74                 	db	116	;'t'
   185  000638  69                 	db	105	;'i'
   186  000639  6E                 	db	110	;'n'
   187  00063A  67                 	db	103	;'g'
   188  00063B  20                 	db	32
   189  00063C  66                 	db	102	;'f'
   190  00063D  6F                 	db	111	;'o'
   191  00063E  72                 	db	114	;'r'
   192  00063F  20                 	db	32
   193  000640  43                 	db	67	;'C'
   194  000641  4D                 	db	77	;'M'
   195  000642  44                 	db	68	;'D'
   196  000643  20                 	db	32
   197  000644  00                 	db	0
   198  000645                     STR_1:
   199  000645  50                 	db	80	;'P'
   200  000646  6F                 	db	111	;'o'
   201  000647  73                 	db	115	;'s'
   202  000648  69                 	db	105	;'i'
   203  000649  74                 	db	116	;'t'
   204  00064A  69                 	db	105	;'i'
   205  00064B  6F                 	db	111	;'o'
   206  00064C  6E                 	db	110	;'n'
   207  00064D  69                 	db	105	;'i'
   208  00064E  6E                 	db	110	;'n'
   209  00064F  67                 	db	103	;'g'
   210  000650  20                 	db	32
   211  000651  41                 	db	65	;'A'
   212  000652  6E                 	db	110	;'n'
   213  000653  67                 	db	103	;'g'
   214  000654  20                 	db	32
   215  000655  00                 	db	0
   216  000656                     STR_3:
   217  000656  43                 	db	67	;'C'
   218  000657  6F                 	db	111	;'o'
   219  000658  6D                 	db	109	;'m'
   220  000659  70                 	db	112	;'p'
   221  00065A  72                 	db	114	;'r'
   222  00065B  65                 	db	101	;'e'
   223  00065C  73                 	db	115	;'s'
   224  00065D  73                 	db	115	;'s'
   225  00065E  69                 	db	105	;'i'
   226  00065F  6E                 	db	110	;'n'
   227  000660  67                 	db	103	;'g'
   228  000661  20                 	db	32
   229  000662  41                 	db	65	;'A'
   230  000663  69                 	db	105	;'i'
   231  000664  72                 	db	114	;'r'
   232  000665  20                 	db	32
   233  000666  00                 	db	0
   234  000667                     STR_4:
   235  000667  44                 	db	68	;'D'
   236  000668  6F                 	db	111	;'o'
   237  000669  6E                 	db	110	;'n'
   238  00066A  65                 	db	101	;'e'
   239  00066B  21                 	db	33
   240  00066C  20                 	db	32
   241  00066D  20                 	db	32
   242  00066E  20                 	db	32
   243  00066F  20                 	db	32
   244  000670  20                 	db	32
   245  000671  20                 	db	32
   246  000672  20                 	db	32
   247  000673  20                 	db	32
   248  000674  00                 	db	0
   249  000675                     STR_6:
   250  000675  54                 	db	84	;'T'
   251  000676  49                 	db	73	;'I'
   252  000677  4D                 	db	77	;'M'
   253  000678  45                 	db	69	;'E'
   254  000679  3A                 	db	58	;':'
   255  00067A  00                 	db	0
   256  0000                     
   257                           ; #config settings
   258  00067B  00                 	db	0	; dummy byte at the end
   259  0000                     
   260                           	psect	cinit
   261  001B3A                     __pcinit:
   262                           	opt stack 0
   263  001B3A                     start_initialization:
   264                           	opt stack 0
   265  001B3A                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Clear objects allocated to BANK0 (47 bytes)
   269  001B3A  EE00  F060         	lfsr	0,__pbssBANK0
   270  001B3E  0E2F               	movlw	47
   271  001B40                     clear_0:
   272  001B40  6AEE               	clrf	postinc0,c
   273  001B42  06E8               	decf	wreg,f,c
   274  001B44  E1FD               	bnz	clear_0
   275                           
   276                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   277  001B46  6A45               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   278                           
   279                           ; Clear objects allocated to COMRAM (25 bytes)
   280  001B48  EE00  F02C         	lfsr	0,__pbssCOMRAM
   281  001B4C  0E19               	movlw	25
   282  001B4E                     clear_1:
   283  001B4E  6AEE               	clrf	postinc0,c
   284  001B50  06E8               	decf	wreg,f,c
   285  001B52  E1FD               	bnz	clear_1
   286                           
   287                           ; Initialize objects allocated to COMRAM (2 bytes)
   288                           ; load TBLPTR registers with __pidataCOMRAM
   289  001B54  0E66               	movlw	low __pidataCOMRAM
   290  001B56  6EF6               	movwf	tblptrl,c
   291  001B58  0E1D               	movlw	high __pidataCOMRAM
   292  001B5A  6EF7               	movwf	tblptrh,c
   293  001B5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   294  001B5E  6EF8               	movwf	tblptru,c
   295  001B60  0009               	tblrd		*+	;fetch initializer
   296  001B62  CFF5 F048          	movff	tablat,__pdataCOMRAM
   297  001B66  0009               	tblrd		*+	;fetch initializer
   298  001B68  CFF5 F049          	movff	tablat,__pdataCOMRAM+1
   299  001B6C                     end_of_initialization:
   300                           	opt stack 0
   301  001B6C                     __end_of__initialization:
   302                           	opt stack 0
   303  001B6C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   304  001B6E  6EF8               	movwf	tblptru,c
   305  001B70  0100               	movlb	0
   306  001B72  EFCF  F00C         	goto	_main	;jump to C main() function
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bitbssCOMRAM
   315  000228                     __pbitbssCOMRAM:
   316                           	opt stack 0
   317  000228                     _adxl_en:
   318                           	opt stack 0
   319  000228                     	ds	1
   320  000229                     _comp_tmr_en:
   321                           	opt stack 0
   322  000229                     	ds	1
   323  00022A                     _eol:
   324                           	opt stack 0
   325  00022A                     	ds	1
   326  00022B                     _int1flag:
   327                           	opt stack 0
   328  00022B                     	ds	1
   329  00022C                     _int2flag:
   330                           	opt stack 0
   331  00022C                     	ds	1
   332  00022D                     _rstflag:
   333                           	opt stack 0
   334  00022D                     	ds	1
   335  00022E                     _rx_position_en:
   336                           	opt stack 0
   337  00022E                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	bssCOMRAM
   346  00002C                     __pbssCOMRAM:
   347                           	opt stack 0
   348  00002C                     _ADC_high:
   349                           	opt stack 0
   350  00002C                     	ds	2
   351  00002E                     _ADC_low:
   352                           	opt stack 0
   353  00002E                     	ds	2
   354  000030                     _ADC_result:
   355                           	opt stack 0
   356  000030                     	ds	2
   357  000032                     _last_status:
   358                           	opt stack 0
   359  000032                     	ds	2
   360  000034                     _minute:
   361                           	opt stack 0
   362  000034                     	ds	2
   363  000036                     _byte2:
   364                           	opt stack 0
   365  000036                     	ds	1
   366  000037                     _state:
   367                           	opt stack 0
   368  000037                     	ds	1
   369  000038                     _state_neg_full:
   370                           	opt stack 0
   371  000038                     	ds	1
   372  000039                     _state_neg_half:
   373                           	opt stack 0
   374  000039                     	ds	1
   375  00003A                     _state_pos_full:
   376                           	opt stack 0
   377  00003A                     	ds	1
   378  00003B                     _state_pos_half:
   379                           	opt stack 0
   380  00003B                     	ds	1
   381  00003C                     _time_lcd:
   382                           	opt stack 0
   383  00003C                     	ds	5
   384  000041                     _digits:
   385                           	opt stack 0
   386  000041                     	ds	4
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	dataCOMRAM
   395  000048                     __pdataCOMRAM:
   396                           	opt stack 0
   397  000048                     _count:
   398                           	opt stack 0
   399  000048                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK0
   408  000060                     __pbssBANK0:
   409                           	opt stack 0
   410  000060                     _strbuf:
   411                           	opt stack 0
   412  000060                     	ds	28
   413  00007C                     _abs_position:
   414                           	opt stack 0
   415  00007C                     	ds	4
   416  000080                     _last_position:
   417                           	opt stack 0
   418  000080                     	ds	4
   419  000084                     _i:
   420                           	opt stack 0
   421  000084                     	ds	2
   422  000086                     _j:
   423                           	opt stack 0
   424  000086                     	ds	2
   425  000088                     _second:
   426                           	opt stack 0
   427  000088                     	ds	2
   428  00008A                     _byte1:
   429                           	opt stack 0
   430  00008A                     	ds	1
   431  00008B                     _rx_position:
   432                           	opt stack 0
   433  00008B                     	ds	4
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441                           	psect	cstackBANK0
   442  00008F                     __pcstackBANK0:
   443                           	opt stack 0
   444  00008F                     ??_Shift:
   445  00008F                     ??_ADXL_Read:
   446  00008F                     ?___wmul:
   447                           	opt stack 0
   448  00008F                     ?___lwdiv:
   449                           	opt stack 0
   450  00008F                     tx1_byte@data1:
   451                           	opt stack 0
   452  00008F                     delay@x:
   453                           	opt stack 0
   454  00008F                     ___wmul@multiplier:
   455                           	opt stack 0
   456  00008F                     ___lwdiv@dividend:
   457                           	opt stack 0
   458  00008F                     lcd_delay@temp:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x0
   462  00008F                     	ds	1
   463  000090                     tx1_byte_n@data1n:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x1
   467  000090                     	ds	1
   468  000091                     delay@y:
   469                           	opt stack 0
   470  000091                     ___wmul@multiplicand:
   471                           	opt stack 0
   472  000091                     ___lwdiv@divisor:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x2
   476  000091                     	ds	2
   477  000093                     ??_lcd_delay:
   478  000093                     Shift@data:
   479                           	opt stack 0
   480  000093                     ___lwdiv@counter:
   481                           	opt stack 0
   482  000093                     FullStepsPos@steps:
   483                           	opt stack 0
   484  000093                     FullStepsNeg@steps:
   485                           	opt stack 0
   486  000093                     ___wmul@product:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x4
   490  000093                     	ds	1
   491  000094                     Shift@i:
   492                           	opt stack 0
   493  000094                     ___lwdiv@quotient:
   494                           	opt stack 0
   495  000094                     lcd_delay@j:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x5
   499  000094                     	ds	1
   500  000095                     ProcessSteps@position:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x6
   504  000095                     	ds	1
   505  000096                     ?___lwmod:
   506                           	opt stack 0
   507  000096                     ___lwmod@dividend:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x7
   511  000096                     	ds	2
   512  000098                     ___lwmod@divisor:
   513                           	opt stack 0
   514  000098                     lcd_delay@i:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0x9
   518  000098                     	ds	1
   519  000099                     ??_ProcessSteps:
   520                           
   521                           ; 0 bytes @ 0xA
   522  000099                     	ds	1
   523  00009A                     ___lwmod@counter:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0xB
   527  00009A                     	ds	2
   528  00009C                     ??_lcdcmd_nibble:
   529  00009C                     ??_lcddata_nibble:
   530                           
   531                           ; 0 bytes @ 0xD
   532  00009C                     	ds	1
   533  00009D                     lcdcmd_nibble@cmdout:
   534                           	opt stack 0
   535  00009D                     lcddata_nibble@dataout:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0xE
   539  00009D                     	ds	1
   540  00009E                     lcd_cmd@cmd_value:
   541                           	opt stack 0
   542  00009E                     dis_char@data_value:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0xF
   546  00009E                     	ds	1
   547  00009F                     lcd_cmd@cmd_value1:
   548                           	opt stack 0
   549  00009F                     dis_char@data_value1:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x10
   553  00009F                     	ds	1
   554  0000A0                     dis_string@wrptr:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x11
   558  0000A0                     	ds	2
   559  0000A2                     dis_string@len:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x13
   563  0000A2                     	ds	1
   564  0000A3                     ??_dis_string:
   565                           
   566                           ; 0 bytes @ 0x14
   567  0000A3                     	ds	3
   568  0000A6                     dis_string@count:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x17
   572  0000A6                     	ds	2
   573  0000A8                     dis_string@i:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x19
   577  0000A8                     	ds	2
   578  0000AA                     
   579                           ; 0 bytes @ 0x1B
   580  0000AA                     	ds	3
   581  0000AD                     ??_ProcessStepperData:
   582                           
   583                           ; 0 bytes @ 0x1E
   584  0000AD                     	ds	4
   585  0000B1                     ProcessStepperData@data1:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x22
   589  0000B1                     	ds	1
   590  0000B2                     tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           
   597                           ; 0 bytes @ 0x23
   598                           
   599                           	psect	cstackCOMRAM
   600  000001                     __pcstackCOMRAM:
   601                           	opt stack 0
   602  000001                     ?___awdiv:
   603                           	opt stack 0
   604  000001                     ___awdiv@dividend:
   605                           	opt stack 0
   606  000001                     i2lcd_delay@temp:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x0
   610  000001                     	ds	2
   611  000003                     ___awdiv@divisor:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x2
   615  000003                     	ds	2
   616  000005                     ??i2_lcd_delay:
   617  000005                     ___awdiv@counter:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x4
   621  000005                     	ds	1
   622  000006                     ___awdiv@sign:
   623                           	opt stack 0
   624  000006                     i2lcd_delay@j:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x5
   628  000006                     	ds	1
   629  000007                     ___awdiv@quotient:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x6
   633  000007                     	ds	2
   634  000009                     ?___awmod:
   635                           	opt stack 0
   636  000009                     ___awmod@dividend:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x8
   640  000009                     	ds	1
   641  00000A                     i2lcd_delay@i:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x9
   645  00000A                     	ds	1
   646  00000B                     ___awmod@divisor:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0xA
   650  00000B                     	ds	2
   651  00000D                     ___awmod@counter:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0xC
   655  00000D                     	ds	1
   656  00000E                     ??i2_lcdcmd_nibble:
   657  00000E                     ??i2_lcddata_nibble:
   658  00000E                     ___awmod@sign:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0xD
   662  00000E                     	ds	1
   663  00000F                     i2lcdcmd_nibble@cmdout:
   664                           	opt stack 0
   665  00000F                     i2lcddata_nibble@dataout:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0xE
   669  00000F                     	ds	1
   670  000010                     i2lcd_cmd@cmd_value:
   671                           	opt stack 0
   672  000010                     i2dis_char@data_value:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0xF
   676  000010                     	ds	1
   677  000011                     i2lcd_cmd@cmd_value1:
   678                           	opt stack 0
   679  000011                     i2dis_char@data_value1:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x10
   683  000011                     	ds	1
   684  000012                     lcd_right_shift@n:
   685                           	opt stack 0
   686  000012                     i2dis_string@wrptr:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x11
   690  000012                     	ds	2
   691  000014                     i2dis_string@len:
   692                           	opt stack 0
   693  000014                     lcd_right_shift@p:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x13
   697  000014                     	ds	1
   698  000015                     ??i2_dis_string:
   699                           
   700                           ; 0 bytes @ 0x14
   701  000015                     	ds	3
   702  000018                     i2dis_string@count:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x17
   706  000018                     	ds	2
   707  00001A                     i2dis_string@i:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x19
   711  00001A                     	ds	2
   712  00001C                     ??_display_downtime:
   713                           
   714                           ; 0 bytes @ 0x1B
   715  00001C                     	ds	2
   716  00001E                     ??_high_isr:
   717                           
   718                           ; 0 bytes @ 0x1D
   719  00001E                     	ds	14
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           
   727 ;;
   728 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   729 ;;
   730 ;; *************** function _main *****************
   731 ;; Defined at:
   732 ;;		line 34 in file "Dual_UART.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   746 ;;      Params:         0       0       0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0
   749 ;;      Totals:         0       0       0       0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels required when called:   13
   752 ;; This function calls:
   753 ;;		_ADXL_Display
   754 ;;		_ADXL_Read
   755 ;;		_Compressor_Timer
   756 ;;		_GetReset
   757 ;;		_Init
   758 ;;		_Open_UART1
   759 ;;		_Open_UART2
   760 ;;		_RxI1
   761 ;;		_RxI2
   762 ;;		_clr_scr
   763 ;;		_dis_string
   764 ;;		_first_line
   765 ;; This function is called by:
   766 ;;		Startup code after reset
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text0
   771  00199E                     __ptext0:
   772                           	opt stack 0
   773  00199E                     _main:
   774                           	opt stack 18
   775                           
   776                           ;Dual_UART.c: 35: Init();
   777                           
   778                           ;incstack = 0
   779  00199E  EC2A  F00D         	call	_Init	;wreg free
   780                           
   781                           ;Dual_UART.c: 36: GetReset();
   782  0019A2  ECCB  F009         	call	_GetReset	;wreg free
   783                           
   784                           ;Dual_UART.c: 37: clr_scr();
   785  0019A6  EC6A  F00E         	call	_clr_scr	;wreg free
   786                           
   787                           ;Dual_UART.c: 38: first_line();
   788  0019AA  ECA7  F00E         	call	_first_line	;wreg free
   789                           
   790                           ;Dual_UART.c: 39: dis_string("Waiting for CMD ",16);
   791  0019AE  0E34               	movlw	low STR_2
   792  0019B0  0100               	movlb	0	; () banked
   793  0019B2  6FA0               	movwf	dis_string@wrptr& (0+255),b
   794  0019B4  0E06               	movlw	high STR_2
   795  0019B6  0100               	movlb	0	; () banked
   796  0019B8  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
   797  0019BA  0E10               	movlw	16
   798  0019BC  0100               	movlb	0	; () banked
   799  0019BE  6FA2               	movwf	dis_string@len& (0+255),b
   800  0019C0  EC5C  F00A         	call	_dis_string	;wreg free
   801                           
   802                           ;Dual_UART.c: 40: Open_UART1();
   803  0019C4  EC77  F00E         	call	_Open_UART1	;wreg free
   804                           
   805                           ;Dual_UART.c: 41: Open_UART2();
   806  0019C8  EC50  F00E         	call	_Open_UART2	;wreg free
   807  0019CC  D000               	goto	l3661
   808  0019CE                     l3661:
   809                           
   810                           ;Dual_UART.c: 45: if(adxl_en) {
   811  0019CE  A045               	btfss	_adxl_en/(0+8),_adxl_en& (0+7),c	;volatile
   812  0019D0  D005               	goto	l3667
   813                           
   814                           ;Dual_UART.c: 46: ADXL_Read();
   815  0019D2  ECBB  F00D         	call	_ADXL_Read	;wreg free
   816                           
   817                           ;Dual_UART.c: 47: ADXL_Display();
   818  0019D6  EC69  F007         	call	_ADXL_Display	;wreg free
   819  0019DA  D000               	goto	l3667
   820  0019DC                     l3667:
   821                           
   822                           ;Dual_UART.c: 48: }
   823                           ;Dual_UART.c: 50: if(int1flag) {
   824  0019DC  A645               	btfss	_int1flag/(0+8),_int1flag& (0+7),c	;volatile
   825  0019DE  D003               	goto	l3671
   826                           
   827                           ;Dual_UART.c: 51: RxI1();
   828  0019E0  EC15  F00A         	call	_RxI1	;wreg free
   829  0019E4  D000               	goto	l3671
   830  0019E6                     l3671:
   831                           
   832                           ;Dual_UART.c: 52: }
   833                           ;Dual_UART.c: 54: if(int2flag) {
   834  0019E6  A845               	btfss	_int2flag/(0+8),_int2flag& (0+7),c	;volatile
   835  0019E8  D003               	goto	l3675
   836                           
   837                           ;Dual_UART.c: 55: RxI2();
   838  0019EA  ECA3  F00E         	call	_RxI2	;wreg free
   839  0019EE  D000               	goto	l3675
   840  0019F0                     l3675:
   841                           
   842                           ;Dual_UART.c: 56: }
   843                           ;Dual_UART.c: 58: if(comp_tmr_en) {
   844  0019F0  A245               	btfss	_comp_tmr_en/(0+8),_comp_tmr_en& (0+7),c	;volatile
   845  0019F2  D7ED               	goto	l3661
   846                           
   847                           ;Dual_UART.c: 59: Compressor_Timer();
   848  0019F4  EC2E  F00B         	call	_Compressor_Timer	;wreg free
   849  0019F8  D7EA               	goto	l3661
   850  0019FA  EF55  F000         	goto	start
   851  0019FE                     __end_of_main:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           
   860 ;; *************** function _RxI2 *****************
   861 ;; Defined at:
   862 ;;		line 94 in file "GPS_DUALUART_Parsing.h"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;		None               void
   869 ;; Registers used:
   870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   876 ;;      Params:         0       0       0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0
   879 ;;      Totals:         0       0       0       0       0       0       0
   880 ;;Total ram usage:        0 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    9
   883 ;; This function calls:
   884 ;;		_ProcessNMEA
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text1
   891  001D46                     __ptext1:
   892                           	opt stack 0
   893  001D46                     _RxI2:
   894                           	opt stack 21
   895                           
   896                           ;GPS_DUALUART_Parsing.h: 95: ProcessNMEA();
   897                           
   898                           ;incstack = 0
   899  001D46  ECE2  F008         	call	_ProcessNMEA	;wreg free
   900                           
   901                           ;GPS_DUALUART_Parsing.h: 96: int2flag = 0;
   902  001D4A  9845               	bcf	_int2flag/(0+8),_int2flag& (0+7),c	;volatile
   903  001D4C  0012               	return		;funcret
   904  001D4E                     __end_of_RxI2:
   905                           	opt stack 0
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           
   913 ;; *************** function _ProcessNMEA *****************
   914 ;; Defined at:
   915 ;;		line 65 in file "GPS_DUALUART_Parsing.h"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;		None               void
   922 ;; Registers used:
   923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   929 ;;      Params:         0       0       0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0       0       0
   931 ;;      Temps:          0       0       0       0       0       0       0
   932 ;;      Totals:         0       0       0       0       0       0       0
   933 ;;Total ram usage:        0 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    8
   936 ;; This function calls:
   937 ;;		_Shift
   938 ;; This function is called by:
   939 ;;		_RxI2
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text2
   944  0011C4                     __ptext2:
   945                           	opt stack 0
   946  0011C4                     _ProcessNMEA:
   947                           	opt stack 21
   948                           
   949                           ;GPS_DUALUART_Parsing.h: 66: if(byte2 == '$') {
   950                           
   951                           ;incstack = 0
   952  0011C4  0E24               	movlw	36
   953  0011C6  1836               	xorwf	_byte2,w,c	;volatile
   954  0011C8  A4D8               	btfss	status,2,c
   955  0011CA  D006               	goto	l3325
   956                           
   957                           ;GPS_DUALUART_Parsing.h: 67: count = 0;
   958  0011CC  0E00               	movlw	0
   959  0011CE  6E49               	movwf	_count+1,c	;volatile
   960  0011D0  0E00               	movlw	0
   961  0011D2  6E48               	movwf	_count,c	;volatile
   962                           
   963                           ;GPS_DUALUART_Parsing.h: 68: eol = 0;
   964  0011D4  9445               	bcf	_eol/(0+8),_eol& (0+7),c	;volatile
   965                           
   966                           ;GPS_DUALUART_Parsing.h: 69: }
   967  0011D6  D00B               	goto	l430
   968  0011D8                     l3325:
   969                           
   970                           ;GPS_DUALUART_Parsing.h: 70: else if(byte2 == ',')
   971  0011D8  0E2C               	movlw	44
   972  0011DA  1836               	xorwf	_byte2,w,c	;volatile
   973  0011DC  A4D8               	btfss	status,2,c
   974  0011DE  D007               	goto	l430
   975                           
   976                           ;GPS_DUALUART_Parsing.h: 71: count = count+1;
   977  0011E0  0E01               	movlw	1
   978  0011E2  2448               	addwf	_count,w,c	;volatile
   979  0011E4  6E48               	movwf	_count,c	;volatile
   980  0011E6  0E00               	movlw	0
   981  0011E8  2049               	addwfc	_count+1,w,c	;volatile
   982  0011EA  6E49               	movwf	_count+1,c	;volatile
   983  0011EC  D000               	goto	l430
   984  0011EE                     l430:
   985                           
   986                           ;GPS_DUALUART_Parsing.h: 72: if(count>1 && count<6 && byte2 != ',')
   987  0011EE  5049               	movf	_count+1,w,c	;volatile
   988  0011F0  E104               	bnz	u3040
   989  0011F2  0E02               	movlw	2
   990  0011F4  5C48               	subwf	_count,w,c	;volatile
   991  0011F6  A0D8               	btfss	status,0,c
   992  0011F8  D00E               	goto	l3335
   993  0011FA                     u3040:
   994  0011FA  5049               	movf	_count+1,w,c	;volatile
   995  0011FC  E10C               	bnz	l3335
   996  0011FE  0E06               	movlw	6
   997  001200  5C48               	subwf	_count,w,c	;volatile
   998  001202  B0D8               	btfsc	status,0,c
   999  001204  D008               	goto	l3335
  1000  001206  0E2C               	movlw	44
  1001  001208  1836               	xorwf	_byte2,w,c	;volatile
  1002  00120A  B4D8               	btfsc	status,2,c
  1003  00120C  D004               	goto	l3335
  1004                           
  1005                           ;GPS_DUALUART_Parsing.h: 73: Shift(byte2);
  1006  00120E  5036               	movf	_byte2,w,c	;volatile
  1007  001210  EC8C  F008         	call	_Shift
  1008  001214  D000               	goto	l3335
  1009  001216                     l3335:
  1010                           
  1011                           ;GPS_DUALUART_Parsing.h: 74: if((count == 3 || count == 4 || count == 5) && (byte2 == ',
      +                          '))
  1012  001216  0E03               	movlw	3
  1013  001218  1848               	xorwf	_count,w,c	;volatile
  1014  00121A  1049               	iorwf	_count+1,w,c	;volatile
  1015  00121C  B4D8               	btfsc	status,2,c
  1016  00121E  D00A               	goto	l3341
  1017  001220  0E04               	movlw	4
  1018  001222  1848               	xorwf	_count,w,c	;volatile
  1019  001224  1049               	iorwf	_count+1,w,c	;volatile
  1020  001226  B4D8               	btfsc	status,2,c
  1021  001228  D005               	goto	l3341
  1022  00122A  0E05               	movlw	5
  1023  00122C  1848               	xorwf	_count,w,c	;volatile
  1024  00122E  1049               	iorwf	_count+1,w,c	;volatile
  1025  001230  A4D8               	btfss	status,2,c
  1026  001232  D008               	goto	l3345
  1027  001234                     l3341:
  1028  001234  0E2C               	movlw	44
  1029  001236  1836               	xorwf	_byte2,w,c	;volatile
  1030  001238  A4D8               	btfss	status,2,c
  1031  00123A  D004               	goto	l3345
  1032                           
  1033                           ;GPS_DUALUART_Parsing.h: 75: Shift(',');
  1034  00123C  0E2C               	movlw	44
  1035  00123E  EC8C  F008         	call	_Shift
  1036  001242  D000               	goto	l3345
  1037  001244                     l3345:
  1038                           
  1039                           ;GPS_DUALUART_Parsing.h: 76: if(count == 6 && eol == 0) {
  1040  001244  0E06               	movlw	6
  1041  001246  1848               	xorwf	_count,w,c	;volatile
  1042  001248  1049               	iorwf	_count+1,w,c	;volatile
  1043  00124A  B4D8               	btfsc	status,2,c
  1044  00124C  B445               	btfsc	_eol/(0+8),_eol& (0+7),c	;volatile
  1045  00124E  D008               	goto	l437
  1046                           
  1047                           ;GPS_DUALUART_Parsing.h: 77: eol = 1;
  1048  001250  8445               	bsf	_eol/(0+8),_eol& (0+7),c	;volatile
  1049                           
  1050                           ;GPS_DUALUART_Parsing.h: 78: Shift('\r');
  1051  001252  0E0D               	movlw	13
  1052  001254  EC8C  F008         	call	_Shift
  1053                           
  1054                           ;GPS_DUALUART_Parsing.h: 79: Shift('\n');
  1055  001258  0E0A               	movlw	10
  1056  00125A  EC8C  F008         	call	_Shift
  1057                           
  1058                           ;GPS_DUALUART_Parsing.h: 80: }
  1059                           ;GPS_DUALUART_Parsing.h: 81: while(PIR3bits.RC2IF==1);
  1060  00125E  D000               	goto	l437
  1061  001260                     l437:
  1062  001260  BAA4               	btfsc	4004,5,c	;volatile
  1063  001262  D7FE               	goto	l437
  1064  001264  0012               	return		;funcret
  1065  001266                     __end_of_ProcessNMEA:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           status	equ	0xFD8
  1074                           
  1075 ;; *************** function _Shift *****************
  1076 ;; Defined at:
  1077 ;;		line 84 in file "GPS_DUALUART_Parsing.h"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  data            1    wreg     unsigned char 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  data            1    4[BANK0 ] unsigned char 
  1082 ;;  i               2    5[BANK0 ] unsigned int 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;		None               void
  1085 ;; Registers used:
  1086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1092 ;;      Params:         0       0       0       0       0       0       0
  1093 ;;      Locals:         0       3       0       0       0       0       0
  1094 ;;      Temps:          0       4       0       0       0       0       0
  1095 ;;      Totals:         0       7       0       0       0       0       0
  1096 ;;Total ram usage:        7 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    7
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_ProcessNMEA
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text3
  1107  001118                     __ptext3:
  1108                           	opt stack 0
  1109  001118                     _Shift:
  1110                           	opt stack 21
  1111                           
  1112                           ;incstack = 0
  1113                           ;Shift@data stored from wreg
  1114  001118  0100               	movlb	0	; () banked
  1115  00111A  6F93               	movwf	Shift@data& (0+255),b
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;GPS_DUALUART_Parsing.h: 85: TXREG1 = strbuf[27];
  1119  00111C  C07B  FFAD         	movff	_strbuf+27,4013	;volatile
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;GPS_DUALUART_Parsing.h: 86: unsigned int i=0;
  1123  001120  0E00               	movlw	0
  1124  001122  0100               	movlb	0	; () banked
  1125  001124  6F95               	movwf	(Shift@i+1)& (0+255),b
  1126  001126  0E00               	movlw	0
  1127  001128  6F94               	movwf	Shift@i& (0+255),b
  1128                           
  1129                           ;GPS_DUALUART_Parsing.h: 87: for(i=0 ; i<27 ; i++) {
  1130  00112A  0E00               	movlw	0
  1131  00112C  0100               	movlb	0	; () banked
  1132  00112E  6F95               	movwf	(Shift@i+1)& (0+255),b
  1133  001130  0E00               	movlw	0
  1134  001132  6F94               	movwf	Shift@i& (0+255),b
  1135                           
  1136                           ; BSR set to: 0
  1137  001134  0100               	movlb	0	; () banked
  1138  001136  5195               	movf	(Shift@i+1)& (0+255),w,b
  1139  001138  E142               	bnz	l444
  1140  00113A  0E1B               	movlw	27
  1141  00113C  0100               	movlb	0	; () banked
  1142  00113E  5D94               	subwf	Shift@i& (0+255),w,b
  1143  001140  B0D8               	btfsc	status,0,c
  1144  001142  D03D               	goto	l444
  1145  001144  D001               	goto	l3187
  1146                           
  1147                           ; BSR set to: 0
  1148  001146  D03B               	goto	l444
  1149  001148                     l3187:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;GPS_DUALUART_Parsing.h: 88: strbuf[27-i] = strbuf[27-i-1];
  1153  001148  0E01               	movlw	1
  1154  00114A  0100               	movlb	0	; () banked
  1155  00114C  2594               	addwf	Shift@i& (0+255),w,b
  1156  00114E  0100               	movlb	0	; () banked
  1157  001150  6F8F               	movwf	??_Shift& (0+255),b
  1158  001152  0E00               	movlw	0
  1159  001154  0100               	movlb	0	; () banked
  1160  001156  2195               	addwfc	(Shift@i+1)& (0+255),w,b
  1161  001158  0100               	movlb	0	; () banked
  1162  00115A  6F90               	movwf	(??_Shift+1)& (0+255),b
  1163  00115C  0100               	movlb	0	; () banked
  1164  00115E  1F8F               	comf	??_Shift& (0+255),f,b
  1165  001160  1F90               	comf	(??_Shift+1)& (0+255),f,b
  1166  001162  4B8F               	infsnz	??_Shift& (0+255),f,b
  1167  001164  2B90               	incf	(??_Shift+1)& (0+255),f,b
  1168  001166  0E1B               	movlw	27
  1169  001168  0100               	movlb	0	; () banked
  1170  00116A  278F               	addwf	??_Shift& (0+255),f,b
  1171  00116C  0E00               	movlw	0
  1172  00116E  2390               	addwfc	(??_Shift+1)& (0+255),f,b
  1173  001170  0E60               	movlw	low _strbuf
  1174  001172  0100               	movlb	0	; () banked
  1175  001174  258F               	addwf	??_Shift& (0+255),w,b
  1176  001176  6ED9               	movwf	fsr2l,c
  1177  001178  0E00               	movlw	high _strbuf
  1178  00117A  0100               	movlb	0	; () banked
  1179  00117C  2190               	addwfc	(??_Shift+1)& (0+255),w,b
  1180  00117E  6EDA               	movwf	fsr2h,c
  1181  001180  C094  F091         	movff	Shift@i,??_Shift+2
  1182  001184  C095  F092         	movff	Shift@i+1,??_Shift+3
  1183  001188  0100               	movlb	0	; () banked
  1184  00118A  1F91               	comf	(??_Shift+2)& (0+255),f,b
  1185  00118C  1F92               	comf	(??_Shift+3)& (0+255),f,b
  1186  00118E  4B91               	infsnz	(??_Shift+2)& (0+255),f,b
  1187  001190  2B92               	incf	(??_Shift+3)& (0+255),f,b
  1188  001192  0E1B               	movlw	27
  1189  001194  0100               	movlb	0	; () banked
  1190  001196  2791               	addwf	(??_Shift+2)& (0+255),f,b
  1191  001198  0E00               	movlw	0
  1192  00119A  2392               	addwfc	(??_Shift+3)& (0+255),f,b
  1193  00119C  0E60               	movlw	low _strbuf
  1194  00119E  0100               	movlb	0	; () banked
  1195  0011A0  2591               	addwf	(??_Shift+2)& (0+255),w,b
  1196  0011A2  6EE1               	movwf	fsr1l,c
  1197  0011A4  0E00               	movlw	high _strbuf
  1198  0011A6  0100               	movlb	0	; () banked
  1199  0011A8  2192               	addwfc	(??_Shift+3)& (0+255),w,b
  1200  0011AA  6EE2               	movwf	fsr1h,c
  1201  0011AC  CFDF FFE7          	movff	indf2,indf1
  1202                           
  1203                           ; BSR set to: 0
  1204  0011B0  0100               	movlb	0	; () banked
  1205  0011B2  4B94               	infsnz	Shift@i& (0+255),f,b
  1206  0011B4  2B95               	incf	(Shift@i+1)& (0+255),f,b
  1207                           
  1208                           ; BSR set to: 0
  1209  0011B6  0100               	movlb	0	; () banked
  1210  0011B8  5195               	movf	(Shift@i+1)& (0+255),w,b
  1211  0011BA  E101               	bnz	u2980
  1212  0011BC  D7BE               	goto	L1
  1213  0011BE                     u2980:
  1214  0011BE                     l444:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;GPS_DUALUART_Parsing.h: 89: }
  1218                           ;GPS_DUALUART_Parsing.h: 90: strbuf[0] = data;
  1219  0011BE  C093  F060         	movff	Shift@data,_strbuf	;volatile
  1220                           
  1221                           ; BSR set to: 0
  1222  0011C2  0012               	return		;funcret
  1223  0011C4                     __end_of_Shift:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           indf1	equ	0xFE7
  1232                           fsr1h	equ	0xFE2
  1233                           fsr1l	equ	0xFE1
  1234                           indf2	equ	0xFDF
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _RxI1 *****************
  1240 ;; Defined at:
  1241 ;;		line 32 in file "GPS_DUALUART_Parsing.h"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;		None               void
  1248 ;; Registers used:
  1249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1255 ;;      Params:         0       0       0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0
  1258 ;;      Totals:         0       0       0       0       0       0       0
  1259 ;;Total ram usage:        0 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:   12
  1262 ;; This function calls:
  1263 ;;		_ADXL_Init
  1264 ;;		_ProcessStepperData
  1265 ;;		_Timer0_Init
  1266 ;;		_dis_string
  1267 ;;		_second_line
  1268 ;; This function is called by:
  1269 ;;		_main
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text4
  1274  00142A                     __ptext4:
  1275                           	opt stack 0
  1276  00142A                     _RxI1:
  1277                           	opt stack 18
  1278                           
  1279                           ;GPS_DUALUART_Parsing.h: 33: switch(byte1) {
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;incstack = 0
  1283  00142A  D02F               	goto	l3509
  1284  00142C                     l414:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;GPS_DUALUART_Parsing.h: 35: RCSTA2bits.CREN = 1;
  1288  00142C  8871               	bsf	3953,4,c	;volatile
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;GPS_DUALUART_Parsing.h: 36: second_line();
  1292  00142E  ECAB  F00E         	call	_second_line	;wreg free
  1293                           
  1294                           ;GPS_DUALUART_Parsing.h: 37: dis_string("Start GPS       ", 16);
  1295  001432  0E12               	movlw	low STR_8
  1296  001434  0100               	movlb	0	; () banked
  1297  001436  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1298  001438  0E06               	movlw	high STR_8
  1299  00143A  0100               	movlb	0	; () banked
  1300  00143C  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1301  00143E  0E10               	movlw	16
  1302  001440  0100               	movlb	0	; () banked
  1303  001442  6FA2               	movwf	dis_string@len& (0+255),b
  1304  001444  EC5C  F00A         	call	_dis_string	;wreg free
  1305                           
  1306                           ;GPS_DUALUART_Parsing.h: 38: break;
  1307  001448  D033               	goto	l423
  1308  00144A                     l416:
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;GPS_DUALUART_Parsing.h: 40: RCSTA2bits.CREN = 0;
  1312  00144A  9871               	bcf	3953,4,c	;volatile
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;GPS_DUALUART_Parsing.h: 41: second_line();
  1316  00144C  ECAB  F00E         	call	_second_line	;wreg free
  1317                           
  1318                           ;GPS_DUALUART_Parsing.h: 42: dis_string("Stop GPS        ", 16);
  1319  001450  0E01               	movlw	low STR_9
  1320  001452  0100               	movlb	0	; () banked
  1321  001454  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1322  001456  0E06               	movlw	high STR_9
  1323  001458  0100               	movlb	0	; () banked
  1324  00145A  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1325  00145C  0E10               	movlw	16
  1326  00145E  0100               	movlb	0	; () banked
  1327  001460  6FA2               	movwf	dis_string@len& (0+255),b
  1328  001462  EC5C  F00A         	call	_dis_string	;wreg free
  1329                           
  1330                           ;GPS_DUALUART_Parsing.h: 43: break;
  1331  001466  D024               	goto	l423
  1332  001468                     l417:
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;GPS_DUALUART_Parsing.h: 45: if(RCSTA2bits.CREN == 0)
  1336  001468  B871               	btfsc	3953,4,c	;volatile
  1337  00146A  D022               	goto	l423
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;GPS_DUALUART_Parsing.h: 46: rx_position_en = 0b1;
  1341  00146C  8C45               	bsf	_rx_position_en/(0+8),_rx_position_en& (0+7),c	;volatile
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;GPS_DUALUART_Parsing.h: 47: break;
  1345  00146E  D020               	goto	l423
  1346  001470                     l3501:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;GPS_DUALUART_Parsing.h: 49: Timer0_Init();
  1350  001470  EC78  F00D         	call	_Timer0_Init	;wreg free
  1351                           
  1352                           ;GPS_DUALUART_Parsing.h: 50: break;
  1353  001474  D01D               	goto	l423
  1354  001476                     l3503:
  1355                           
  1356                           ;GPS_DUALUART_Parsing.h: 52: ADXL_Init();
  1357  001476  EC83  F00E         	call	_ADXL_Init	;wreg free
  1358                           
  1359                           ;GPS_DUALUART_Parsing.h: 53: break;
  1360  00147A  D01A               	goto	l423
  1361  00147C                     l421:
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;GPS_DUALUART_Parsing.h: 55: if(rx_position_en) {
  1365  00147C  AC45               	btfss	_rx_position_en/(0+8),_rx_position_en& (0+7),c	;volatile
  1366  00147E  D018               	goto	l423
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;GPS_DUALUART_Parsing.h: 56: ProcessStepperData(byte1);
  1370  001480  0100               	movlb	0	; () banked
  1371  001482  518A               	movf	_byte1& (0+255),w,b	;volatile
  1372  001484  ECE2  F004         	call	_ProcessStepperData
  1373                           
  1374                           ;GPS_DUALUART_Parsing.h: 60: }
  1375                           
  1376                           ;GPS_DUALUART_Parsing.h: 57: }
  1377                           ;GPS_DUALUART_Parsing.h: 58: break;
  1378  001488  D013               	goto	l423
  1379  00148A                     l3509:
  1380  00148A  0100               	movlb	0	; () banked
  1381  00148C  518A               	movf	_byte1& (0+255),w,b	;volatile
  1382                           
  1383                           ; Switch size 1, requested type "space"
  1384                           ; Number of cases is 5, Range of values is 97 to 116
  1385                           ; switch strategies available:
  1386                           ; Name         Instructions Cycles
  1387                           ; simple_byte           16     9 (average)
  1388                           ;	Chosen strategy is simple_byte
  1389  00148E  0A61               	xorlw	97	; case 97
  1390  001490  B4D8               	btfsc	status,2,c
  1391  001492  D7CC               	goto	l414
  1392  001494  0A03               	xorlw	3	; case 98
  1393  001496  B4D8               	btfsc	status,2,c
  1394  001498  D7D8               	goto	l416
  1395  00149A  0A06               	xorlw	6	; case 100
  1396  00149C  B4D8               	btfsc	status,2,c
  1397  00149E  D7EB               	goto	l3503
  1398  0014A0  0A17               	xorlw	23	; case 115
  1399  0014A2  B4D8               	btfsc	status,2,c
  1400  0014A4  D7E1               	goto	l417
  1401  0014A6  0A07               	xorlw	7	; case 116
  1402  0014A8  B4D8               	btfsc	status,2,c
  1403  0014AA  D7E2               	goto	l3501
  1404  0014AC  D7E7               	goto	l421
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;GPS_DUALUART_Parsing.h: 61: while(PIR1bits.RC1IF==1);
  1408  0014AE  D000               	goto	l423
  1409  0014B0                     l423:
  1410  0014B0  BA9E               	btfsc	3998,5,c	;volatile
  1411  0014B2  D7FE               	goto	l423
  1412                           
  1413                           ;GPS_DUALUART_Parsing.h: 62: int1flag = 0;
  1414  0014B4  9645               	bcf	_int1flag/(0+8),_int1flag& (0+7),c	;volatile
  1415  0014B6  0012               	return		;funcret
  1416  0014B8                     __end_of_RxI1:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           indf1	equ	0xFE7
  1425                           fsr1h	equ	0xFE2
  1426                           fsr1l	equ	0xFE1
  1427                           indf2	equ	0xFDF
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _Timer0_Init *****************
  1433 ;; Defined at:
  1434 ;;		line 28 in file "TIMER_45k222.h"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;		None               void
  1441 ;; Registers used:
  1442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1448 ;;      Params:         0       0       0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0
  1451 ;;      Totals:         0       0       0       0       0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:   11
  1455 ;; This function calls:
  1456 ;;		_dis_string
  1457 ;;		_first_line
  1458 ;; This function is called by:
  1459 ;;		_RxI1
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text5
  1464  001AF0                     __ptext5:
  1465                           	opt stack 0
  1466  001AF0                     _Timer0_Init:
  1467                           	opt stack 18
  1468                           
  1469                           ;TIMER_45k222.h: 29: first_line();
  1470                           
  1471                           ;incstack = 0
  1472  001AF0  ECA7  F00E         	call	_first_line	;wreg free
  1473                           
  1474                           ;TIMER_45k222.h: 30: dis_string("Compressing Air ", 16);
  1475  001AF4  0E56               	movlw	low STR_3
  1476  001AF6  0100               	movlb	0	; () banked
  1477  001AF8  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1478  001AFA  0E06               	movlw	high STR_3
  1479  001AFC  0100               	movlb	0	; () banked
  1480  001AFE  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1481  001B00  0E10               	movlw	16
  1482  001B02  0100               	movlb	0	; () banked
  1483  001B04  6FA2               	movwf	dis_string@len& (0+255),b
  1484  001B06  EC5C  F00A         	call	_dis_string	;wreg free
  1485                           
  1486                           ;TIMER_45k222.h: 31: INTCONbits.TMR0IF = 0;
  1487  001B0A  94F2               	bcf	intcon,2,c	;volatile
  1488                           
  1489                           ;TIMER_45k222.h: 32: T0CONbits.T08BIT = 0;
  1490  001B0C  9CD5               	bcf	4053,6,c	;volatile
  1491                           
  1492                           ;TIMER_45k222.h: 33: T0CONbits.T0CS = 0;
  1493  001B0E  9AD5               	bcf	4053,5,c	;volatile
  1494                           
  1495                           ;TIMER_45k222.h: 34: T0CONbits.PSA = 0;
  1496  001B10  96D5               	bcf	4053,3,c	;volatile
  1497                           
  1498                           ;TIMER_45k222.h: 35: T0CONbits.T0PS = 0b111;
  1499  001B12  80D5               	bsf	4053,0,c	;volatile
  1500  001B14  82D5               	bsf	4053,1,c	;volatile
  1501  001B16  84D5               	bsf	4053,2,c	;volatile
  1502                           
  1503                           ;TIMER_45k222.h: 36: second = 0;
  1504  001B18  0E00               	movlw	0
  1505  001B1A  0100               	movlb	0	; () banked
  1506  001B1C  6F89               	movwf	(_second+1)& (0+255),b
  1507  001B1E  0E00               	movlw	0
  1508  001B20  6F88               	movwf	_second& (0+255),b
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;TIMER_45k222.h: 37: minute = 0;
  1512  001B22  0E00               	movlw	0
  1513  001B24  6E35               	movwf	_minute+1,c
  1514  001B26  0E00               	movlw	0
  1515  001B28  6E34               	movwf	_minute,c
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;TIMER_45k222.h: 38: TMR0H = 0xC2;
  1519  001B2A  0EC2               	movlw	194
  1520  001B2C  6ED7               	movwf	4055,c	;volatile
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;TIMER_45k222.h: 39: TMR0L = 0xF7;
  1524  001B2E  0EF7               	movlw	247
  1525  001B30  6ED6               	movwf	4054,c	;volatile
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;TIMER_45k222.h: 40: INTCONbits.TMR0IE = 1;
  1529  001B32  8AF2               	bsf	intcon,5,c	;volatile
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;TIMER_45k222.h: 42: comp_tmr_en = 1;
  1533  001B34  8245               	bsf	_comp_tmr_en/(0+8),_comp_tmr_en& (0+7),c	;volatile
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;TIMER_45k222.h: 43: T0CONbits.TMR0ON = 1;
  1537  001B36  8ED5               	bsf	4053,7,c	;volatile
  1538                           
  1539                           ; BSR set to: 0
  1540  001B38  0012               	return		;funcret
  1541  001B3A                     __end_of_Timer0_Init:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           intcon	equ	0xFF2
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           indf1	equ	0xFE7
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           indf2	equ	0xFDF
  1554                           fsr2h	equ	0xFDA
  1555                           fsr2l	equ	0xFD9
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _ProcessStepperData *****************
  1559 ;; Defined at:
  1560 ;;		line 58 in file "Stepper_Drive.h"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  data1           1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  data1           1   34[BANK0 ] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;		None               void
  1567 ;; Registers used:
  1568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         0       1       0       0       0       0       0
  1576 ;;      Temps:          0       4       0       0       0       0       0
  1577 ;;      Totals:         0       5       0       0       0       0       0
  1578 ;;Total ram usage:        5 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:   11
  1581 ;; This function calls:
  1582 ;;		_ProcessSteps
  1583 ;;		___wmul
  1584 ;;		_clr_scr
  1585 ;;		_dis_char
  1586 ;;		_dis_string
  1587 ;;		_first_line
  1588 ;;		_second_line
  1589 ;;		_tx1_byte
  1590 ;;		_tx1_byte_n
  1591 ;; This function is called by:
  1592 ;;		_RxI1
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text6
  1597  0009C4                     __ptext6:
  1598                           	opt stack 0
  1599  0009C4                     _ProcessStepperData:
  1600                           	opt stack 18
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;incstack = 0
  1604                           ;ProcessStepperData@data1 stored from wreg
  1605  0009C4  0100               	movlb	0	; () banked
  1606  0009C6  6FB1               	movwf	ProcessStepperData@data1& (0+255),b
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;Stepper_Drive.h: 59: if(data1 != 'x') {
  1610  0009C8  0E78               	movlw	120
  1611  0009CA  0100               	movlb	0	; () banked
  1612  0009CC  19B1               	xorwf	ProcessStepperData@data1& (0+255),w,b
  1613  0009CE  B4D8               	btfsc	status,2,c
  1614  0009D0  D00E               	goto	l3245
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;Stepper_Drive.h: 60: rx_position[i] = data1;
  1618  0009D2  0E8B               	movlw	low _rx_position
  1619  0009D4  0100               	movlb	0	; () banked
  1620  0009D6  2584               	addwf	_i& (0+255),w,b
  1621  0009D8  6ED9               	movwf	fsr2l,c
  1622  0009DA  0E00               	movlw	high _rx_position
  1623  0009DC  0100               	movlb	0	; () banked
  1624  0009DE  2185               	addwfc	(_i+1)& (0+255),w,b
  1625  0009E0  6EDA               	movwf	fsr2h,c
  1626  0009E2  C0B1  FFDF         	movff	ProcessStepperData@data1,indf2
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;Stepper_Drive.h: 61: i++;
  1630  0009E6  0100               	movlb	0	; () banked
  1631  0009E8  4B84               	infsnz	_i& (0+255),f,b
  1632  0009EA  2B85               	incf	(_i+1)& (0+255),f,b
  1633                           
  1634                           ;Stepper_Drive.h: 62: } else if(data1 == 'x') {
  1635  0009EC  0012               	return	
  1636  0009EE                     l3245:
  1637                           
  1638                           ; BSR set to: 0
  1639  0009EE  0E78               	movlw	120
  1640  0009F0  0100               	movlb	0	; () banked
  1641  0009F2  19B1               	xorwf	ProcessStepperData@data1& (0+255),w,b
  1642  0009F4  A4D8               	btfss	status,2,c
  1643  0009F6  0012               	return	
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;Stepper_Drive.h: 63: rx_position_en = 0;
  1647  0009F8  9C45               	bcf	_rx_position_en/(0+8),_rx_position_en& (0+7),c	;volatile
  1648                           
  1649                           ;Stepper_Drive.h: 64: INTCONbits.GIE = 0;
  1650  0009FA  9EF2               	bcf	intcon,7,c	;volatile
  1651                           
  1652                           ;Stepper_Drive.h: 65: for(j=i;j<4;j++)
  1653  0009FC  C084  F086         	movff	_i,_j
  1654  000A00  C085  F087         	movff	_i+1,_j+1
  1655  000A04  D00E               	goto	l3253
  1656  000A06                     l3249:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;Stepper_Drive.h: 66: rx_position[j] = 0;
  1660  000A06  0E8B               	movlw	low _rx_position
  1661  000A08  0100               	movlb	0	; () banked
  1662  000A0A  2586               	addwf	_j& (0+255),w,b
  1663  000A0C  6ED9               	movwf	fsr2l,c
  1664  000A0E  0E00               	movlw	high _rx_position
  1665  000A10  0100               	movlb	0	; () banked
  1666  000A12  2187               	addwfc	(_j+1)& (0+255),w,b
  1667  000A14  6EDA               	movwf	fsr2h,c
  1668  000A16  0E00               	movlw	0
  1669  000A18  6EDF               	movwf	indf2,c
  1670                           
  1671                           ; BSR set to: 0
  1672  000A1A  0100               	movlb	0	; () banked
  1673  000A1C  4B86               	infsnz	_j& (0+255),f,b
  1674  000A1E  2B87               	incf	(_j+1)& (0+255),f,b
  1675  000A20  D000               	goto	l3253
  1676  000A22                     l3253:
  1677                           
  1678                           ; BSR set to: 0
  1679  000A22  0100               	movlb	0	; () banked
  1680  000A24  5187               	movf	(_j+1)& (0+255),w,b
  1681  000A26  E107               	bnz	l3255
  1682  000A28  0E04               	movlw	4
  1683  000A2A  0100               	movlb	0	; () banked
  1684  000A2C  5D86               	subwf	_j& (0+255),w,b
  1685  000A2E  B0D8               	btfsc	status,0,c
  1686  000A30  D002               	goto	l3255
  1687  000A32  D7E9               	goto	l3249
  1688  000A34  D000               	goto	l3255
  1689  000A36                     l3255:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;Stepper_Drive.h: 67: clr_scr();
  1693  000A36  EC6A  F00E         	call	_clr_scr	;wreg free
  1694                           
  1695                           ;Stepper_Drive.h: 68: first_line();
  1696  000A3A  ECA7  F00E         	call	_first_line	;wreg free
  1697                           
  1698                           ;Stepper_Drive.h: 69: dis_string("Positioning Ang ", 16);
  1699  000A3E  0E45               	movlw	low STR_1
  1700  000A40  0100               	movlb	0	; () banked
  1701  000A42  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1702  000A44  0E06               	movlw	high STR_1
  1703  000A46  0100               	movlb	0	; () banked
  1704  000A48  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1705  000A4A  0E10               	movlw	16
  1706  000A4C  0100               	movlb	0	; () banked
  1707  000A4E  6FA2               	movwf	dis_string@len& (0+255),b
  1708  000A50  EC5C  F00A         	call	_dis_string	;wreg free
  1709                           
  1710                           ;Stepper_Drive.h: 70: second_line();
  1711  000A54  ECAB  F00E         	call	_second_line	;wreg free
  1712                           
  1713                           ;Stepper_Drive.h: 71: dis_string(rx_position, 4);
  1714  000A58  0E8B               	movlw	low _rx_position
  1715  000A5A  0100               	movlb	0	; () banked
  1716  000A5C  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1717  000A5E  0E00               	movlw	high _rx_position
  1718  000A60  0100               	movlb	0	; () banked
  1719  000A62  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1720  000A64  0E04               	movlw	4
  1721  000A66  0100               	movlb	0	; () banked
  1722  000A68  6FA2               	movwf	dis_string@len& (0+255),b
  1723  000A6A  EC5C  F00A         	call	_dis_string	;wreg free
  1724                           
  1725                           ;Stepper_Drive.h: 72: abs_position = ((rx_position[0]-48)*1000)+((rx_position[1]-48)*100
      +                          )+((rx_position[2]-48)*10)+(rx_position[3]-48);
  1726  000A6E  0ED0               	movlw	208
  1727  000A70  0100               	movlb	0	; () banked
  1728  000A72  6FAD               	movwf	??_ProcessStepperData& (0+255),b
  1729  000A74  0EFF               	movlw	255
  1730  000A76  0100               	movlb	0	; () banked
  1731  000A78  6FAE               	movwf	(??_ProcessStepperData+1)& (0+255),b
  1732  000A7A  0ED0               	movlw	208
  1733  000A7C  0100               	movlb	0	; () banked
  1734  000A7E  258B               	addwf	_rx_position& (0+255),w,b
  1735  000A80  0100               	movlb	0	; () banked
  1736  000A82  6F8F               	movwf	___wmul@multiplier& (0+255),b
  1737  000A84  0100               	movlb	0	; () banked
  1738  000A86  6B90               	clrf	(___wmul@multiplier+1)& (0+255),b
  1739  000A88  0EFF               	movlw	255
  1740  000A8A  2390               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1741  000A8C  0E03               	movlw	3
  1742  000A8E  0100               	movlb	0	; () banked
  1743  000A90  6F92               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1744  000A92  0EE8               	movlw	232
  1745  000A94  6F91               	movwf	___wmul@multiplicand& (0+255),b
  1746  000A96  ECD8  F00D         	call	___wmul	;wreg free
  1747  000A9A  0100               	movlb	0	; () banked
  1748  000A9C  518E               	movf	(_rx_position+3)& (0+255),w,b
  1749  000A9E  0100               	movlb	0	; () banked
  1750  000AA0  6FAF               	movwf	(??_ProcessStepperData+2)& (0+255),b
  1751  000AA2  6BB0               	clrf	(??_ProcessStepperData+3)& (0+255),b
  1752  000AA4  0100               	movlb	0	; () banked
  1753  000AA6  518F               	movf	?___wmul& (0+255),w,b
  1754  000AA8  0100               	movlb	0	; () banked
  1755  000AAA  27AF               	addwf	(??_ProcessStepperData+2)& (0+255),f,b
  1756  000AAC  0100               	movlb	0	; () banked
  1757  000AAE  5190               	movf	(?___wmul+1)& (0+255),w,b
  1758  000AB0  0100               	movlb	0	; () banked
  1759  000AB2  23B0               	addwfc	(??_ProcessStepperData+3)& (0+255),f,b
  1760  000AB4  0ED0               	movlw	208
  1761  000AB6  0100               	movlb	0	; () banked
  1762  000AB8  258C               	addwf	(_rx_position+1)& (0+255),w,b
  1763  000ABA  0100               	movlb	0	; () banked
  1764  000ABC  6F8F               	movwf	___wmul@multiplier& (0+255),b
  1765  000ABE  0100               	movlb	0	; () banked
  1766  000AC0  6B90               	clrf	(___wmul@multiplier+1)& (0+255),b
  1767  000AC2  0EFF               	movlw	255
  1768  000AC4  2390               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1769  000AC6  0E00               	movlw	0
  1770  000AC8  0100               	movlb	0	; () banked
  1771  000ACA  6F92               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1772  000ACC  0E64               	movlw	100
  1773  000ACE  6F91               	movwf	___wmul@multiplicand& (0+255),b
  1774  000AD0  ECD8  F00D         	call	___wmul	;wreg free
  1775  000AD4  0100               	movlb	0	; () banked
  1776  000AD6  518F               	movf	?___wmul& (0+255),w,b
  1777  000AD8  0100               	movlb	0	; () banked
  1778  000ADA  27AF               	addwf	(??_ProcessStepperData+2)& (0+255),f,b
  1779  000ADC  0100               	movlb	0	; () banked
  1780  000ADE  5190               	movf	(?___wmul+1)& (0+255),w,b
  1781  000AE0  0100               	movlb	0	; () banked
  1782  000AE2  23B0               	addwfc	(??_ProcessStepperData+3)& (0+255),f,b
  1783  000AE4  0ED0               	movlw	208
  1784  000AE6  0100               	movlb	0	; () banked
  1785  000AE8  258D               	addwf	(_rx_position+2)& (0+255),w,b
  1786  000AEA  0100               	movlb	0	; () banked
  1787  000AEC  6F8F               	movwf	___wmul@multiplier& (0+255),b
  1788  000AEE  0100               	movlb	0	; () banked
  1789  000AF0  6B90               	clrf	(___wmul@multiplier+1)& (0+255),b
  1790  000AF2  0EFF               	movlw	255
  1791  000AF4  2390               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1792  000AF6  0E00               	movlw	0
  1793  000AF8  0100               	movlb	0	; () banked
  1794  000AFA  6F92               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1795  000AFC  0E0A               	movlw	10
  1796  000AFE  6F91               	movwf	___wmul@multiplicand& (0+255),b
  1797  000B00  ECD8  F00D         	call	___wmul	;wreg free
  1798  000B04  0100               	movlb	0	; () banked
  1799  000B06  518F               	movf	?___wmul& (0+255),w,b
  1800  000B08  0100               	movlb	0	; () banked
  1801  000B0A  27AF               	addwf	(??_ProcessStepperData+2)& (0+255),f,b
  1802  000B0C  0100               	movlb	0	; () banked
  1803  000B0E  5190               	movf	(?___wmul+1)& (0+255),w,b
  1804  000B10  0100               	movlb	0	; () banked
  1805  000B12  23B0               	addwfc	(??_ProcessStepperData+3)& (0+255),f,b
  1806  000B14  0100               	movlb	0	; () banked
  1807  000B16  51AD               	movf	??_ProcessStepperData& (0+255),w,b
  1808  000B18  0100               	movlb	0	; () banked
  1809  000B1A  27AF               	addwf	(??_ProcessStepperData+2)& (0+255),f,b
  1810  000B1C  0100               	movlb	0	; () banked
  1811  000B1E  51AE               	movf	(??_ProcessStepperData+1)& (0+255),w,b
  1812  000B20  0100               	movlb	0	; () banked
  1813  000B22  23B0               	addwfc	(??_ProcessStepperData+3)& (0+255),f,b
  1814  000B24  C0AF  F07C         	movff	??_ProcessStepperData+2,_abs_position
  1815  000B28  C0B0  F07D         	movff	??_ProcessStepperData+3,_abs_position+1
  1816  000B2C  0100               	movlb	0	; () banked
  1817  000B2E  0E00               	movlw	0
  1818  000B30  BF7D               	btfsc	(_abs_position+1)& (0+255),7,b
  1819  000B32  0EFF               	movlw	-1
  1820  000B34  6F7E               	movwf	(_abs_position+2)& (0+255),b
  1821  000B36  6F7F               	movwf	(_abs_position+3)& (0+255),b
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;Stepper_Drive.h: 73: ProcessSteps(abs_position);
  1825  000B38  C07C  F095         	movff	_abs_position,ProcessSteps@position
  1826  000B3C  C07D  F096         	movff	_abs_position+1,ProcessSteps@position+1
  1827  000B40  C07E  F097         	movff	_abs_position+2,ProcessSteps@position+2
  1828  000B44  C07F  F098         	movff	_abs_position+3,ProcessSteps@position+3
  1829  000B48  EC3E  F003         	call	_ProcessSteps	;wreg free
  1830                           
  1831                           ;Stepper_Drive.h: 74: tx1_byte('d');
  1832  000B4C  0E64               	movlw	100
  1833  000B4E  EC96  F00E         	call	_tx1_byte
  1834                           
  1835                           ;Stepper_Drive.h: 75: tx1_byte('d');
  1836  000B52  0E64               	movlw	100
  1837  000B54  EC96  F00E         	call	_tx1_byte
  1838                           
  1839                           ;Stepper_Drive.h: 76: tx1_byte('d');
  1840  000B58  0E64               	movlw	100
  1841  000B5A  EC96  F00E         	call	_tx1_byte
  1842                           
  1843                           ;Stepper_Drive.h: 77: tx1_byte_n('d');
  1844  000B5E  0E64               	movlw	100
  1845  000B60  EC5D  F00E         	call	_tx1_byte_n
  1846                           
  1847                           ;Stepper_Drive.h: 78: dis_char('d');
  1848  000B64  0E64               	movlw	100
  1849  000B66  EC0A  F00E         	call	_dis_char
  1850                           
  1851                           ;Stepper_Drive.h: 79: i=0;
  1852  000B6A  0E00               	movlw	0
  1853  000B6C  0100               	movlb	0	; () banked
  1854  000B6E  6F85               	movwf	(_i+1)& (0+255),b
  1855  000B70  0E00               	movlw	0
  1856  000B72  6F84               	movwf	_i& (0+255),b
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;Stepper_Drive.h: 80: j=0;
  1860  000B74  0E00               	movlw	0
  1861  000B76  0100               	movlb	0	; () banked
  1862  000B78  6F87               	movwf	(_j+1)& (0+255),b
  1863  000B7A  0E00               	movlw	0
  1864  000B7C  6F86               	movwf	_j& (0+255),b
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;Stepper_Drive.h: 81: INTCONbits.GIE = 1;
  1868  000B7E  8EF2               	bsf	intcon,7,c	;volatile
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;Stepper_Drive.h: 82: clr_scr();
  1872  000B80  EC6A  F00E         	call	_clr_scr	;wreg free
  1873                           
  1874                           ;Stepper_Drive.h: 83: first_line();
  1875  000B84  ECA7  F00E         	call	_first_line	;wreg free
  1876                           
  1877                           ;Stepper_Drive.h: 84: dis_string("Waiting for CMD ",16);
  1878  000B88  0E34               	movlw	low STR_2
  1879  000B8A  0100               	movlb	0	; () banked
  1880  000B8C  6FA0               	movwf	dis_string@wrptr& (0+255),b
  1881  000B8E  0E06               	movlw	high STR_2
  1882  000B90  0100               	movlb	0	; () banked
  1883  000B92  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  1884  000B94  0E10               	movlw	16
  1885  000B96  0100               	movlb	0	; () banked
  1886  000B98  6FA2               	movwf	dis_string@len& (0+255),b
  1887  000B9A  EC5C  F00A         	call	_dis_string	;wreg free
  1888  000B9E  0012               	return	
  1889  000BA0  0012               	return		;funcret
  1890  000BA2                     __end_of_ProcessStepperData:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           indf1	equ	0xFE7
  1900                           fsr1h	equ	0xFE2
  1901                           fsr1l	equ	0xFE1
  1902                           indf2	equ	0xFDF
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function ___wmul *****************
  1908 ;; Defined at:
  1909 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1912 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  product         2    4[BANK0 ] unsigned int 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2    0[BANK0 ] unsigned int 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2, status,0, prodl, prodh
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1924 ;;      Params:         0       4       0       0       0       0       0
  1925 ;;      Locals:         0       2       0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0
  1927 ;;      Totals:         0       6       0       0       0       0       0
  1928 ;;Total ram usage:        6 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    7
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_ProcessStepperData
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text7
  1939  001BB0                     __ptext7:
  1940                           	opt stack 0
  1941  001BB0                     ___wmul:
  1942                           	opt stack 21
  1943                           
  1944                           ;incstack = 0
  1945  001BB0  0100               	movlb	0	; () banked
  1946  001BB2  518F               	movf	___wmul@multiplier& (0+255),w,b
  1947  001BB4  0100               	movlb	0	; () banked
  1948  001BB6  0391               	mulwf	___wmul@multiplicand& (0+255),b
  1949  001BB8  CFF3 F093          	movff	prodl,___wmul@product
  1950  001BBC  CFF4 F094          	movff	prodh,___wmul@product+1
  1951  001BC0  0100               	movlb	0	; () banked
  1952  001BC2  518F               	movf	___wmul@multiplier& (0+255),w,b
  1953  001BC4  0100               	movlb	0	; () banked
  1954  001BC6  0392               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1955  001BC8  50F3               	movf	prodl,w,c
  1956  001BCA  0100               	movlb	0	; () banked
  1957  001BCC  2794               	addwf	(___wmul@product+1)& (0+255),f,b
  1958  001BCE  0100               	movlb	0	; () banked
  1959  001BD0  5190               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1960  001BD2  0100               	movlb	0	; () banked
  1961  001BD4  0391               	mulwf	___wmul@multiplicand& (0+255),b
  1962  001BD6  50F3               	movf	prodl,w,c
  1963  001BD8  0100               	movlb	0	; () banked
  1964  001BDA  2794               	addwf	(___wmul@product+1)& (0+255),f,b
  1965                           
  1966                           ; BSR set to: 0
  1967  001BDC  C093  F08F         	movff	___wmul@product,?___wmul
  1968  001BE0  C094  F090         	movff	___wmul@product+1,?___wmul+1
  1969  001BE4  0012               	return	
  1970                           
  1971                           ; BSR set to: 0
  1972                           
  1973                           ; BSR set to: 0
  1974  001BE6  0012               	return		;funcret
  1975  001BE8                     __end_of___wmul:
  1976                           	opt stack 0
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           indf1	equ	0xFE7
  1987                           fsr1h	equ	0xFE2
  1988                           fsr1l	equ	0xFE1
  1989                           indf2	equ	0xFDF
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _ProcessSteps *****************
  1995 ;; Defined at:
  1996 ;;		line 115 in file "Stepper_Drive.h"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  position        4    6[BANK0 ] long 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;		None               void
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         0       4       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          0      20       0       0       0       0       0
  2013 ;;      Totals:         0      24       0       0       0       0       0
  2014 ;;Total ram usage:       24 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    9
  2017 ;; This function calls:
  2018 ;;		_FullStepsNeg
  2019 ;;		_FullStepsPos
  2020 ;; This function is called by:
  2021 ;;		_ProcessStepperData
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text8
  2026  00067C                     __ptext8:
  2027                           	opt stack 0
  2028  00067C                     _ProcessSteps:
  2029                           	opt stack 19
  2030                           
  2031                           ;Stepper_Drive.h: 116: if(position == last_position)
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;incstack = 0
  2035  00067C  0100               	movlb	0	; () banked
  2036  00067E  5180               	movf	_last_position& (0+255),w,b
  2037  000680  0100               	movlb	0	; () banked
  2038  000682  1995               	xorwf	ProcessSteps@position& (0+255),w,b
  2039  000684  E112               	bnz	l3161
  2040  000686  0100               	movlb	0	; () banked
  2041  000688  5181               	movf	(_last_position+1)& (0+255),w,b
  2042  00068A  0100               	movlb	0	; () banked
  2043  00068C  1996               	xorwf	(ProcessSteps@position+1)& (0+255),w,b
  2044  00068E  E10D               	bnz	l3161
  2045  000690  0100               	movlb	0	; () banked
  2046  000692  5182               	movf	(_last_position+2)& (0+255),w,b
  2047  000694  0100               	movlb	0	; () banked
  2048  000696  1997               	xorwf	(ProcessSteps@position+2)& (0+255),w,b
  2049  000698  E108               	bnz	l3161
  2050  00069A  0100               	movlb	0	; () banked
  2051  00069C  5183               	movf	(_last_position+3)& (0+255),w,b
  2052  00069E  0100               	movlb	0	; () banked
  2053  0006A0  1998               	xorwf	(ProcessSteps@position+3)& (0+255),w,b
  2054  0006A2  A4D8               	btfss	status,2,c
  2055  0006A4  D002               	goto	l3161
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;Stepper_Drive.h: 117: __nop();
  2059  0006A6  F000               	nop	
  2060  0006A8  D184               	goto	l3177
  2061  0006AA                     l3161:
  2062                           
  2063                           ;Stepper_Drive.h: 118: else if(position > last_position) {
  2064  0006AA  0100               	movlb	0	; () banked
  2065  0006AC  5195               	movf	ProcessSteps@position& (0+255),w,b
  2066  0006AE  0100               	movlb	0	; () banked
  2067  0006B0  5D80               	subwf	_last_position& (0+255),w,b
  2068  0006B2  0100               	movlb	0	; () banked
  2069  0006B4  5196               	movf	(ProcessSteps@position+1)& (0+255),w,b
  2070  0006B6  0100               	movlb	0	; () banked
  2071  0006B8  5981               	subwfb	(_last_position+1)& (0+255),w,b
  2072  0006BA  0100               	movlb	0	; () banked
  2073  0006BC  5197               	movf	(ProcessSteps@position+2)& (0+255),w,b
  2074  0006BE  0100               	movlb	0	; () banked
  2075  0006C0  5982               	subwfb	(_last_position+2)& (0+255),w,b
  2076  0006C2  0100               	movlb	0	; () banked
  2077  0006C4  5198               	movf	(ProcessSteps@position+3)& (0+255),w,b
  2078  0006C6  0100               	movlb	0	; () banked
  2079  0006C8  5983               	subwfb	(_last_position+3)& (0+255),w,b
  2080  0006CA  B0D8               	btfsc	status,0,c
  2081  0006CC  D0B0               	goto	l3169
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;Stepper_Drive.h: 122: if((position - last_position) > (3600-position+last_position))
  2085  0006CE  C080  F099         	movff	_last_position,??_ProcessSteps
  2086  0006D2  C081  F09A         	movff	_last_position+1,??_ProcessSteps+1
  2087  0006D6  C082  F09B         	movff	_last_position+2,??_ProcessSteps+2
  2088  0006DA  C083  F09C         	movff	_last_position+3,??_ProcessSteps+3
  2089  0006DE  0100               	movlb	0	; () banked
  2090  0006E0  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2091  0006E2  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2092  0006E4  1F9B               	comf	(??_ProcessSteps+2)& (0+255),f,b
  2093  0006E6  1F9C               	comf	(??_ProcessSteps+3)& (0+255),f,b
  2094  0006E8  2B99               	incf	??_ProcessSteps& (0+255),f,b
  2095  0006EA  0E00               	movlw	0
  2096  0006EC  239A               	addwfc	(??_ProcessSteps+1)& (0+255),f,b
  2097  0006EE  239B               	addwfc	(??_ProcessSteps+2)& (0+255),f,b
  2098  0006F0  239C               	addwfc	(??_ProcessSteps+3)& (0+255),f,b
  2099  0006F2  0100               	movlb	0	; () banked
  2100  0006F4  5195               	movf	ProcessSteps@position& (0+255),w,b
  2101  0006F6  0100               	movlb	0	; () banked
  2102  0006F8  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2103  0006FA  0100               	movlb	0	; () banked
  2104  0006FC  6F9D               	movwf	(??_ProcessSteps+4)& (0+255),b
  2105  0006FE  0100               	movlb	0	; () banked
  2106  000700  5196               	movf	(ProcessSteps@position+1)& (0+255),w,b
  2107  000702  0100               	movlb	0	; () banked
  2108  000704  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2109  000706  0100               	movlb	0	; () banked
  2110  000708  6F9E               	movwf	(??_ProcessSteps+5)& (0+255),b
  2111  00070A  0100               	movlb	0	; () banked
  2112  00070C  5197               	movf	(ProcessSteps@position+2)& (0+255),w,b
  2113  00070E  0100               	movlb	0	; () banked
  2114  000710  219B               	addwfc	(??_ProcessSteps+2)& (0+255),w,b
  2115  000712  0100               	movlb	0	; () banked
  2116  000714  6F9F               	movwf	(??_ProcessSteps+6)& (0+255),b
  2117  000716  0100               	movlb	0	; () banked
  2118  000718  5198               	movf	(ProcessSteps@position+3)& (0+255),w,b
  2119  00071A  0100               	movlb	0	; () banked
  2120  00071C  219C               	addwfc	(??_ProcessSteps+3)& (0+255),w,b
  2121  00071E  0100               	movlb	0	; () banked
  2122  000720  6FA0               	movwf	(??_ProcessSteps+7)& (0+255),b
  2123  000722  C095  F0A1         	movff	ProcessSteps@position,??_ProcessSteps+8
  2124  000726  C096  F0A2         	movff	ProcessSteps@position+1,??_ProcessSteps+9
  2125  00072A  C097  F0A3         	movff	ProcessSteps@position+2,??_ProcessSteps+10
  2126  00072E  C098  F0A4         	movff	ProcessSteps@position+3,??_ProcessSteps+11
  2127  000732  0100               	movlb	0	; () banked
  2128  000734  1FA1               	comf	(??_ProcessSteps+8)& (0+255),f,b
  2129  000736  1FA2               	comf	(??_ProcessSteps+9)& (0+255),f,b
  2130  000738  1FA3               	comf	(??_ProcessSteps+10)& (0+255),f,b
  2131  00073A  1FA4               	comf	(??_ProcessSteps+11)& (0+255),f,b
  2132  00073C  2BA1               	incf	(??_ProcessSteps+8)& (0+255),f,b
  2133  00073E  0E00               	movlw	0
  2134  000740  23A2               	addwfc	(??_ProcessSteps+9)& (0+255),f,b
  2135  000742  23A3               	addwfc	(??_ProcessSteps+10)& (0+255),f,b
  2136  000744  23A4               	addwfc	(??_ProcessSteps+11)& (0+255),f,b
  2137  000746  0100               	movlb	0	; () banked
  2138  000748  5180               	movf	_last_position& (0+255),w,b
  2139  00074A  0100               	movlb	0	; () banked
  2140  00074C  25A1               	addwf	(??_ProcessSteps+8)& (0+255),w,b
  2141  00074E  0100               	movlb	0	; () banked
  2142  000750  6FA5               	movwf	(??_ProcessSteps+12)& (0+255),b
  2143  000752  0100               	movlb	0	; () banked
  2144  000754  5181               	movf	(_last_position+1)& (0+255),w,b
  2145  000756  0100               	movlb	0	; () banked
  2146  000758  21A2               	addwfc	(??_ProcessSteps+9)& (0+255),w,b
  2147  00075A  0100               	movlb	0	; () banked
  2148  00075C  6FA6               	movwf	(??_ProcessSteps+13)& (0+255),b
  2149  00075E  0100               	movlb	0	; () banked
  2150  000760  5182               	movf	(_last_position+2)& (0+255),w,b
  2151  000762  0100               	movlb	0	; () banked
  2152  000764  21A3               	addwfc	(??_ProcessSteps+10)& (0+255),w,b
  2153  000766  0100               	movlb	0	; () banked
  2154  000768  6FA7               	movwf	(??_ProcessSteps+14)& (0+255),b
  2155  00076A  0100               	movlb	0	; () banked
  2156  00076C  5183               	movf	(_last_position+3)& (0+255),w,b
  2157  00076E  0100               	movlb	0	; () banked
  2158  000770  21A4               	addwfc	(??_ProcessSteps+11)& (0+255),w,b
  2159  000772  0100               	movlb	0	; () banked
  2160  000774  6FA8               	movwf	(??_ProcessSteps+15)& (0+255),b
  2161  000776  0E10               	movlw	16
  2162  000778  0100               	movlb	0	; () banked
  2163  00077A  25A5               	addwf	(??_ProcessSteps+12)& (0+255),w,b
  2164  00077C  0100               	movlb	0	; () banked
  2165  00077E  6FA9               	movwf	(??_ProcessSteps+16)& (0+255),b
  2166  000780  0E0E               	movlw	14
  2167  000782  0100               	movlb	0	; () banked
  2168  000784  21A6               	addwfc	(??_ProcessSteps+13)& (0+255),w,b
  2169  000786  0100               	movlb	0	; () banked
  2170  000788  6FAA               	movwf	(??_ProcessSteps+17)& (0+255),b
  2171  00078A  0E00               	movlw	0
  2172  00078C  0100               	movlb	0	; () banked
  2173  00078E  21A7               	addwfc	(??_ProcessSteps+14)& (0+255),w,b
  2174  000790  0100               	movlb	0	; () banked
  2175  000792  6FAB               	movwf	(??_ProcessSteps+18)& (0+255),b
  2176  000794  0E00               	movlw	0
  2177  000796  0100               	movlb	0	; () banked
  2178  000798  21A8               	addwfc	(??_ProcessSteps+15)& (0+255),w,b
  2179  00079A  0100               	movlb	0	; () banked
  2180  00079C  6FAC               	movwf	(??_ProcessSteps+19)& (0+255),b
  2181  00079E  0100               	movlb	0	; () banked
  2182  0007A0  519D               	movf	(??_ProcessSteps+4)& (0+255),w,b
  2183  0007A2  0100               	movlb	0	; () banked
  2184  0007A4  5DA9               	subwf	(??_ProcessSteps+16)& (0+255),w,b
  2185  0007A6  0100               	movlb	0	; () banked
  2186  0007A8  519E               	movf	(??_ProcessSteps+5)& (0+255),w,b
  2187  0007AA  0100               	movlb	0	; () banked
  2188  0007AC  59AA               	subwfb	(??_ProcessSteps+17)& (0+255),w,b
  2189  0007AE  0100               	movlb	0	; () banked
  2190  0007B0  519F               	movf	(??_ProcessSteps+6)& (0+255),w,b
  2191  0007B2  0100               	movlb	0	; () banked
  2192  0007B4  59AB               	subwfb	(??_ProcessSteps+18)& (0+255),w,b
  2193  0007B6  0100               	movlb	0	; () banked
  2194  0007B8  51A0               	movf	(??_ProcessSteps+7)& (0+255),w,b
  2195  0007BA  0100               	movlb	0	; () banked
  2196  0007BC  59AC               	subwfb	(??_ProcessSteps+19)& (0+255),w,b
  2197  0007BE  B0D8               	btfsc	status,0,c
  2198  0007C0  D01E               	goto	l3167
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;Stepper_Drive.h: 123: FullStepsNeg(3600-position+last_position);
  2202  0007C2  C095  F099         	movff	ProcessSteps@position,??_ProcessSteps
  2203  0007C6  C096  F09A         	movff	ProcessSteps@position+1,??_ProcessSteps+1
  2204  0007CA  0100               	movlb	0	; () banked
  2205  0007CC  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2206  0007CE  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2207  0007D0  4B99               	infsnz	??_ProcessSteps& (0+255),f,b
  2208  0007D2  2B9A               	incf	(??_ProcessSteps+1)& (0+255),f,b
  2209  0007D4  0100               	movlb	0	; () banked
  2210  0007D6  5180               	movf	_last_position& (0+255),w,b
  2211  0007D8  0100               	movlb	0	; () banked
  2212  0007DA  2799               	addwf	??_ProcessSteps& (0+255),f,b
  2213  0007DC  0100               	movlb	0	; () banked
  2214  0007DE  5181               	movf	(_last_position+1)& (0+255),w,b
  2215  0007E0  0100               	movlb	0	; () banked
  2216  0007E2  239A               	addwfc	(??_ProcessSteps+1)& (0+255),f,b
  2217  0007E4  0E10               	movlw	16
  2218  0007E6  0100               	movlb	0	; () banked
  2219  0007E8  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2220  0007EA  0100               	movlb	0	; () banked
  2221  0007EC  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  2222  0007EE  0E0E               	movlw	14
  2223  0007F0  0100               	movlb	0	; () banked
  2224  0007F2  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2225  0007F4  0100               	movlb	0	; () banked
  2226  0007F6  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  2227  0007F8  EC63  F006         	call	_FullStepsNeg	;wreg free
  2228  0007FC  D0DA               	goto	l3177
  2229  0007FE                     l3167:
  2230                           
  2231                           ;Stepper_Drive.h: 124: else
  2232                           ;Stepper_Drive.h: 125: FullStepsPos(position - last_position);
  2233  0007FE  C080  F099         	movff	_last_position,??_ProcessSteps
  2234  000802  C081  F09A         	movff	_last_position+1,??_ProcessSteps+1
  2235  000806  0100               	movlb	0	; () banked
  2236  000808  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2237  00080A  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2238  00080C  4B99               	infsnz	??_ProcessSteps& (0+255),f,b
  2239  00080E  2B9A               	incf	(??_ProcessSteps+1)& (0+255),f,b
  2240  000810  0100               	movlb	0	; () banked
  2241  000812  5195               	movf	ProcessSteps@position& (0+255),w,b
  2242  000814  0100               	movlb	0	; () banked
  2243  000816  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2244  000818  0100               	movlb	0	; () banked
  2245  00081A  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2246  00081C  0100               	movlb	0	; () banked
  2247  00081E  5196               	movf	(ProcessSteps@position+1)& (0+255),w,b
  2248  000820  0100               	movlb	0	; () banked
  2249  000822  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2250  000824  0100               	movlb	0	; () banked
  2251  000826  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2252  000828  ECD1  F005         	call	_FullStepsPos	;wreg free
  2253                           
  2254                           ;Stepper_Drive.h: 126: } else if(last_position > position) {
  2255  00082C  D0C2               	goto	l3177
  2256  00082E                     l3169:
  2257  00082E  0100               	movlb	0	; () banked
  2258  000830  5180               	movf	_last_position& (0+255),w,b
  2259  000832  0100               	movlb	0	; () banked
  2260  000834  5D95               	subwf	ProcessSteps@position& (0+255),w,b
  2261  000836  0100               	movlb	0	; () banked
  2262  000838  5181               	movf	(_last_position+1)& (0+255),w,b
  2263  00083A  0100               	movlb	0	; () banked
  2264  00083C  5996               	subwfb	(ProcessSteps@position+1)& (0+255),w,b
  2265  00083E  0100               	movlb	0	; () banked
  2266  000840  5182               	movf	(_last_position+2)& (0+255),w,b
  2267  000842  0100               	movlb	0	; () banked
  2268  000844  5997               	subwfb	(ProcessSteps@position+2)& (0+255),w,b
  2269  000846  0100               	movlb	0	; () banked
  2270  000848  5183               	movf	(_last_position+3)& (0+255),w,b
  2271  00084A  0100               	movlb	0	; () banked
  2272  00084C  5998               	subwfb	(ProcessSteps@position+3)& (0+255),w,b
  2273  00084E  B0D8               	btfsc	status,0,c
  2274  000850  D0B0               	goto	l3177
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;Stepper_Drive.h: 130: if((last_position - position) > (3600-last_position+position))
  2278  000852  C095  F099         	movff	ProcessSteps@position,??_ProcessSteps
  2279  000856  C096  F09A         	movff	ProcessSteps@position+1,??_ProcessSteps+1
  2280  00085A  C097  F09B         	movff	ProcessSteps@position+2,??_ProcessSteps+2
  2281  00085E  C098  F09C         	movff	ProcessSteps@position+3,??_ProcessSteps+3
  2282  000862  0100               	movlb	0	; () banked
  2283  000864  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2284  000866  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2285  000868  1F9B               	comf	(??_ProcessSteps+2)& (0+255),f,b
  2286  00086A  1F9C               	comf	(??_ProcessSteps+3)& (0+255),f,b
  2287  00086C  2B99               	incf	??_ProcessSteps& (0+255),f,b
  2288  00086E  0E00               	movlw	0
  2289  000870  239A               	addwfc	(??_ProcessSteps+1)& (0+255),f,b
  2290  000872  239B               	addwfc	(??_ProcessSteps+2)& (0+255),f,b
  2291  000874  239C               	addwfc	(??_ProcessSteps+3)& (0+255),f,b
  2292  000876  0100               	movlb	0	; () banked
  2293  000878  5180               	movf	_last_position& (0+255),w,b
  2294  00087A  0100               	movlb	0	; () banked
  2295  00087C  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2296  00087E  0100               	movlb	0	; () banked
  2297  000880  6F9D               	movwf	(??_ProcessSteps+4)& (0+255),b
  2298  000882  0100               	movlb	0	; () banked
  2299  000884  5181               	movf	(_last_position+1)& (0+255),w,b
  2300  000886  0100               	movlb	0	; () banked
  2301  000888  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2302  00088A  0100               	movlb	0	; () banked
  2303  00088C  6F9E               	movwf	(??_ProcessSteps+5)& (0+255),b
  2304  00088E  0100               	movlb	0	; () banked
  2305  000890  5182               	movf	(_last_position+2)& (0+255),w,b
  2306  000892  0100               	movlb	0	; () banked
  2307  000894  219B               	addwfc	(??_ProcessSteps+2)& (0+255),w,b
  2308  000896  0100               	movlb	0	; () banked
  2309  000898  6F9F               	movwf	(??_ProcessSteps+6)& (0+255),b
  2310  00089A  0100               	movlb	0	; () banked
  2311  00089C  5183               	movf	(_last_position+3)& (0+255),w,b
  2312  00089E  0100               	movlb	0	; () banked
  2313  0008A0  219C               	addwfc	(??_ProcessSteps+3)& (0+255),w,b
  2314  0008A2  0100               	movlb	0	; () banked
  2315  0008A4  6FA0               	movwf	(??_ProcessSteps+7)& (0+255),b
  2316  0008A6  C080  F0A1         	movff	_last_position,??_ProcessSteps+8
  2317  0008AA  C081  F0A2         	movff	_last_position+1,??_ProcessSteps+9
  2318  0008AE  C082  F0A3         	movff	_last_position+2,??_ProcessSteps+10
  2319  0008B2  C083  F0A4         	movff	_last_position+3,??_ProcessSteps+11
  2320  0008B6  0100               	movlb	0	; () banked
  2321  0008B8  1FA1               	comf	(??_ProcessSteps+8)& (0+255),f,b
  2322  0008BA  1FA2               	comf	(??_ProcessSteps+9)& (0+255),f,b
  2323  0008BC  1FA3               	comf	(??_ProcessSteps+10)& (0+255),f,b
  2324  0008BE  1FA4               	comf	(??_ProcessSteps+11)& (0+255),f,b
  2325  0008C0  2BA1               	incf	(??_ProcessSteps+8)& (0+255),f,b
  2326  0008C2  0E00               	movlw	0
  2327  0008C4  23A2               	addwfc	(??_ProcessSteps+9)& (0+255),f,b
  2328  0008C6  23A3               	addwfc	(??_ProcessSteps+10)& (0+255),f,b
  2329  0008C8  23A4               	addwfc	(??_ProcessSteps+11)& (0+255),f,b
  2330  0008CA  0100               	movlb	0	; () banked
  2331  0008CC  5195               	movf	ProcessSteps@position& (0+255),w,b
  2332  0008CE  0100               	movlb	0	; () banked
  2333  0008D0  25A1               	addwf	(??_ProcessSteps+8)& (0+255),w,b
  2334  0008D2  0100               	movlb	0	; () banked
  2335  0008D4  6FA5               	movwf	(??_ProcessSteps+12)& (0+255),b
  2336  0008D6  0100               	movlb	0	; () banked
  2337  0008D8  5196               	movf	(ProcessSteps@position+1)& (0+255),w,b
  2338  0008DA  0100               	movlb	0	; () banked
  2339  0008DC  21A2               	addwfc	(??_ProcessSteps+9)& (0+255),w,b
  2340  0008DE  0100               	movlb	0	; () banked
  2341  0008E0  6FA6               	movwf	(??_ProcessSteps+13)& (0+255),b
  2342  0008E2  0100               	movlb	0	; () banked
  2343  0008E4  5197               	movf	(ProcessSteps@position+2)& (0+255),w,b
  2344  0008E6  0100               	movlb	0	; () banked
  2345  0008E8  21A3               	addwfc	(??_ProcessSteps+10)& (0+255),w,b
  2346  0008EA  0100               	movlb	0	; () banked
  2347  0008EC  6FA7               	movwf	(??_ProcessSteps+14)& (0+255),b
  2348  0008EE  0100               	movlb	0	; () banked
  2349  0008F0  5198               	movf	(ProcessSteps@position+3)& (0+255),w,b
  2350  0008F2  0100               	movlb	0	; () banked
  2351  0008F4  21A4               	addwfc	(??_ProcessSteps+11)& (0+255),w,b
  2352  0008F6  0100               	movlb	0	; () banked
  2353  0008F8  6FA8               	movwf	(??_ProcessSteps+15)& (0+255),b
  2354  0008FA  0E10               	movlw	16
  2355  0008FC  0100               	movlb	0	; () banked
  2356  0008FE  25A5               	addwf	(??_ProcessSteps+12)& (0+255),w,b
  2357  000900  0100               	movlb	0	; () banked
  2358  000902  6FA9               	movwf	(??_ProcessSteps+16)& (0+255),b
  2359  000904  0E0E               	movlw	14
  2360  000906  0100               	movlb	0	; () banked
  2361  000908  21A6               	addwfc	(??_ProcessSteps+13)& (0+255),w,b
  2362  00090A  0100               	movlb	0	; () banked
  2363  00090C  6FAA               	movwf	(??_ProcessSteps+17)& (0+255),b
  2364  00090E  0E00               	movlw	0
  2365  000910  0100               	movlb	0	; () banked
  2366  000912  21A7               	addwfc	(??_ProcessSteps+14)& (0+255),w,b
  2367  000914  0100               	movlb	0	; () banked
  2368  000916  6FAB               	movwf	(??_ProcessSteps+18)& (0+255),b
  2369  000918  0E00               	movlw	0
  2370  00091A  0100               	movlb	0	; () banked
  2371  00091C  21A8               	addwfc	(??_ProcessSteps+15)& (0+255),w,b
  2372  00091E  0100               	movlb	0	; () banked
  2373  000920  6FAC               	movwf	(??_ProcessSteps+19)& (0+255),b
  2374  000922  0100               	movlb	0	; () banked
  2375  000924  519D               	movf	(??_ProcessSteps+4)& (0+255),w,b
  2376  000926  0100               	movlb	0	; () banked
  2377  000928  5DA9               	subwf	(??_ProcessSteps+16)& (0+255),w,b
  2378  00092A  0100               	movlb	0	; () banked
  2379  00092C  519E               	movf	(??_ProcessSteps+5)& (0+255),w,b
  2380  00092E  0100               	movlb	0	; () banked
  2381  000930  59AA               	subwfb	(??_ProcessSteps+17)& (0+255),w,b
  2382  000932  0100               	movlb	0	; () banked
  2383  000934  519F               	movf	(??_ProcessSteps+6)& (0+255),w,b
  2384  000936  0100               	movlb	0	; () banked
  2385  000938  59AB               	subwfb	(??_ProcessSteps+18)& (0+255),w,b
  2386  00093A  0100               	movlb	0	; () banked
  2387  00093C  51A0               	movf	(??_ProcessSteps+7)& (0+255),w,b
  2388  00093E  0100               	movlb	0	; () banked
  2389  000940  59AC               	subwfb	(??_ProcessSteps+19)& (0+255),w,b
  2390  000942  B0D8               	btfsc	status,0,c
  2391  000944  D01E               	goto	l3175
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;Stepper_Drive.h: 131: FullStepsPos(3600-last_position+position);
  2395  000946  C080  F099         	movff	_last_position,??_ProcessSteps
  2396  00094A  C081  F09A         	movff	_last_position+1,??_ProcessSteps+1
  2397  00094E  0100               	movlb	0	; () banked
  2398  000950  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2399  000952  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2400  000954  4B99               	infsnz	??_ProcessSteps& (0+255),f,b
  2401  000956  2B9A               	incf	(??_ProcessSteps+1)& (0+255),f,b
  2402  000958  0100               	movlb	0	; () banked
  2403  00095A  5195               	movf	ProcessSteps@position& (0+255),w,b
  2404  00095C  0100               	movlb	0	; () banked
  2405  00095E  2799               	addwf	??_ProcessSteps& (0+255),f,b
  2406  000960  0100               	movlb	0	; () banked
  2407  000962  5196               	movf	(ProcessSteps@position+1)& (0+255),w,b
  2408  000964  0100               	movlb	0	; () banked
  2409  000966  239A               	addwfc	(??_ProcessSteps+1)& (0+255),f,b
  2410  000968  0E10               	movlw	16
  2411  00096A  0100               	movlb	0	; () banked
  2412  00096C  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2413  00096E  0100               	movlb	0	; () banked
  2414  000970  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2415  000972  0E0E               	movlw	14
  2416  000974  0100               	movlb	0	; () banked
  2417  000976  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2418  000978  0100               	movlb	0	; () banked
  2419  00097A  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2420  00097C  ECD1  F005         	call	_FullStepsPos	;wreg free
  2421  000980  D018               	goto	l3177
  2422  000982                     l3175:
  2423                           
  2424                           ;Stepper_Drive.h: 132: else
  2425                           ;Stepper_Drive.h: 133: FullStepsNeg(last_position - position);
  2426  000982  C095  F099         	movff	ProcessSteps@position,??_ProcessSteps
  2427  000986  C096  F09A         	movff	ProcessSteps@position+1,??_ProcessSteps+1
  2428  00098A  0100               	movlb	0	; () banked
  2429  00098C  1F99               	comf	??_ProcessSteps& (0+255),f,b
  2430  00098E  1F9A               	comf	(??_ProcessSteps+1)& (0+255),f,b
  2431  000990  4B99               	infsnz	??_ProcessSteps& (0+255),f,b
  2432  000992  2B9A               	incf	(??_ProcessSteps+1)& (0+255),f,b
  2433  000994  0100               	movlb	0	; () banked
  2434  000996  5180               	movf	_last_position& (0+255),w,b
  2435  000998  0100               	movlb	0	; () banked
  2436  00099A  2599               	addwf	??_ProcessSteps& (0+255),w,b
  2437  00099C  0100               	movlb	0	; () banked
  2438  00099E  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  2439  0009A0  0100               	movlb	0	; () banked
  2440  0009A2  5181               	movf	(_last_position+1)& (0+255),w,b
  2441  0009A4  0100               	movlb	0	; () banked
  2442  0009A6  219A               	addwfc	(??_ProcessSteps+1)& (0+255),w,b
  2443  0009A8  0100               	movlb	0	; () banked
  2444  0009AA  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  2445  0009AC  EC63  F006         	call	_FullStepsNeg	;wreg free
  2446  0009B0  D000               	goto	l3177
  2447  0009B2                     l3177:
  2448                           
  2449                           ;Stepper_Drive.h: 134: }
  2450                           ;Stepper_Drive.h: 135: last_position = position;
  2451  0009B2  C095  F080         	movff	ProcessSteps@position,_last_position
  2452  0009B6  C096  F081         	movff	ProcessSteps@position+1,_last_position+1
  2453  0009BA  C097  F082         	movff	ProcessSteps@position+2,_last_position+2
  2454  0009BE  C098  F083         	movff	ProcessSteps@position+3,_last_position+3
  2455  0009C2  0012               	return		;funcret
  2456  0009C4                     __end_of_ProcessSteps:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           prodh	equ	0xFF4
  2463                           prodl	equ	0xFF3
  2464                           intcon	equ	0xFF2
  2465                           postinc0	equ	0xFEE
  2466                           wreg	equ	0xFE8
  2467                           indf1	equ	0xFE7
  2468                           fsr1h	equ	0xFE2
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _FullStepsPos *****************
  2476 ;; Defined at:
  2477 ;;		line 174 in file "Stepper_Drive.h"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  steps           2    4[BANK0 ] unsigned int 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;		None               void
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2491 ;;      Params:         0       2       0       0       0       0       0
  2492 ;;      Locals:         0       0       0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0
  2494 ;;      Totals:         0       2       0       0       0       0       0
  2495 ;;Total ram usage:        2 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    8
  2498 ;; This function calls:
  2499 ;;		_delay
  2500 ;; This function is called by:
  2501 ;;		_ProcessSteps
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text9
  2506  000BA2                     __ptext9:
  2507                           	opt stack 0
  2508  000BA2                     _FullStepsPos:
  2509                           	opt stack 19
  2510                           
  2511                           ;Stepper_Drive.h: 175: if(last_status == 0)
  2512                           
  2513                           ;incstack = 0
  2514  000BA2  5032               	movf	_last_status,w,c
  2515  000BA4  1033               	iorwf	_last_status+1,w,c
  2516  000BA6  A4D8               	btfss	status,2,c
  2517  000BA8  D003               	goto	l3083
  2518                           
  2519                           ;Stepper_Drive.h: 176: state_pos_full = state;
  2520  000BAA  C037  F03A         	movff	_state,_state_pos_full	;volatile
  2521  000BAE  D024               	goto	l3103
  2522  000BB0                     l3083:
  2523                           
  2524                           ;Stepper_Drive.h: 177: else if(last_status == 1)
  2525  000BB0  0432               	decf	_last_status,w,c
  2526  000BB2  1033               	iorwf	_last_status+1,w,c
  2527  000BB4  B4D8               	btfsc	status,2,c
  2528  000BB6  D020               	goto	l3103
  2529  000BB8  D001               	goto	l3087
  2530  000BBA  D01E               	goto	l3103
  2531  000BBC                     l3087:
  2532                           
  2533                           ;Stepper_Drive.h: 179: else if(last_status == 2) {
  2534  000BBC  0E02               	movlw	2
  2535  000BBE  1832               	xorwf	_last_status,w,c
  2536  000BC0  1033               	iorwf	_last_status+1,w,c
  2537  000BC2  B4D8               	btfsc	status,2,c
  2538  000BC4  D00B               	goto	l3101
  2539  000BC6  D018               	goto	l3103
  2540                           
  2541                           ;Stepper_Drive.h: 180: switch(state_neg_full) {
  2542  000BC8  D009               	goto	l3101
  2543  000BCA                     l3091:
  2544                           
  2545                           ;Stepper_Drive.h: 182: state_pos_full = 0;
  2546  000BCA  0E00               	movlw	0
  2547  000BCC  D005               	goto	L4
  2548  000BCE                     l3093:
  2549                           
  2550                           ;Stepper_Drive.h: 185: state_pos_full = 3 ;
  2551  000BCE  0E03               	movlw	3
  2552  000BD0  D003               	goto	L4
  2553  000BD2                     l3095:
  2554                           
  2555                           ;Stepper_Drive.h: 188: state_pos_full = 2;
  2556  000BD2  0E02               	movlw	2
  2557  000BD4  D001               	goto	L4
  2558  000BD6                     l3097:
  2559                           
  2560                           ;Stepper_Drive.h: 191: state_pos_full = 1;
  2561  000BD6  0E01               	movlw	1
  2562  000BD8                     L4:
  2563  000BD8  6E3A               	movwf	_state_pos_full,c	;volatile
  2564                           
  2565                           ;Stepper_Drive.h: 194: }
  2566                           
  2567                           ;Stepper_Drive.h: 192: break;
  2568  000BDA  D00E               	goto	l3103
  2569  000BDC                     l3101:
  2570  000BDC  5038               	movf	_state_neg_full,w,c	;volatile
  2571                           
  2572                           ; Switch size 1, requested type "space"
  2573                           ; Number of cases is 4, Range of values is 0 to 3
  2574                           ; switch strategies available:
  2575                           ; Name         Instructions Cycles
  2576                           ; simple_byte           13     7 (average)
  2577                           ;	Chosen strategy is simple_byte
  2578  000BDE  0A00               	xorlw	0	; case 0
  2579  000BE0  B4D8               	btfsc	status,2,c
  2580  000BE2  D7F3               	goto	l3091
  2581  000BE4  0A01               	xorlw	1	; case 1
  2582  000BE6  B4D8               	btfsc	status,2,c
  2583  000BE8  D7F2               	goto	l3093
  2584  000BEA  0A03               	xorlw	3	; case 2
  2585  000BEC  B4D8               	btfsc	status,2,c
  2586  000BEE  D7F1               	goto	l3095
  2587  000BF0  0A01               	xorlw	1	; case 3
  2588  000BF2  B4D8               	btfsc	status,2,c
  2589  000BF4  D7F0               	goto	l3097
  2590  000BF6  D000               	goto	l3103
  2591  000BF8                     l3103:
  2592                           
  2593                           ;Stepper_Drive.h: 195: }
  2594                           ;Stepper_Drive.h: 197: last_status = 1;
  2595  000BF8  0E00               	movlw	0
  2596  000BFA  6E33               	movwf	_last_status+1,c
  2597  000BFC  0E01               	movlw	1
  2598  000BFE  6E32               	movwf	_last_status,c
  2599                           
  2600                           ;Stepper_Drive.h: 201: switch(state_pos_full) {
  2601                           
  2602                           ;Stepper_Drive.h: 200: do {
  2603  000C00  D049               	goto	l3131
  2604  000C02                     l316:
  2605                           
  2606                           ;Stepper_Drive.h: 203: PORTAbits.RA7=1;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  2607  000C02  8E80               	bsf	3968,7,c	;volatile
  2608  000C04  9C80               	bcf	3968,6,c	;volatile
  2609  000C06  9A80               	bcf	3968,5,c	;volatile
  2610  000C08  9880               	bcf	3968,4,c	;volatile
  2611                           
  2612                           ;Stepper_Drive.h: 204: steps = steps-1;
  2613  000C0A  0EFF               	movlw	255
  2614  000C0C  0100               	movlb	0	; () banked
  2615  000C0E  2593               	addwf	FullStepsPos@steps& (0+255),w,b
  2616  000C10  0100               	movlb	0	; () banked
  2617  000C12  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2618  000C14  0EFF               	movlw	255
  2619  000C16  0100               	movlb	0	; () banked
  2620  000C18  2194               	addwfc	(FullStepsPos@steps+1)& (0+255),w,b
  2621  000C1A  0100               	movlb	0	; () banked
  2622  000C1C  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;Stepper_Drive.h: 205: delay();
  2626  000C1E  EC2C  F00C         	call	_delay	;wreg free
  2627                           
  2628                           ;Stepper_Drive.h: 206: state_pos_full = 1;
  2629  000C22  0E01               	movlw	1
  2630  000C24  D035               	goto	L7
  2631  000C26                     l318:
  2632                           
  2633                           ;Stepper_Drive.h: 209: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=1;
  2634  000C26  9E80               	bcf	3968,7,c	;volatile
  2635  000C28  9C80               	bcf	3968,6,c	;volatile
  2636  000C2A  9A80               	bcf	3968,5,c	;volatile
  2637  000C2C  8880               	bsf	3968,4,c	;volatile
  2638                           
  2639                           ;Stepper_Drive.h: 210: steps = steps-1;
  2640  000C2E  0EFF               	movlw	255
  2641  000C30  0100               	movlb	0	; () banked
  2642  000C32  2593               	addwf	FullStepsPos@steps& (0+255),w,b
  2643  000C34  0100               	movlb	0	; () banked
  2644  000C36  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2645  000C38  0EFF               	movlw	255
  2646  000C3A  0100               	movlb	0	; () banked
  2647  000C3C  2194               	addwfc	(FullStepsPos@steps+1)& (0+255),w,b
  2648  000C3E  0100               	movlb	0	; () banked
  2649  000C40  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;Stepper_Drive.h: 211: delay();
  2653  000C42  EC2C  F00C         	call	_delay	;wreg free
  2654                           
  2655                           ;Stepper_Drive.h: 212: state_pos_full = 2;
  2656  000C46  0E02               	movlw	2
  2657  000C48  D023               	goto	L7
  2658  000C4A                     l319:
  2659                           
  2660                           ;Stepper_Drive.h: 215: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=1;PORTAbits.RA4=0;
  2661  000C4A  9E80               	bcf	3968,7,c	;volatile
  2662  000C4C  9C80               	bcf	3968,6,c	;volatile
  2663  000C4E  8A80               	bsf	3968,5,c	;volatile
  2664  000C50  9880               	bcf	3968,4,c	;volatile
  2665                           
  2666                           ;Stepper_Drive.h: 216: steps = steps-1;
  2667  000C52  0EFF               	movlw	255
  2668  000C54  0100               	movlb	0	; () banked
  2669  000C56  2593               	addwf	FullStepsPos@steps& (0+255),w,b
  2670  000C58  0100               	movlb	0	; () banked
  2671  000C5A  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2672  000C5C  0EFF               	movlw	255
  2673  000C5E  0100               	movlb	0	; () banked
  2674  000C60  2194               	addwfc	(FullStepsPos@steps+1)& (0+255),w,b
  2675  000C62  0100               	movlb	0	; () banked
  2676  000C64  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;Stepper_Drive.h: 217: delay();
  2680  000C66  EC2C  F00C         	call	_delay	;wreg free
  2681                           
  2682                           ;Stepper_Drive.h: 218: state_pos_full = 3;
  2683  000C6A  0E03               	movlw	3
  2684  000C6C  D011               	goto	L7
  2685  000C6E                     l320:
  2686                           
  2687                           ;Stepper_Drive.h: 221: PORTAbits.RA7=0;PORTAbits.RA6=1;PORTAbits.RA5=0;PORTAbits.RA4=0;
  2688  000C6E  9E80               	bcf	3968,7,c	;volatile
  2689  000C70  8C80               	bsf	3968,6,c	;volatile
  2690  000C72  9A80               	bcf	3968,5,c	;volatile
  2691  000C74  9880               	bcf	3968,4,c	;volatile
  2692                           
  2693                           ;Stepper_Drive.h: 222: steps = steps-1;
  2694  000C76  0EFF               	movlw	255
  2695  000C78  0100               	movlb	0	; () banked
  2696  000C7A  2593               	addwf	FullStepsPos@steps& (0+255),w,b
  2697  000C7C  0100               	movlb	0	; () banked
  2698  000C7E  6F93               	movwf	FullStepsPos@steps& (0+255),b
  2699  000C80  0EFF               	movlw	255
  2700  000C82  0100               	movlb	0	; () banked
  2701  000C84  2194               	addwfc	(FullStepsPos@steps+1)& (0+255),w,b
  2702  000C86  0100               	movlb	0	; () banked
  2703  000C88  6F94               	movwf	(FullStepsPos@steps+1)& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;Stepper_Drive.h: 223: delay();
  2707  000C8A  EC2C  F00C         	call	_delay	;wreg free
  2708                           
  2709                           ;Stepper_Drive.h: 224: state_pos_full = 0;
  2710  000C8E  0E00               	movlw	0
  2711  000C90                     L7:
  2712  000C90  6E3A               	movwf	_state_pos_full,c	;volatile
  2713                           
  2714                           ;Stepper_Drive.h: 226: }
  2715                           
  2716                           ;Stepper_Drive.h: 225: break;
  2717  000C92  D00E               	goto	l3133
  2718  000C94                     l3131:
  2719  000C94  503A               	movf	_state_pos_full,w,c	;volatile
  2720                           
  2721                           ; Switch size 1, requested type "space"
  2722                           ; Number of cases is 4, Range of values is 0 to 3
  2723                           ; switch strategies available:
  2724                           ; Name         Instructions Cycles
  2725                           ; simple_byte           13     7 (average)
  2726                           ;	Chosen strategy is simple_byte
  2727  000C96  0A00               	xorlw	0	; case 0
  2728  000C98  B4D8               	btfsc	status,2,c
  2729  000C9A  D7B3               	goto	l316
  2730  000C9C  0A01               	xorlw	1	; case 1
  2731  000C9E  B4D8               	btfsc	status,2,c
  2732  000CA0  D7C2               	goto	l318
  2733  000CA2  0A03               	xorlw	3	; case 2
  2734  000CA4  B4D8               	btfsc	status,2,c
  2735  000CA6  D7D1               	goto	l319
  2736  000CA8  0A01               	xorlw	1	; case 3
  2737  000CAA  B4D8               	btfsc	status,2,c
  2738  000CAC  D7E0               	goto	l320
  2739  000CAE  D000               	goto	l3133
  2740  000CB0                     l3133:
  2741                           
  2742                           ;Stepper_Drive.h: 227: }while(steps>0);
  2743  000CB0  0100               	movlb	0	; () banked
  2744  000CB2  5193               	movf	FullStepsPos@steps& (0+255),w,b
  2745  000CB4  0100               	movlb	0	; () banked
  2746  000CB6  1194               	iorwf	(FullStepsPos@steps+1)& (0+255),w,b
  2747  000CB8  A4D8               	btfss	status,2,c
  2748  000CBA  D7EC               	goto	l3131
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;Stepper_Drive.h: 228: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  2752  000CBC  9E80               	bcf	3968,7,c	;volatile
  2753  000CBE  9C80               	bcf	3968,6,c	;volatile
  2754  000CC0  9A80               	bcf	3968,5,c	;volatile
  2755  000CC2  9880               	bcf	3968,4,c	;volatile
  2756                           
  2757                           ; BSR set to: 0
  2758  000CC4  0012               	return		;funcret
  2759  000CC6                     __end_of_FullStepsPos:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           indf1	equ	0xFE7
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _FullStepsNeg *****************
  2779 ;; Defined at:
  2780 ;;		line 231 in file "Stepper_Drive.h"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  steps           2    4[BANK0 ] unsigned int 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;		None               void
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       2       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0
  2797 ;;      Totals:         0       2       0       0       0       0       0
  2798 ;;Total ram usage:        2 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    8
  2801 ;; This function calls:
  2802 ;;		_delay
  2803 ;; This function is called by:
  2804 ;;		_ProcessSteps
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text10
  2809  000CC6                     __ptext10:
  2810                           	opt stack 0
  2811  000CC6                     _FullStepsNeg:
  2812                           	opt stack 19
  2813                           
  2814                           ;Stepper_Drive.h: 232: if(last_status == 0)
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;incstack = 0
  2818  000CC6  5032               	movf	_last_status,w,c
  2819  000CC8  1033               	iorwf	_last_status+1,w,c
  2820  000CCA  B4D8               	btfsc	status,2,c
  2821  000CCC  D00D               	goto	l3035
  2822                           
  2823                           ;Stepper_Drive.h: 234: else if(last_status == 2)
  2824                           
  2825                           ;Stepper_Drive.h: 233: state_neg_full = 0;
  2826  000CCE  0E02               	movlw	2
  2827  000CD0  1832               	xorwf	_last_status,w,c
  2828  000CD2  1033               	iorwf	_last_status+1,w,c
  2829  000CD4  B4D8               	btfsc	status,2,c
  2830  000CD6  D01F               	goto	l3047
  2831  000CD8  D001               	goto	l3031
  2832  000CDA  D01D               	goto	l3047
  2833  000CDC                     l3031:
  2834                           
  2835                           ;Stepper_Drive.h: 236: else if(last_status == 1) {
  2836  000CDC  0432               	decf	_last_status,w,c
  2837  000CDE  1033               	iorwf	_last_status+1,w,c
  2838  000CE0  B4D8               	btfsc	status,2,c
  2839  000CE2  D00B               	goto	l3045
  2840  000CE4  D018               	goto	l3047
  2841                           
  2842                           ;Stepper_Drive.h: 237: switch(state_pos_full) {
  2843  000CE6  D009               	goto	l3045
  2844  000CE8                     l3035:
  2845                           
  2846                           ;Stepper_Drive.h: 239: state_neg_full = 0;
  2847  000CE8  0E00               	movlw	0
  2848  000CEA  D005               	goto	L10
  2849  000CEC                     l3037:
  2850                           
  2851                           ;Stepper_Drive.h: 242: state_neg_full = 3 ;
  2852  000CEC  0E03               	movlw	3
  2853  000CEE  D003               	goto	L10
  2854  000CF0                     l3039:
  2855                           
  2856                           ;Stepper_Drive.h: 245: state_neg_full = 2;
  2857  000CF0  0E02               	movlw	2
  2858  000CF2  D001               	goto	L10
  2859  000CF4                     l3041:
  2860                           
  2861                           ;Stepper_Drive.h: 248: state_neg_full = 1;
  2862  000CF4  0E01               	movlw	1
  2863  000CF6                     L10:
  2864  000CF6  6E38               	movwf	_state_neg_full,c	;volatile
  2865                           
  2866                           ;Stepper_Drive.h: 251: }
  2867                           
  2868                           ;Stepper_Drive.h: 249: break;
  2869  000CF8  D00E               	goto	l3047
  2870  000CFA                     l3045:
  2871  000CFA  503A               	movf	_state_pos_full,w,c	;volatile
  2872                           
  2873                           ; Switch size 1, requested type "space"
  2874                           ; Number of cases is 4, Range of values is 0 to 3
  2875                           ; switch strategies available:
  2876                           ; Name         Instructions Cycles
  2877                           ; simple_byte           13     7 (average)
  2878                           ;	Chosen strategy is simple_byte
  2879  000CFC  0A00               	xorlw	0	; case 0
  2880  000CFE  B4D8               	btfsc	status,2,c
  2881  000D00  D7F3               	goto	l3035
  2882  000D02  0A01               	xorlw	1	; case 1
  2883  000D04  B4D8               	btfsc	status,2,c
  2884  000D06  D7F2               	goto	l3037
  2885  000D08  0A03               	xorlw	3	; case 2
  2886  000D0A  B4D8               	btfsc	status,2,c
  2887  000D0C  D7F1               	goto	l3039
  2888  000D0E  0A01               	xorlw	1	; case 3
  2889  000D10  B4D8               	btfsc	status,2,c
  2890  000D12  D7F0               	goto	l3041
  2891  000D14  D000               	goto	l3047
  2892  000D16                     l3047:
  2893                           
  2894                           ;Stepper_Drive.h: 252: }
  2895                           ;Stepper_Drive.h: 254: last_status = 2;
  2896  000D16  0E00               	movlw	0
  2897  000D18  6E33               	movwf	_last_status+1,c
  2898  000D1A  0E02               	movlw	2
  2899  000D1C  6E32               	movwf	_last_status,c
  2900                           
  2901                           ;Stepper_Drive.h: 258: switch(state_neg_full) {
  2902                           
  2903                           ;Stepper_Drive.h: 257: do {
  2904  000D1E  D049               	goto	l3075
  2905  000D20                     l338:
  2906                           
  2907                           ;Stepper_Drive.h: 260: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=1;PORTAbits.RA4=0;
  2908  000D20  9E80               	bcf	3968,7,c	;volatile
  2909  000D22  9C80               	bcf	3968,6,c	;volatile
  2910  000D24  8A80               	bsf	3968,5,c	;volatile
  2911  000D26  9880               	bcf	3968,4,c	;volatile
  2912                           
  2913                           ;Stepper_Drive.h: 261: steps = steps-1;
  2914  000D28  0EFF               	movlw	255
  2915  000D2A  0100               	movlb	0	; () banked
  2916  000D2C  2593               	addwf	FullStepsNeg@steps& (0+255),w,b
  2917  000D2E  0100               	movlb	0	; () banked
  2918  000D30  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  2919  000D32  0EFF               	movlw	255
  2920  000D34  0100               	movlb	0	; () banked
  2921  000D36  2194               	addwfc	(FullStepsNeg@steps+1)& (0+255),w,b
  2922  000D38  0100               	movlb	0	; () banked
  2923  000D3A  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;Stepper_Drive.h: 262: delay();
  2927  000D3C  EC2C  F00C         	call	_delay	;wreg free
  2928                           
  2929                           ;Stepper_Drive.h: 263: state_neg_full = 1;
  2930  000D40  0E01               	movlw	1
  2931  000D42  D035               	goto	L13
  2932  000D44                     l340:
  2933                           
  2934                           ;Stepper_Drive.h: 266: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=1;
  2935  000D44  9E80               	bcf	3968,7,c	;volatile
  2936  000D46  9C80               	bcf	3968,6,c	;volatile
  2937  000D48  9A80               	bcf	3968,5,c	;volatile
  2938  000D4A  8880               	bsf	3968,4,c	;volatile
  2939                           
  2940                           ;Stepper_Drive.h: 267: steps = steps-1;
  2941  000D4C  0EFF               	movlw	255
  2942  000D4E  0100               	movlb	0	; () banked
  2943  000D50  2593               	addwf	FullStepsNeg@steps& (0+255),w,b
  2944  000D52  0100               	movlb	0	; () banked
  2945  000D54  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  2946  000D56  0EFF               	movlw	255
  2947  000D58  0100               	movlb	0	; () banked
  2948  000D5A  2194               	addwfc	(FullStepsNeg@steps+1)& (0+255),w,b
  2949  000D5C  0100               	movlb	0	; () banked
  2950  000D5E  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;Stepper_Drive.h: 268: delay();
  2954  000D60  EC2C  F00C         	call	_delay	;wreg free
  2955                           
  2956                           ;Stepper_Drive.h: 269: state_neg_full = 2;
  2957  000D64  0E02               	movlw	2
  2958  000D66  D023               	goto	L13
  2959  000D68                     l341:
  2960                           
  2961                           ;Stepper_Drive.h: 272: PORTAbits.RA7=1;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  2962  000D68  8E80               	bsf	3968,7,c	;volatile
  2963  000D6A  9C80               	bcf	3968,6,c	;volatile
  2964  000D6C  9A80               	bcf	3968,5,c	;volatile
  2965  000D6E  9880               	bcf	3968,4,c	;volatile
  2966                           
  2967                           ;Stepper_Drive.h: 273: steps = steps-1;
  2968  000D70  0EFF               	movlw	255
  2969  000D72  0100               	movlb	0	; () banked
  2970  000D74  2593               	addwf	FullStepsNeg@steps& (0+255),w,b
  2971  000D76  0100               	movlb	0	; () banked
  2972  000D78  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  2973  000D7A  0EFF               	movlw	255
  2974  000D7C  0100               	movlb	0	; () banked
  2975  000D7E  2194               	addwfc	(FullStepsNeg@steps+1)& (0+255),w,b
  2976  000D80  0100               	movlb	0	; () banked
  2977  000D82  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;Stepper_Drive.h: 274: delay();
  2981  000D84  EC2C  F00C         	call	_delay	;wreg free
  2982                           
  2983                           ;Stepper_Drive.h: 275: state_neg_full = 3;
  2984  000D88  0E03               	movlw	3
  2985  000D8A  D011               	goto	L13
  2986  000D8C                     l342:
  2987                           
  2988                           ;Stepper_Drive.h: 278: PORTAbits.RA7=0;PORTAbits.RA6=1;PORTAbits.RA5=0;PORTAbits.RA4=0;
  2989  000D8C  9E80               	bcf	3968,7,c	;volatile
  2990  000D8E  8C80               	bsf	3968,6,c	;volatile
  2991  000D90  9A80               	bcf	3968,5,c	;volatile
  2992  000D92  9880               	bcf	3968,4,c	;volatile
  2993                           
  2994                           ;Stepper_Drive.h: 279: steps = steps-1;
  2995  000D94  0EFF               	movlw	255
  2996  000D96  0100               	movlb	0	; () banked
  2997  000D98  2593               	addwf	FullStepsNeg@steps& (0+255),w,b
  2998  000D9A  0100               	movlb	0	; () banked
  2999  000D9C  6F93               	movwf	FullStepsNeg@steps& (0+255),b
  3000  000D9E  0EFF               	movlw	255
  3001  000DA0  0100               	movlb	0	; () banked
  3002  000DA2  2194               	addwfc	(FullStepsNeg@steps+1)& (0+255),w,b
  3003  000DA4  0100               	movlb	0	; () banked
  3004  000DA6  6F94               	movwf	(FullStepsNeg@steps+1)& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;Stepper_Drive.h: 280: delay();
  3008  000DA8  EC2C  F00C         	call	_delay	;wreg free
  3009                           
  3010                           ;Stepper_Drive.h: 281: state_neg_full = 0;
  3011  000DAC  0E00               	movlw	0
  3012  000DAE                     L13:
  3013  000DAE  6E38               	movwf	_state_neg_full,c	;volatile
  3014                           
  3015                           ;Stepper_Drive.h: 283: }
  3016                           
  3017                           ;Stepper_Drive.h: 282: break;
  3018  000DB0  D00E               	goto	l3077
  3019  000DB2                     l3075:
  3020  000DB2  5038               	movf	_state_neg_full,w,c	;volatile
  3021                           
  3022                           ; Switch size 1, requested type "space"
  3023                           ; Number of cases is 4, Range of values is 0 to 3
  3024                           ; switch strategies available:
  3025                           ; Name         Instructions Cycles
  3026                           ; simple_byte           13     7 (average)
  3027                           ;	Chosen strategy is simple_byte
  3028  000DB4  0A00               	xorlw	0	; case 0
  3029  000DB6  B4D8               	btfsc	status,2,c
  3030  000DB8  D7B3               	goto	l338
  3031  000DBA  0A01               	xorlw	1	; case 1
  3032  000DBC  B4D8               	btfsc	status,2,c
  3033  000DBE  D7C2               	goto	l340
  3034  000DC0  0A03               	xorlw	3	; case 2
  3035  000DC2  B4D8               	btfsc	status,2,c
  3036  000DC4  D7D1               	goto	l341
  3037  000DC6  0A01               	xorlw	1	; case 3
  3038  000DC8  B4D8               	btfsc	status,2,c
  3039  000DCA  D7E0               	goto	l342
  3040  000DCC  D000               	goto	l3077
  3041  000DCE                     l3077:
  3042                           
  3043                           ;Stepper_Drive.h: 284: }while(steps>0);
  3044  000DCE  0100               	movlb	0	; () banked
  3045  000DD0  5193               	movf	FullStepsNeg@steps& (0+255),w,b
  3046  000DD2  0100               	movlb	0	; () banked
  3047  000DD4  1194               	iorwf	(FullStepsNeg@steps+1)& (0+255),w,b
  3048  000DD6  A4D8               	btfss	status,2,c
  3049  000DD8  D7EC               	goto	l3075
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;Stepper_Drive.h: 285: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  3053  000DDA  9E80               	bcf	3968,7,c	;volatile
  3054  000DDC  9C80               	bcf	3968,6,c	;volatile
  3055  000DDE  9A80               	bcf	3968,5,c	;volatile
  3056  000DE0  9880               	bcf	3968,4,c	;volatile
  3057                           
  3058                           ; BSR set to: 0
  3059  000DE2  0012               	return		;funcret
  3060  000DE4                     __end_of_FullStepsNeg:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           indf1	equ	0xFE7
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _ADXL_Init *****************
  3080 ;; Defined at:
  3081 ;;		line 22 in file "ADXL335_ADC_45K22.h"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;		None               void
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         0       0       0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    7
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_RxI1
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text11
  3110  001D06                     __ptext11:
  3111                           	opt stack 0
  3112  001D06                     _ADXL_Init:
  3113                           	opt stack 22
  3114                           
  3115                           ;ADXL335_ADC_45K22.h: 23: TRISE = 1;
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;incstack = 0
  3119  001D06  0E01               	movlw	1
  3120  001D08  6E96               	movwf	3990,c	;volatile
  3121                           
  3122                           ;ADXL335_ADC_45K22.h: 24: ADCON2 = 0b10101111;
  3123  001D0A  0EAF               	movlw	175
  3124  001D0C  6EC0               	movwf	4032,c	;volatile
  3125                           
  3126                           ;ADXL335_ADC_45K22.h: 25: ADCON1 = 0b00000101;
  3127  001D0E  0E05               	movlw	5
  3128  001D10  6EC1               	movwf	4033,c	;volatile
  3129                           
  3130                           ;ADXL335_ADC_45K22.h: 26: ADCON0 = 0b00010101;
  3131  001D12  0E15               	movlw	21
  3132  001D14  6EC2               	movwf	4034,c	;volatile
  3133                           
  3134                           ;ADXL335_ADC_45K22.h: 27: adxl_en = 1;
  3135  001D16  8045               	bsf	_adxl_en/(0+8),_adxl_en& (0+7),c	;volatile
  3136  001D18  0012               	return		;funcret
  3137  001D1A                     __end_of_ADXL_Init:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           indf1	equ	0xFE7
  3149                           fsr1h	equ	0xFE2
  3150                           fsr1l	equ	0xFE1
  3151                           indf2	equ	0xFDF
  3152                           fsr2h	equ	0xFDA
  3153                           fsr2l	equ	0xFD9
  3154                           status	equ	0xFD8
  3155                           
  3156 ;; *************** function _Open_UART2 *****************
  3157 ;; Defined at:
  3158 ;;		line 59 in file "uart_45k22.h"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;		None               void
  3165 ;; Registers used:
  3166 ;;		wreg, status,2
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3172 ;;      Params:         0       0       0       0       0       0       0
  3173 ;;      Locals:         0       0       0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0
  3175 ;;      Totals:         0       0       0       0       0       0       0
  3176 ;;Total ram usage:        0 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    7
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_main
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text12
  3187  001CA0                     __ptext12:
  3188                           	opt stack 0
  3189  001CA0                     _Open_UART2:
  3190                           	opt stack 23
  3191                           
  3192                           ;uart_45k22.h: 60: TRISDbits.RD6=0;
  3193                           
  3194                           ;incstack = 0
  3195  001CA0  9C95               	bcf	3989,6,c	;volatile
  3196                           
  3197                           ;uart_45k22.h: 61: TRISDbits.RD7=1;
  3198  001CA2  8E95               	bsf	3989,7,c	;volatile
  3199                           
  3200                           ;uart_45k22.h: 62: SPBRG2=25;
  3201  001CA4  0E19               	movlw	25
  3202  001CA6  6E75               	movwf	3957,c	;volatile
  3203                           
  3204                           ;uart_45k22.h: 63: RCSTA2bits.SPEN=1;
  3205  001CA8  8E71               	bsf	3953,7,c	;volatile
  3206                           
  3207                           ;uart_45k22.h: 64: TXSTA2bits.TXEN=1;
  3208  001CAA  8A72               	bsf	3954,5,c	;volatile
  3209                           
  3210                           ;uart_45k22.h: 66: RCONbits.IPEN = 0;
  3211  001CAC  9ED0               	bcf	4048,7,c	;volatile
  3212                           
  3213                           ;uart_45k22.h: 67: PIE3bits.RC2IE = 1;
  3214  001CAE  8AA3               	bsf	4003,5,c	;volatile
  3215                           
  3216                           ;uart_45k22.h: 68: IPR3bits.RC2IP = 1;
  3217  001CB0  8AA5               	bsf	4005,5,c	;volatile
  3218                           
  3219                           ;uart_45k22.h: 69: INTCONbits.GIE = 1;
  3220  001CB2  8EF2               	bsf	intcon,7,c	;volatile
  3221                           
  3222                           ;uart_45k22.h: 70: INTCONbits.PEIE = 1;
  3223  001CB4  8CF2               	bsf	intcon,6,c	;volatile
  3224                           
  3225                           ;uart_45k22.h: 71: RCONbits.IPEN = 1;
  3226  001CB6  8ED0               	bsf	4048,7,c	;volatile
  3227  001CB8  0012               	return		;funcret
  3228  001CBA                     __end_of_Open_UART2:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           prodh	equ	0xFF4
  3235                           prodl	equ	0xFF3
  3236                           intcon	equ	0xFF2
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           indf1	equ	0xFE7
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _Open_UART1 *****************
  3248 ;; Defined at:
  3249 ;;		line 38 in file "uart_45k22.h"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg, status,2
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3263 ;;      Params:         0       0       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    7
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text13
  3278  001CEE                     __ptext13:
  3279                           	opt stack 0
  3280  001CEE                     _Open_UART1:
  3281                           	opt stack 23
  3282                           
  3283                           ;uart_45k22.h: 39: TRISCbits.RC6=0;
  3284                           
  3285                           ;incstack = 0
  3286  001CEE  9C94               	bcf	3988,6,c	;volatile
  3287                           
  3288                           ;uart_45k22.h: 40: TRISCbits.RC7=1;
  3289  001CF0  8E94               	bsf	3988,7,c	;volatile
  3290                           
  3291                           ;uart_45k22.h: 41: SPBRG1=25;
  3292  001CF2  0E19               	movlw	25
  3293  001CF4  6EAF               	movwf	4015,c	;volatile
  3294                           
  3295                           ;uart_45k22.h: 42: TXSTA1bits.TXEN=1;
  3296  001CF6  8AAC               	bsf	4012,5,c	;volatile
  3297                           
  3298                           ;uart_45k22.h: 43: RCSTA1bits.SPEN=1;
  3299  001CF8  8EAB               	bsf	4011,7,c	;volatile
  3300                           
  3301                           ;uart_45k22.h: 44: RCSTA1bits.CREN=1;
  3302  001CFA  88AB               	bsf	4011,4,c	;volatile
  3303                           
  3304                           ;uart_45k22.h: 45: RCONbits.IPEN = 0;
  3305  001CFC  9ED0               	bcf	4048,7,c	;volatile
  3306                           
  3307                           ;uart_45k22.h: 46: INTCONbits.GIE = 1;
  3308  001CFE  8EF2               	bsf	intcon,7,c	;volatile
  3309                           
  3310                           ;uart_45k22.h: 47: INTCONbits.PEIE = 1;
  3311  001D00  8CF2               	bsf	intcon,6,c	;volatile
  3312                           
  3313                           ;uart_45k22.h: 48: PIE1bits.RC1IE = 1;
  3314  001D02  8A9D               	bsf	3997,5,c	;volatile
  3315  001D04  0012               	return		;funcret
  3316  001D06                     __end_of_Open_UART1:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           intcon	equ	0xFF2
  3325                           postinc0	equ	0xFEE
  3326                           wreg	equ	0xFE8
  3327                           indf1	equ	0xFE7
  3328                           fsr1h	equ	0xFE2
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _Init *****************
  3336 ;; Defined at:
  3337 ;;		line 16 in file "Dual_UART.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3351 ;;      Params:         0       0       0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0
  3354 ;;      Totals:         0       0       0       0       0       0       0
  3355 ;;Total ram usage:        0 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:   11
  3358 ;; This function calls:
  3359 ;;		_Stepper_Init
  3360 ;;		_clr_scr
  3361 ;;		_dis_string
  3362 ;;		_lcd_ini
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text14
  3369  001A54                     __ptext14:
  3370                           	opt stack 0
  3371  001A54                     _Init:
  3372                           	opt stack 19
  3373                           
  3374                           ;Dual_UART.c: 17: OSCCON = 0x76;
  3375                           
  3376                           ;incstack = 0
  3377  001A54  0E76               	movlw	118
  3378  001A56  6ED3               	movwf	4051,c	;volatile
  3379                           
  3380                           ;Dual_UART.c: 18: ANSELA = 0;
  3381  001A58  0E00               	movlw	0
  3382  001A5A  010F               	movlb	15	; () banked
  3383  001A5C  6F38               	movwf	56,b	;volatile
  3384                           
  3385                           ;Dual_UART.c: 19: ANSELB = 0;
  3386  001A5E  0E00               	movlw	0
  3387  001A60  010F               	movlb	15	; () banked
  3388  001A62  6F39               	movwf	57,b	;volatile
  3389                           
  3390                           ;Dual_UART.c: 20: ANSELC = 0;
  3391  001A64  0E00               	movlw	0
  3392  001A66  010F               	movlb	15	; () banked
  3393  001A68  6F3A               	movwf	58,b	;volatile
  3394                           
  3395                           ;Dual_UART.c: 21: ANSELD = 0;
  3396  001A6A  0E00               	movlw	0
  3397  001A6C  010F               	movlb	15	; () banked
  3398  001A6E  6F3B               	movwf	59,b	;volatile
  3399                           
  3400                           ;Dual_UART.c: 22: ANSELE = 1;
  3401  001A70  0E01               	movlw	1
  3402  001A72  010F               	movlb	15	; () banked
  3403  001A74  6F3C               	movwf	60,b	;volatile
  3404                           
  3405                           ; BSR set to: 15
  3406                           ;Dual_UART.c: 23: lcd_ini();
  3407  001A76  ECFF  F00C         	call	_lcd_ini	;wreg free
  3408                           
  3409                           ;Dual_UART.c: 24: clr_scr();
  3410  001A7A  EC6A  F00E         	call	_clr_scr	;wreg free
  3411                           
  3412                           ;Dual_UART.c: 25: dis_string("Initializing    ", 16);
  3413  001A7E  0E23               	movlw	low STR_10
  3414  001A80  0100               	movlb	0	; () banked
  3415  001A82  6FA0               	movwf	dis_string@wrptr& (0+255),b
  3416  001A84  0E06               	movlw	high STR_10
  3417  001A86  0100               	movlb	0	; () banked
  3418  001A88  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  3419  001A8A  0E10               	movlw	16
  3420  001A8C  0100               	movlb	0	; () banked
  3421  001A8E  6FA2               	movwf	dis_string@len& (0+255),b
  3422  001A90  EC5C  F00A         	call	_dis_string	;wreg free
  3423                           
  3424                           ;Dual_UART.c: 26: TRISDbits.TRISD0 = 0;
  3425  001A94  9095               	bcf	3989,0,c	;volatile
  3426                           
  3427                           ;Dual_UART.c: 27: LATDbits.LATD0 = 0;
  3428  001A96  908C               	bcf	3980,0,c	;volatile
  3429                           
  3430                           ;Dual_UART.c: 28: Stepper_Init();
  3431  001A98  EC8D  F00E         	call	_Stepper_Init	;wreg free
  3432                           
  3433                           ;Dual_UART.c: 29: INTCONbits.GIE = 1;
  3434  001A9C  8EF2               	bsf	intcon,7,c	;volatile
  3435                           
  3436                           ;Dual_UART.c: 30: INTCON2bits.INTEDG0 = 0;
  3437  001A9E  9CF1               	bcf	intcon2,6,c	;volatile
  3438                           
  3439                           ;Dual_UART.c: 31: INTCONbits.INT0IE = 1;
  3440  001AA0  88F2               	bsf	intcon,4,c	;volatile
  3441  001AA2  0012               	return		;funcret
  3442  001AA4                     __end_of_Init:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           intcon2	equ	0xFF1
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           indf1	equ	0xFE7
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _lcd_ini *****************
  3463 ;; Defined at:
  3464 ;;		line 112 in file "LCD_4bit.h"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  i               2    0        int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;		None               void
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3478 ;;      Params:         0       0       0       0       0       0       0
  3479 ;;      Locals:         0       0       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0
  3481 ;;      Totals:         0       0       0       0       0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:   10
  3485 ;; This function calls:
  3486 ;;		_lcd_cmd
  3487 ;;		_lcd_delay
  3488 ;; This function is called by:
  3489 ;;		_Init
  3490 ;;		_dis_string_cod
  3491 ;;		_dis_char_cod
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text15
  3496  0019FE                     __ptext15:
  3497                           	opt stack 0
  3498  0019FE                     _lcd_ini:
  3499                           	opt stack 19
  3500                           
  3501                           ;incstack = 0
  3502  0019FE  0E00               	movlw	0
  3503  001A00  6E47               	movwf	_init_count+1,c
  3504  001A02  0E01               	movlw	1
  3505  001A04  6E46               	movwf	_init_count,c
  3506                           
  3507                           ;LCD_4bit.h: 114: int i;
  3508                           ;LCD_4bit.h: 115: lcd_delay(10);
  3509  001A06  0E0A               	movlw	10
  3510  001A08  0100               	movlb	0	; () banked
  3511  001A0A  6F8F               	movwf	lcd_delay@temp& (0+255),b
  3512  001A0C  0E00               	movlw	0
  3513  001A0E  6F90               	movwf	(lcd_delay@temp+1)& (0+255),b
  3514  001A10  0E00               	movlw	0
  3515  001A12  6F91               	movwf	(lcd_delay@temp+2)& (0+255),b
  3516  001A14  0E00               	movlw	0
  3517  001A16  6F92               	movwf	(lcd_delay@temp+3)& (0+255),b
  3518  001A18  EC33  F009         	call	_lcd_delay	;wreg free
  3519                           
  3520                           ;LCD_4bit.h: 116: TRISBbits.RB3=0;;
  3521  001A1C  9693               	bcf	3987,3,c	;volatile
  3522                           
  3523                           ;LCD_4bit.h: 117: TRISBbits.RB2=0;;
  3524  001A1E  9493               	bcf	3987,2,c	;volatile
  3525                           
  3526                           ;LCD_4bit.h: 118: TRISBbits.RB4=0;;TRISBbits.RB5=0;;TRISBbits.RB6=0;;TRISBbits.RB7=0;;
  3527  001A20  9893               	bcf	3987,4,c	;volatile
  3528  001A22  9A93               	bcf	3987,5,c	;volatile
  3529  001A24  9C93               	bcf	3987,6,c	;volatile
  3530  001A26  9E93               	bcf	3987,7,c	;volatile
  3531                           
  3532                           ;LCD_4bit.h: 119: LATBbits.LB3=1;
  3533  001A28  868A               	bsf	3978,3,c	;volatile
  3534                           
  3535                           ;LCD_4bit.h: 120: LATBbits.LB2=1;
  3536  001A2A  848A               	bsf	3978,2,c	;volatile
  3537                           
  3538                           ;LCD_4bit.h: 121: LATBbits.LATB4=1;LATBbits.LATB5=1;LATBbits.LATB6=1;LATBbits.LATB7=1;
  3539  001A2C  888A               	bsf	3978,4,c	;volatile
  3540  001A2E  8A8A               	bsf	3978,5,c	;volatile
  3541  001A30  8C8A               	bsf	3978,6,c	;volatile
  3542  001A32  8E8A               	bsf	3978,7,c	;volatile
  3543                           
  3544                           ;LCD_4bit.h: 123: lcd_cmd(0x02);
  3545  001A34  0E02               	movlw	2
  3546  001A36  ECF4  F00D         	call	_lcd_cmd
  3547                           
  3548                           ;LCD_4bit.h: 124: lcd_cmd(0x28);
  3549  001A3A  0E28               	movlw	40
  3550  001A3C  ECF4  F00D         	call	_lcd_cmd
  3551                           
  3552                           ;LCD_4bit.h: 125: lcd_cmd(0x0C);
  3553  001A40  0E0C               	movlw	12
  3554  001A42  ECF4  F00D         	call	_lcd_cmd
  3555                           
  3556                           ;LCD_4bit.h: 126: lcd_cmd(0x06);
  3557  001A46  0E06               	movlw	6
  3558  001A48  ECF4  F00D         	call	_lcd_cmd
  3559                           
  3560                           ;LCD_4bit.h: 127: lcd_cmd(0x80);
  3561  001A4C  0E80               	movlw	128
  3562  001A4E  ECF4  F00D         	call	_lcd_cmd
  3563  001A52  0012               	return		;funcret
  3564  001A54                     __end_of_lcd_ini:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           intcon2	equ	0xFF1
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           indf1	equ	0xFE7
  3577                           fsr1h	equ	0xFE2
  3578                           fsr1l	equ	0xFE1
  3579                           indf2	equ	0xFDF
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           
  3584 ;; *************** function _Stepper_Init *****************
  3585 ;; Defined at:
  3586 ;;		line 47 in file "Stepper_Drive.h"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;		None               void
  3593 ;; Registers used:
  3594 ;;		None
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3600 ;;      Params:         0       0       0       0       0       0       0
  3601 ;;      Locals:         0       0       0       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0
  3603 ;;      Totals:         0       0       0       0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    7
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_Init
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text16
  3615  001D1A                     __ptext16:
  3616                           	opt stack 0
  3617  001D1A                     _Stepper_Init:
  3618                           	opt stack 22
  3619                           
  3620                           ;Stepper_Drive.h: 48: TRISAbits.TRISA4 = 0;
  3621                           
  3622                           ;incstack = 0
  3623  001D1A  9892               	bcf	3986,4,c	;volatile
  3624                           
  3625                           ;Stepper_Drive.h: 49: TRISAbits.TRISA5 = 0;
  3626  001D1C  9A92               	bcf	3986,5,c	;volatile
  3627                           
  3628                           ;Stepper_Drive.h: 50: TRISAbits.TRISA6 = 0;
  3629  001D1E  9C92               	bcf	3986,6,c	;volatile
  3630                           
  3631                           ;Stepper_Drive.h: 51: TRISAbits.TRISA7 = 0;
  3632  001D20  9E92               	bcf	3986,7,c	;volatile
  3633                           
  3634                           ;Stepper_Drive.h: 52: PORTAbits.RA4 = 0;
  3635  001D22  9880               	bcf	3968,4,c	;volatile
  3636                           
  3637                           ;Stepper_Drive.h: 53: PORTAbits.RA5 = 0;
  3638  001D24  9A80               	bcf	3968,5,c	;volatile
  3639                           
  3640                           ;Stepper_Drive.h: 54: PORTAbits.RA6 = 0;
  3641  001D26  9C80               	bcf	3968,6,c	;volatile
  3642                           
  3643                           ;Stepper_Drive.h: 55: PORTAbits.RA7 = 0;
  3644  001D28  9E80               	bcf	3968,7,c	;volatile
  3645  001D2A  0012               	return		;funcret
  3646  001D2C                     __end_of_Stepper_Init:
  3647                           	opt stack 0
  3648                           tblptru	equ	0xFF8
  3649                           tblptrh	equ	0xFF7
  3650                           tblptrl	equ	0xFF6
  3651                           tablat	equ	0xFF5
  3652                           prodh	equ	0xFF4
  3653                           prodl	equ	0xFF3
  3654                           intcon	equ	0xFF2
  3655                           intcon2	equ	0xFF1
  3656                           postinc0	equ	0xFEE
  3657                           wreg	equ	0xFE8
  3658                           indf1	equ	0xFE7
  3659                           fsr1h	equ	0xFE2
  3660                           fsr1l	equ	0xFE1
  3661                           indf2	equ	0xFDF
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function _GetReset *****************
  3667 ;; Defined at:
  3668 ;;		line 138 in file "Stepper_Drive.h"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;		None               void
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, status,0, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3682 ;;      Params:         0       0       0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0
  3685 ;;      Totals:         0       0       0       0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    8
  3689 ;; This function calls:
  3690 ;;		_delay
  3691 ;; This function is called by:
  3692 ;;		_main
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text17
  3697  001396                     __ptext17:
  3698                           	opt stack 0
  3699  001396                     _GetReset:
  3700                           	opt stack 22
  3701                           
  3702                           ;Stepper_Drive.h: 140: rstflag = 1;
  3703                           
  3704                           ;incstack = 0
  3705  001396  8A45               	bsf	_rstflag/(0+8),_rstflag& (0+7),c	;volatile
  3706                           
  3707                           ;Stepper_Drive.h: 141: state_pos_full = 0;
  3708  001398  0E00               	movlw	0
  3709  00139A  6E3A               	movwf	_state_pos_full,c	;volatile
  3710                           
  3711                           ;Stepper_Drive.h: 142: last_status = 1;
  3712  00139C  0E00               	movlw	0
  3713  00139E  6E33               	movwf	_last_status+1,c
  3714  0013A0  0E01               	movlw	1
  3715  0013A2  6E32               	movwf	_last_status,c
  3716                           
  3717                           ;Stepper_Drive.h: 144: while(rstflag){
  3718  0013A4  D030               	goto	l291
  3719                           
  3720                           ;Stepper_Drive.h: 145: switch(state_pos_full) {
  3721  0013A6  D021               	goto	l3451
  3722  0013A8                     l294:
  3723                           
  3724                           ;Stepper_Drive.h: 147: PORTAbits.RA7=1;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  3725  0013A8  8E80               	bsf	3968,7,c	;volatile
  3726  0013AA  9C80               	bcf	3968,6,c	;volatile
  3727  0013AC  9A80               	bcf	3968,5,c	;volatile
  3728  0013AE  9880               	bcf	3968,4,c	;volatile
  3729                           
  3730                           ;Stepper_Drive.h: 148: delay();
  3731  0013B0  EC2C  F00C         	call	_delay	;wreg free
  3732                           
  3733                           ;Stepper_Drive.h: 149: state_pos_full = 1;
  3734  0013B4  0E01               	movlw	1
  3735  0013B6  D017               	goto	L16
  3736  0013B8                     l296:
  3737                           
  3738                           ;Stepper_Drive.h: 152: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=1;
  3739  0013B8  9E80               	bcf	3968,7,c	;volatile
  3740  0013BA  9C80               	bcf	3968,6,c	;volatile
  3741  0013BC  9A80               	bcf	3968,5,c	;volatile
  3742  0013BE  8880               	bsf	3968,4,c	;volatile
  3743                           
  3744                           ;Stepper_Drive.h: 153: delay();
  3745  0013C0  EC2C  F00C         	call	_delay	;wreg free
  3746                           
  3747                           ;Stepper_Drive.h: 154: state_pos_full = 2;
  3748  0013C4  0E02               	movlw	2
  3749  0013C6  D00F               	goto	L16
  3750  0013C8                     l297:
  3751                           
  3752                           ;Stepper_Drive.h: 157: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=1;PORTAbits.RA4=0;
  3753  0013C8  9E80               	bcf	3968,7,c	;volatile
  3754  0013CA  9C80               	bcf	3968,6,c	;volatile
  3755  0013CC  8A80               	bsf	3968,5,c	;volatile
  3756  0013CE  9880               	bcf	3968,4,c	;volatile
  3757                           
  3758                           ;Stepper_Drive.h: 158: delay();
  3759  0013D0  EC2C  F00C         	call	_delay	;wreg free
  3760                           
  3761                           ;Stepper_Drive.h: 159: state_pos_full = 3;
  3762  0013D4  0E03               	movlw	3
  3763  0013D6  D007               	goto	L16
  3764  0013D8                     l298:
  3765                           
  3766                           ;Stepper_Drive.h: 162: PORTAbits.RA7=0;PORTAbits.RA6=1;PORTAbits.RA5=0;PORTAbits.RA4=0;
  3767  0013D8  9E80               	bcf	3968,7,c	;volatile
  3768  0013DA  8C80               	bsf	3968,6,c	;volatile
  3769  0013DC  9A80               	bcf	3968,5,c	;volatile
  3770  0013DE  9880               	bcf	3968,4,c	;volatile
  3771                           
  3772                           ;Stepper_Drive.h: 163: delay();
  3773  0013E0  EC2C  F00C         	call	_delay	;wreg free
  3774                           
  3775                           ;Stepper_Drive.h: 164: state_pos_full = 0;
  3776  0013E4  0E00               	movlw	0
  3777  0013E6                     L16:
  3778  0013E6  6E3A               	movwf	_state_pos_full,c	;volatile
  3779                           
  3780                           ;Stepper_Drive.h: 166: }
  3781                           
  3782                           ;Stepper_Drive.h: 165: break;
  3783  0013E8  D00E               	goto	l291
  3784  0013EA                     l3451:
  3785  0013EA  503A               	movf	_state_pos_full,w,c	;volatile
  3786                           
  3787                           ; Switch size 1, requested type "space"
  3788                           ; Number of cases is 4, Range of values is 0 to 3
  3789                           ; switch strategies available:
  3790                           ; Name         Instructions Cycles
  3791                           ; simple_byte           13     7 (average)
  3792                           ;	Chosen strategy is simple_byte
  3793  0013EC  0A00               	xorlw	0	; case 0
  3794  0013EE  B4D8               	btfsc	status,2,c
  3795  0013F0  D7DB               	goto	l294
  3796  0013F2  0A01               	xorlw	1	; case 1
  3797  0013F4  B4D8               	btfsc	status,2,c
  3798  0013F6  D7E0               	goto	l296
  3799  0013F8  0A03               	xorlw	3	; case 2
  3800  0013FA  B4D8               	btfsc	status,2,c
  3801  0013FC  D7E5               	goto	l297
  3802  0013FE  0A01               	xorlw	1	; case 3
  3803  001400  B4D8               	btfsc	status,2,c
  3804  001402  D7EA               	goto	l298
  3805  001404  D000               	goto	l291
  3806  001406                     l291:
  3807  001406  BA45               	btfsc	_rstflag/(0+8),_rstflag& (0+7),c	;volatile
  3808  001408  D7F0               	goto	l3451
  3809                           
  3810                           ;Stepper_Drive.h: 167: }
  3811                           ;Stepper_Drive.h: 168: PORTAbits.RA7=0;PORTAbits.RA6=0;PORTAbits.RA5=0;PORTAbits.RA4=0;
  3812  00140A  9E80               	bcf	3968,7,c	;volatile
  3813  00140C  9C80               	bcf	3968,6,c	;volatile
  3814  00140E  9A80               	bcf	3968,5,c	;volatile
  3815  001410  9880               	bcf	3968,4,c	;volatile
  3816                           
  3817                           ;Stepper_Drive.h: 169: INTCONbits.INT0IE = 0;
  3818  001412  98F2               	bcf	intcon,4,c	;volatile
  3819                           
  3820                           ;Stepper_Drive.h: 170: i=0;
  3821  001414  0E00               	movlw	0
  3822  001416  0100               	movlb	0	; () banked
  3823  001418  6F85               	movwf	(_i+1)& (0+255),b
  3824  00141A  0E00               	movlw	0
  3825  00141C  6F84               	movwf	_i& (0+255),b
  3826                           
  3827                           ;Stepper_Drive.h: 171: j=0;
  3828  00141E  0E00               	movlw	0
  3829  001420  0100               	movlb	0	; () banked
  3830  001422  6F87               	movwf	(_j+1)& (0+255),b
  3831  001424  0E00               	movlw	0
  3832  001426  6F86               	movwf	_j& (0+255),b
  3833                           
  3834                           ; BSR set to: 0
  3835  001428  0012               	return		;funcret
  3836  00142A                     __end_of_GetReset:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           intcon2	equ	0xFF1
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           indf1	equ	0xFE7
  3849                           fsr1h	equ	0xFE2
  3850                           fsr1l	equ	0xFE1
  3851                           indf2	equ	0xFDF
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _Compressor_Timer *****************
  3857 ;; Defined at:
  3858 ;;		line 46 in file "TIMER_45k222.h"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;		None               void
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3872 ;;      Params:         0       0       0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0
  3875 ;;      Totals:         0       0       0       0       0       0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:   11
  3879 ;; This function calls:
  3880 ;;		_clr_scr
  3881 ;;		_delay
  3882 ;;		_dis_string
  3883 ;;		_first_line
  3884 ;;		_second_line
  3885 ;;		_tx1_byte
  3886 ;;		_tx1_byte_n
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text18
  3893  00165C                     __ptext18:
  3894                           	opt stack 0
  3895  00165C                     _Compressor_Timer:
  3896                           	opt stack 19
  3897                           
  3898                           ;TIMER_45k222.h: 48: if(second < 10)
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;incstack = 0
  3902  00165C  0100               	movlb	0	; () banked
  3903  00165E  BF89               	btfsc	(_second+1)& (0+255),7,b
  3904  001660  D008               	goto	l3457
  3905  001662  0100               	movlb	0	; () banked
  3906  001664  5189               	movf	(_second+1)& (0+255),w,b
  3907  001666  E107               	bnz	l358
  3908  001668  0E0A               	movlw	10
  3909  00166A  0100               	movlb	0	; () banked
  3910  00166C  5D88               	subwf	_second& (0+255),w,b
  3911  00166E  B0D8               	btfsc	status,0,c
  3912  001670  D002               	goto	l358
  3913  001672                     l3457:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;TIMER_45k222.h: 49: LATDbits.LATD0 = 1;
  3917  001672  808C               	bsf	3980,0,c	;volatile
  3918  001674  0012               	return	
  3919  001676                     l358:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;TIMER_45k222.h: 50: else {
  3923                           ;TIMER_45k222.h: 51: LATDbits.LATD0 = 0;
  3924  001676  908C               	bcf	3980,0,c	;volatile
  3925                           
  3926                           ;TIMER_45k222.h: 52: T0CONbits.TMR0ON = 0;
  3927  001678  9ED5               	bcf	4053,7,c	;volatile
  3928                           
  3929                           ;TIMER_45k222.h: 53: INTCONbits.TMR0IE = 0;
  3930  00167A  9AF2               	bcf	intcon,5,c	;volatile
  3931                           
  3932                           ;TIMER_45k222.h: 54: comp_tmr_en = 0;
  3933  00167C  9245               	bcf	_comp_tmr_en/(0+8),_comp_tmr_en& (0+7),c	;volatile
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;TIMER_45k222.h: 55: second = 0;
  3937  00167E  0E00               	movlw	0
  3938  001680  0100               	movlb	0	; () banked
  3939  001682  6F89               	movwf	(_second+1)& (0+255),b
  3940  001684  0E00               	movlw	0
  3941  001686  6F88               	movwf	_second& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;TIMER_45k222.h: 56: second_line();
  3945  001688  ECAB  F00E         	call	_second_line	;wreg free
  3946                           
  3947                           ;TIMER_45k222.h: 57: tx1_byte('d');
  3948  00168C  0E64               	movlw	100
  3949  00168E  EC96  F00E         	call	_tx1_byte
  3950                           
  3951                           ;TIMER_45k222.h: 58: tx1_byte('d');
  3952  001692  0E64               	movlw	100
  3953  001694  EC96  F00E         	call	_tx1_byte
  3954                           
  3955                           ;TIMER_45k222.h: 59: tx1_byte('d');
  3956  001698  0E64               	movlw	100
  3957  00169A  EC96  F00E         	call	_tx1_byte
  3958                           
  3959                           ;TIMER_45k222.h: 60: tx1_byte_n('d');
  3960  00169E  0E64               	movlw	100
  3961  0016A0  EC5D  F00E         	call	_tx1_byte_n
  3962                           
  3963                           ;TIMER_45k222.h: 61: dis_string("Done!        ", 13);
  3964  0016A4  0E67               	movlw	low STR_4
  3965  0016A6  0100               	movlb	0	; () banked
  3966  0016A8  6FA0               	movwf	dis_string@wrptr& (0+255),b
  3967  0016AA  0E06               	movlw	high STR_4
  3968  0016AC  0100               	movlb	0	; () banked
  3969  0016AE  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  3970  0016B0  0E0D               	movlw	13
  3971  0016B2  0100               	movlb	0	; () banked
  3972  0016B4  6FA2               	movwf	dis_string@len& (0+255),b
  3973  0016B6  EC5C  F00A         	call	_dis_string	;wreg free
  3974                           
  3975                           ;TIMER_45k222.h: 62: delay();
  3976  0016BA  EC2C  F00C         	call	_delay	;wreg free
  3977                           
  3978                           ;TIMER_45k222.h: 63: clr_scr();
  3979  0016BE  EC6A  F00E         	call	_clr_scr	;wreg free
  3980                           
  3981                           ;TIMER_45k222.h: 64: first_line();
  3982  0016C2  ECA7  F00E         	call	_first_line	;wreg free
  3983                           
  3984                           ;TIMER_45k222.h: 65: dis_string("Waiting for CMD ",16);
  3985  0016C6  0E34               	movlw	low STR_2
  3986  0016C8  0100               	movlb	0	; () banked
  3987  0016CA  6FA0               	movwf	dis_string@wrptr& (0+255),b
  3988  0016CC  0E06               	movlw	high STR_2
  3989  0016CE  0100               	movlb	0	; () banked
  3990  0016D0  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  3991  0016D2  0E10               	movlw	16
  3992  0016D4  0100               	movlb	0	; () banked
  3993  0016D6  6FA2               	movwf	dis_string@len& (0+255),b
  3994  0016D8  EC5C  F00A         	call	_dis_string	;wreg free
  3995  0016DC  0012               	return	
  3996  0016DE  0012               	return		;funcret
  3997  0016E0                     __end_of_Compressor_Timer:
  3998                           	opt stack 0
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           intcon	equ	0xFF2
  4006                           intcon2	equ	0xFF1
  4007                           postinc0	equ	0xFEE
  4008                           wreg	equ	0xFE8
  4009                           indf1	equ	0xFE7
  4010                           fsr1h	equ	0xFE2
  4011                           fsr1l	equ	0xFE1
  4012                           indf2	equ	0xFDF
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _tx1_byte_n *****************
  4018 ;; Defined at:
  4019 ;;		line 89 in file "uart_45k22.h"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  data1n          1    wreg     unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  data1n          1    1[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;		None               void
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4033 ;;      Params:         0       0       0       0       0       0       0
  4034 ;;      Locals:         0       1       0       0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0
  4036 ;;      Totals:         0       1       0       0       0       0       0
  4037 ;;Total ram usage:        1 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    8
  4040 ;; This function calls:
  4041 ;;		_tx1_byte
  4042 ;; This function is called by:
  4043 ;;		_ProcessStepperData
  4044 ;;		_Compressor_Timer
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text19
  4049  001CBA                     __ptext19:
  4050                           	opt stack 0
  4051  001CBA                     _tx1_byte_n:
  4052                           	opt stack 20
  4053                           
  4054                           ;incstack = 0
  4055                           ;tx1_byte_n@data1n stored from wreg
  4056  001CBA  0100               	movlb	0	; () banked
  4057  001CBC  6F90               	movwf	tx1_byte_n@data1n& (0+255),b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;uart_45k22.h: 90: tx1_byte(data1n);
  4061  001CBE  0100               	movlb	0	; () banked
  4062  001CC0  5190               	movf	tx1_byte_n@data1n& (0+255),w,b
  4063  001CC2  EC96  F00E         	call	_tx1_byte
  4064                           
  4065                           ;uart_45k22.h: 91: tx1_byte('\r');
  4066  001CC6  0E0D               	movlw	13
  4067  001CC8  EC96  F00E         	call	_tx1_byte
  4068                           
  4069                           ;uart_45k22.h: 92: tx1_byte('\n');
  4070  001CCC  0E0A               	movlw	10
  4071  001CCE  EC96  F00E         	call	_tx1_byte
  4072  001CD2  0012               	return		;funcret
  4073  001CD4                     __end_of_tx1_byte_n:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           intcon	equ	0xFF2
  4082                           intcon2	equ	0xFF1
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           indf1	equ	0xFE7
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function _tx1_byte *****************
  4094 ;; Defined at:
  4095 ;;		line 83 in file "uart_45k22.h"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  data1           1    wreg     unsigned char 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  data1           1    0[BANK0 ] unsigned char 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;		None               void
  4102 ;; Registers used:
  4103 ;;		wreg
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4109 ;;      Params:         0       0       0       0       0       0       0
  4110 ;;      Locals:         0       1       0       0       0       0       0
  4111 ;;      Temps:          0       0       0       0       0       0       0
  4112 ;;      Totals:         0       1       0       0       0       0       0
  4113 ;;Total ram usage:        1 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    7
  4116 ;; This function calls:
  4117 ;;		Nothing
  4118 ;; This function is called by:
  4119 ;;		_tx1_byte_n
  4120 ;;		_ProcessStepperData
  4121 ;;		_Compressor_Timer
  4122 ;;		_tx1_string
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text20
  4127  001D2C                     __ptext20:
  4128                           	opt stack 0
  4129  001D2C                     _tx1_byte:
  4130                           	opt stack 20
  4131                           
  4132                           ;incstack = 0
  4133                           ;tx1_byte@data1 stored from wreg
  4134  001D2C  0100               	movlb	0	; () banked
  4135  001D2E  6F8F               	movwf	tx1_byte@data1& (0+255),b
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;uart_45k22.h: 85: TXREG1=data1;
  4139  001D30  C08F  FFAD         	movff	tx1_byte@data1,4013	;volatile
  4140                           
  4141                           ;uart_45k22.h: 86: while(PIR1bits.TX1IF==0);
  4142  001D34  D000               	goto	l122
  4143  001D36                     l122:
  4144  001D36  A89E               	btfss	3998,4,c	;volatile
  4145  001D38  D7FE               	goto	l122
  4146  001D3A  0012               	return		;funcret
  4147  001D3C                     __end_of_tx1_byte:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           intcon2	equ	0xFF1
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           indf1	equ	0xFE7
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _first_line *****************
  4168 ;; Defined at:
  4169 ;;		line 50 in file "LCD_4bit.h"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;		None               void
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, status,0, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4183 ;;      Params:         0       0       0       0       0       0       0
  4184 ;;      Locals:         0       0       0       0       0       0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0
  4186 ;;      Totals:         0       0       0       0       0       0       0
  4187 ;;Total ram usage:        0 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:   10
  4190 ;; This function calls:
  4191 ;;		_lcd_cmd
  4192 ;; This function is called by:
  4193 ;;		_ProcessStepperData
  4194 ;;		_Timer0_Init
  4195 ;;		_Compressor_Timer
  4196 ;;		_main
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text21
  4201  001D4E                     __ptext21:
  4202                           	opt stack 0
  4203  001D4E                     _first_line:
  4204                           	opt stack 20
  4205                           
  4206                           ;LCD_4bit.h: 51: lcd_cmd(0x80);
  4207                           
  4208                           ;incstack = 0
  4209  001D4E  0E80               	movlw	128
  4210  001D50  ECF4  F00D         	call	_lcd_cmd
  4211  001D54  0012               	return		;funcret
  4212  001D56                     __end_of_first_line:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           intcon	equ	0xFF2
  4221                           intcon2	equ	0xFF1
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           indf1	equ	0xFE7
  4225                           fsr1h	equ	0xFE2
  4226                           fsr1l	equ	0xFE1
  4227                           indf2	equ	0xFDF
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _delay *****************
  4233 ;; Defined at:
  4234 ;;		line 88 in file "Stepper_Drive.h"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  y               2    2[BANK0 ] int 
  4239 ;;  x               2    0[BANK0 ] int 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;		None               void
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4249 ;;      Params:         0       0       0       0       0       0       0
  4250 ;;      Locals:         0       4       0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0
  4252 ;;      Totals:         0       4       0       0       0       0       0
  4253 ;;Total ram usage:        4 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    7
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_GetReset
  4260 ;;		_FullStepsPos
  4261 ;;		_FullStepsNeg
  4262 ;;		_Compressor_Timer
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text22
  4267  001858                     __ptext22:
  4268                           	opt stack 0
  4269  001858                     _delay:
  4270                           	opt stack 19
  4271                           
  4272                           ;Stepper_Drive.h: 89: int x=0;
  4273                           
  4274                           ;incstack = 0
  4275  001858  0E00               	movlw	0
  4276  00185A  0100               	movlb	0	; () banked
  4277  00185C  6F90               	movwf	(delay@x+1)& (0+255),b
  4278  00185E  0E00               	movlw	0
  4279  001860  6F8F               	movwf	delay@x& (0+255),b
  4280                           
  4281                           ;Stepper_Drive.h: 90: int y=0;
  4282  001862  0E00               	movlw	0
  4283  001864  0100               	movlb	0	; () banked
  4284  001866  6F92               	movwf	(delay@y+1)& (0+255),b
  4285  001868  0E00               	movlw	0
  4286  00186A  6F91               	movwf	delay@y& (0+255),b
  4287                           
  4288                           ;Stepper_Drive.h: 91: for(x=0;x<255;x++)
  4289  00186C  0E00               	movlw	0
  4290  00186E  0100               	movlb	0	; () banked
  4291  001870  6F90               	movwf	(delay@x+1)& (0+255),b
  4292  001872  0E00               	movlw	0
  4293  001874  6F8F               	movwf	delay@x& (0+255),b
  4294  001876                     l2991:
  4295                           
  4296                           ; BSR set to: 0
  4297  001876  0100               	movlb	0	; () banked
  4298  001878  BF90               	btfsc	(delay@x+1)& (0+255),7,b
  4299  00187A  D009               	goto	l2995
  4300  00187C  0100               	movlb	0	; () banked
  4301  00187E  5190               	movf	(delay@x+1)& (0+255),w,b
  4302  001880  E123               	bnz	l276
  4303  001882  0100               	movlb	0	; () banked
  4304  001884  298F               	incf	delay@x& (0+255),w,b
  4305  001886  B0D8               	btfsc	status,0,c
  4306  001888  0012               	return	
  4307  00188A  D001               	goto	l2995
  4308                           
  4309                           ; BSR set to: 0
  4310  00188C  0012               	return	
  4311  00188E                     l2995:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;Stepper_Drive.h: 92: for(y=0;y<7;y++)
  4315  00188E  0E00               	movlw	0
  4316  001890  0100               	movlb	0	; () banked
  4317  001892  6F92               	movwf	(delay@y+1)& (0+255),b
  4318  001894  0E00               	movlw	0
  4319  001896  6F91               	movwf	delay@y& (0+255),b
  4320  001898                     l2997:
  4321                           
  4322                           ; BSR set to: 0
  4323  001898  0100               	movlb	0	; () banked
  4324  00189A  BF92               	btfsc	(delay@y+1)& (0+255),7,b
  4325  00189C  D00A               	goto	l274
  4326  00189E  0100               	movlb	0	; () banked
  4327  0018A0  5192               	movf	(delay@y+1)& (0+255),w,b
  4328  0018A2  E10D               	bnz	l3005
  4329  0018A4  0E07               	movlw	7
  4330  0018A6  0100               	movlb	0	; () banked
  4331  0018A8  5D91               	subwf	delay@y& (0+255),w,b
  4332  0018AA  B0D8               	btfsc	status,0,c
  4333  0018AC  D008               	goto	l3005
  4334  0018AE  D001               	goto	l274
  4335                           
  4336                           ; BSR set to: 0
  4337  0018B0  D006               	goto	l3005
  4338  0018B2                     l274:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;Stepper_Drive.h: 93: __nop();
  4342  0018B2  F000               	nop	
  4343  0018B4  0100               	movlb	0	; () banked
  4344  0018B6  4B91               	infsnz	delay@y& (0+255),f,b
  4345  0018B8  2B92               	incf	(delay@y+1)& (0+255),f,b
  4346  0018BA  D7EE               	goto	l2997
  4347                           
  4348                           ; BSR set to: 0
  4349  0018BC  D000               	goto	l3005
  4350  0018BE                     l3005:
  4351                           
  4352                           ; BSR set to: 0
  4353  0018BE  0100               	movlb	0	; () banked
  4354  0018C0  4B8F               	infsnz	delay@x& (0+255),f,b
  4355  0018C2  2B90               	incf	(delay@x+1)& (0+255),f,b
  4356  0018C4  D7D8               	goto	l2991
  4357                           
  4358                           ; BSR set to: 0
  4359  0018C6  0012               	return	
  4360  0018C8                     l276:
  4361                           
  4362                           ; BSR set to: 0
  4363  0018C8  0012               	return		;funcret
  4364  0018CA                     __end_of_delay:
  4365                           	opt stack 0
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           prodh	equ	0xFF4
  4371                           prodl	equ	0xFF3
  4372                           intcon	equ	0xFF2
  4373                           intcon2	equ	0xFF1
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           indf1	equ	0xFE7
  4377                           fsr1h	equ	0xFE2
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _clr_scr *****************
  4385 ;; Defined at:
  4386 ;;		line 57 in file "LCD_4bit.h"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, status,2, status,0, cstack
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4400 ;;      Params:         0       0       0       0       0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0
  4403 ;;      Totals:         0       0       0       0       0       0       0
  4404 ;;Total ram usage:        0 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:   10
  4407 ;; This function calls:
  4408 ;;		_lcd_cmd
  4409 ;; This function is called by:
  4410 ;;		_ProcessStepperData
  4411 ;;		_Compressor_Timer
  4412 ;;		_Init
  4413 ;;		_main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text23
  4418  001CD4                     __ptext23:
  4419                           	opt stack 0
  4420  001CD4                     _clr_scr:
  4421                           	opt stack 20
  4422                           
  4423                           ;LCD_4bit.h: 58: lcd_cmd ( 0x0C );
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;incstack = 0
  4427  001CD4  0E0C               	movlw	12
  4428  001CD6  ECF4  F00D         	call	_lcd_cmd
  4429                           
  4430                           ;LCD_4bit.h: 59: lcd_cmd ( 0x06 );
  4431  001CDA  0E06               	movlw	6
  4432  001CDC  ECF4  F00D         	call	_lcd_cmd
  4433                           
  4434                           ;LCD_4bit.h: 60: lcd_cmd ( 0x80 );
  4435  001CE0  0E80               	movlw	128
  4436  001CE2  ECF4  F00D         	call	_lcd_cmd
  4437                           
  4438                           ;LCD_4bit.h: 61: lcd_cmd ( 0x01 );
  4439  001CE6  0E01               	movlw	1
  4440  001CE8  ECF4  F00D         	call	_lcd_cmd
  4441  001CEC  0012               	return		;funcret
  4442  001CEE                     __end_of_clr_scr:
  4443                           	opt stack 0
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           intcon2	equ	0xFF1
  4452                           postinc0	equ	0xFEE
  4453                           wreg	equ	0xFE8
  4454                           indf1	equ	0xFE7
  4455                           fsr1h	equ	0xFE2
  4456                           fsr1l	equ	0xFE1
  4457                           indf2	equ	0xFDF
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _ADXL_Read *****************
  4463 ;; Defined at:
  4464 ;;		line 30 in file "ADXL335_ADC_45K22.h"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;		None               void
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4478 ;;      Params:         0       0       0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0
  4480 ;;      Temps:          0       2       0       0       0       0       0
  4481 ;;      Totals:         0       2       0       0       0       0       0
  4482 ;;Total ram usage:        2 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    7
  4485 ;; This function calls:
  4486 ;;		Nothing
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text24
  4493  001B76                     __ptext24:
  4494                           	opt stack 0
  4495  001B76                     _ADXL_Read:
  4496                           	opt stack 23
  4497                           
  4498                           ;ADXL335_ADC_45K22.h: 31: ADCON0bits.GO_DONE = 1;
  4499                           
  4500                           ;incstack = 0
  4501  001B76  82C2               	bsf	4034,1,c	;volatile
  4502                           
  4503                           ;ADXL335_ADC_45K22.h: 32: while(ADCON0bits.GO_DONE);
  4504  001B78  D000               	goto	l390
  4505  001B7A                     l390:
  4506  001B7A  B2C2               	btfsc	4034,1,c	;volatile
  4507  001B7C  D7FE               	goto	l390
  4508                           
  4509                           ;ADXL335_ADC_45K22.h: 33: ADC_low = ADRESL;
  4510  001B7E  CFC3 F02E          	movff	4035,_ADC_low	;volatile
  4511  001B82  6A2F               	clrf	_ADC_low+1,c
  4512                           
  4513                           ;ADXL335_ADC_45K22.h: 34: ADC_high = ADRESH & 0b00000011;
  4514  001B84  CFC4 F08F          	movff	4036,??_ADXL_Read	;volatile
  4515  001B88  0E03               	movlw	3
  4516  001B8A  0100               	movlb	0	; () banked
  4517  001B8C  178F               	andwf	??_ADXL_Read& (0+255),f,b
  4518  001B8E  0100               	movlb	0	; () banked
  4519  001B90  518F               	movf	??_ADXL_Read& (0+255),w,b
  4520  001B92  6E2C               	movwf	_ADC_high,c
  4521  001B94  6A2D               	clrf	_ADC_high+1,c
  4522                           
  4523                           ;ADXL335_ADC_45K22.h: 35: ADC_result = (ADC_high << 8) + ADC_low;
  4524  001B96  502C               	movf	_ADC_high,w,c
  4525  001B98  0100               	movlb	0	; () banked
  4526  001B9A  6F90               	movwf	(??_ADXL_Read+1)& (0+255),b
  4527  001B9C  6B8F               	clrf	??_ADXL_Read& (0+255),b
  4528  001B9E  502E               	movf	_ADC_low,w,c
  4529  001BA0  0100               	movlb	0	; () banked
  4530  001BA2  258F               	addwf	??_ADXL_Read& (0+255),w,b
  4531  001BA4  6E30               	movwf	_ADC_result,c
  4532  001BA6  502F               	movf	_ADC_low+1,w,c
  4533  001BA8  0100               	movlb	0	; () banked
  4534  001BAA  2190               	addwfc	(??_ADXL_Read+1)& (0+255),w,b
  4535  001BAC  6E31               	movwf	_ADC_result+1,c
  4536                           
  4537                           ; BSR set to: 0
  4538  001BAE  0012               	return		;funcret
  4539  001BB0                     __end_of_ADXL_Read:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           intcon2	equ	0xFF1
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           indf1	equ	0xFE7
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           fsr2h	equ	0xFDA
  4556                           fsr2l	equ	0xFD9
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _ADXL_Display *****************
  4560 ;; Defined at:
  4561 ;;		line 38 in file "ADXL335_ADC_45K22.h"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;		None               void
  4568 ;; Registers used:
  4569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4575 ;;      Params:         0       0       0       0       0       0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0
  4577 ;;      Temps:          0       0       0       0       0       0       0
  4578 ;;      Totals:         0       0       0       0       0       0       0
  4579 ;;Total ram usage:        0 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:   11
  4582 ;; This function calls:
  4583 ;;		___lwdiv
  4584 ;;		___lwmod
  4585 ;;		_dis_string
  4586 ;;		_lcd_delay
  4587 ;;		_second_line
  4588 ;; This function is called by:
  4589 ;;		_main
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text25
  4594  000ED2                     __ptext25:
  4595                           	opt stack 0
  4596  000ED2                     _ADXL_Display:
  4597                           	opt stack 19
  4598                           
  4599                           ;ADXL335_ADC_45K22.h: 39: second_line();
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;incstack = 0
  4603  000ED2  ECAB  F00E         	call	_second_line	;wreg free
  4604                           
  4605                           ;ADXL335_ADC_45K22.h: 40: lcd_delay(100);
  4606  000ED6  0E64               	movlw	100
  4607  000ED8  0100               	movlb	0	; () banked
  4608  000EDA  6F8F               	movwf	lcd_delay@temp& (0+255),b
  4609  000EDC  0E00               	movlw	0
  4610  000EDE  6F90               	movwf	(lcd_delay@temp+1)& (0+255),b
  4611  000EE0  0E00               	movlw	0
  4612  000EE2  6F91               	movwf	(lcd_delay@temp+2)& (0+255),b
  4613  000EE4  0E00               	movlw	0
  4614  000EE6  6F92               	movwf	(lcd_delay@temp+3)& (0+255),b
  4615  000EE8  EC33  F009         	call	_lcd_delay	;wreg free
  4616                           
  4617                           ;ADXL335_ADC_45K22.h: 41: digits[0] = (ADC_result / 1000) + 48;
  4618  000EEC  C030  F08F         	movff	_ADC_result,___lwdiv@dividend
  4619  000EF0  C031  F090         	movff	_ADC_result+1,___lwdiv@dividend+1
  4620  000EF4  0E03               	movlw	3
  4621  000EF6  0100               	movlb	0	; () banked
  4622  000EF8  6F92               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4623  000EFA  0EE8               	movlw	232
  4624  000EFC  6F91               	movwf	___lwdiv@divisor& (0+255),b
  4625  000EFE  EC70  F00B         	call	___lwdiv	;wreg free
  4626  000F02  0100               	movlb	0	; () banked
  4627  000F04  518F               	movf	?___lwdiv& (0+255),w,b
  4628  000F06  0F30               	addlw	48
  4629  000F08  6E41               	movwf	_digits,c
  4630                           
  4631                           ;ADXL335_ADC_45K22.h: 42: digits[1] = ((ADC_result / 100) % 10) + 48;
  4632  000F0A  0E00               	movlw	0
  4633  000F0C  0100               	movlb	0	; () banked
  4634  000F0E  6F92               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4635  000F10  0E64               	movlw	100
  4636  000F12  6F91               	movwf	___lwdiv@divisor& (0+255),b
  4637  000F14  C030  F08F         	movff	_ADC_result,___lwdiv@dividend
  4638  000F18  C031  F090         	movff	_ADC_result+1,___lwdiv@dividend+1
  4639  000F1C  EC70  F00B         	call	___lwdiv	;wreg free
  4640  000F20  C08F  F096         	movff	?___lwdiv,___lwmod@dividend
  4641  000F24  C090  F097         	movff	?___lwdiv+1,___lwmod@dividend+1
  4642  000F28  0E00               	movlw	0
  4643  000F2A  0100               	movlb	0	; () banked
  4644  000F2C  6F99               	movwf	(___lwmod@divisor+1)& (0+255),b
  4645  000F2E  0E0A               	movlw	10
  4646  000F30  6F98               	movwf	___lwmod@divisor& (0+255),b
  4647  000F32  EC65  F00C         	call	___lwmod	;wreg free
  4648  000F36  0100               	movlb	0	; () banked
  4649  000F38  5196               	movf	?___lwmod& (0+255),w,b
  4650  000F3A  0F30               	addlw	48
  4651  000F3C  6E42               	movwf	_digits+1,c
  4652                           
  4653                           ;ADXL335_ADC_45K22.h: 43: digits[2] = ((ADC_result / 10) % 10) + 48;
  4654  000F3E  0E00               	movlw	0
  4655  000F40  0100               	movlb	0	; () banked
  4656  000F42  6F92               	movwf	(___lwdiv@divisor+1)& (0+255),b
  4657  000F44  0E0A               	movlw	10
  4658  000F46  6F91               	movwf	___lwdiv@divisor& (0+255),b
  4659  000F48  C030  F08F         	movff	_ADC_result,___lwdiv@dividend
  4660  000F4C  C031  F090         	movff	_ADC_result+1,___lwdiv@dividend+1
  4661  000F50  EC70  F00B         	call	___lwdiv	;wreg free
  4662  000F54  C08F  F096         	movff	?___lwdiv,___lwmod@dividend
  4663  000F58  C090  F097         	movff	?___lwdiv+1,___lwmod@dividend+1
  4664  000F5C  0E00               	movlw	0
  4665  000F5E  0100               	movlb	0	; () banked
  4666  000F60  6F99               	movwf	(___lwmod@divisor+1)& (0+255),b
  4667  000F62  0E0A               	movlw	10
  4668  000F64  6F98               	movwf	___lwmod@divisor& (0+255),b
  4669  000F66  EC65  F00C         	call	___lwmod	;wreg free
  4670  000F6A  0100               	movlb	0	; () banked
  4671  000F6C  5196               	movf	?___lwmod& (0+255),w,b
  4672  000F6E  0F30               	addlw	48
  4673  000F70  6E43               	movwf	_digits+2,c
  4674                           
  4675                           ;ADXL335_ADC_45K22.h: 44: digits[3] = (ADC_result % 10) + 48;
  4676  000F72  C030  F096         	movff	_ADC_result,___lwmod@dividend
  4677  000F76  C031  F097         	movff	_ADC_result+1,___lwmod@dividend+1
  4678  000F7A  0E00               	movlw	0
  4679  000F7C  0100               	movlb	0	; () banked
  4680  000F7E  6F99               	movwf	(___lwmod@divisor+1)& (0+255),b
  4681  000F80  0E0A               	movlw	10
  4682  000F82  6F98               	movwf	___lwmod@divisor& (0+255),b
  4683  000F84  EC65  F00C         	call	___lwmod	;wreg free
  4684  000F88  0100               	movlb	0	; () banked
  4685  000F8A  5196               	movf	?___lwmod& (0+255),w,b
  4686  000F8C  0F30               	addlw	48
  4687  000F8E  6E44               	movwf	_digits+3,c
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;ADXL335_ADC_45K22.h: 45: dis_string(digits, 4);
  4691  000F90  0E41               	movlw	low _digits
  4692  000F92  0100               	movlb	0	; () banked
  4693  000F94  6FA0               	movwf	dis_string@wrptr& (0+255),b
  4694  000F96  0E00               	movlw	high _digits
  4695  000F98  0100               	movlb	0	; () banked
  4696  000F9A  6FA1               	movwf	(dis_string@wrptr+1)& (0+255),b
  4697  000F9C  0E04               	movlw	4
  4698  000F9E  0100               	movlb	0	; () banked
  4699  000FA0  6FA2               	movwf	dis_string@len& (0+255),b
  4700  000FA2  EC5C  F00A         	call	_dis_string	;wreg free
  4701  000FA6  0012               	return		;funcret
  4702  000FA8                     __end_of_ADXL_Display:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           intcon2	equ	0xFF1
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           indf1	equ	0xFE7
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _second_line *****************
  4723 ;; Defined at:
  4724 ;;		line 53 in file "LCD_4bit.h"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;		None               void
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4738 ;;      Params:         0       0       0       0       0       0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0
  4741 ;;      Totals:         0       0       0       0       0       0       0
  4742 ;;Total ram usage:        0 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:   10
  4745 ;; This function calls:
  4746 ;;		_lcd_cmd
  4747 ;; This function is called by:
  4748 ;;		_ProcessStepperData
  4749 ;;		_Compressor_Timer
  4750 ;;		_ADXL_Display
  4751 ;;		_RxI1
  4752 ;;		_display_uptime
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text26
  4757  001D56                     __ptext26:
  4758                           	opt stack 0
  4759  001D56                     _second_line:
  4760                           	opt stack 19
  4761                           
  4762                           ;LCD_4bit.h: 54: lcd_cmd(0xc0);
  4763                           
  4764                           ;incstack = 0
  4765  001D56  0EC0               	movlw	192
  4766  001D58  ECF4  F00D         	call	_lcd_cmd
  4767  001D5C  0012               	return		;funcret
  4768  001D5E                     __end_of_second_line:
  4769                           	opt stack 0
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           intcon	equ	0xFF2
  4777                           intcon2	equ	0xFF1
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           indf1	equ	0xFE7
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _lcd_cmd *****************
  4789 ;; Defined at:
  4790 ;;		line 148 in file "LCD_4bit.h"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  cmd_value       1    wreg     unsigned char 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  cmd_value       1   15[BANK0 ] unsigned char 
  4795 ;;  cmd_value1      1   16[BANK0 ] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;		None               void
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4805 ;;      Params:         0       0       0       0       0       0       0
  4806 ;;      Locals:         0       2       0       0       0       0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0
  4808 ;;      Totals:         0       2       0       0       0       0       0
  4809 ;;Total ram usage:        2 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    9
  4812 ;; This function calls:
  4813 ;;		_lcdcmd_nibble
  4814 ;; This function is called by:
  4815 ;;		_first_line
  4816 ;;		_second_line
  4817 ;;		_clr_scr
  4818 ;;		_lcd_ini
  4819 ;;		_back_space
  4820 ;;		_dis_string_cod
  4821 ;;		_dis_char_cod
  4822 ;;		_lcd_waiting_display
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text27
  4827  001BE8                     __ptext27:
  4828                           	opt stack 0
  4829  001BE8                     _lcd_cmd:
  4830                           	opt stack 20
  4831                           
  4832                           ;incstack = 0
  4833                           ;lcd_cmd@cmd_value stored from wreg
  4834  001BE8  0100               	movlb	0	; () banked
  4835  001BEA  6F9E               	movwf	lcd_cmd@cmd_value& (0+255),b
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;LCD_4bit.h: 150: unsigned char cmd_value1;
  4839                           ;LCD_4bit.h: 151: cmd_value1 = (cmd_value & 0xF0);
  4840  001BEC  0100               	movlb	0	; () banked
  4841  001BEE  519E               	movf	lcd_cmd@cmd_value& (0+255),w,b
  4842  001BF0  0BF0               	andlw	240
  4843  001BF2  0100               	movlb	0	; () banked
  4844  001BF4  6F9F               	movwf	lcd_cmd@cmd_value1& (0+255),b
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;LCD_4bit.h: 152: lcdcmd_nibble(cmd_value1);
  4848  001BF6  0100               	movlb	0	; () banked
  4849  001BF8  519F               	movf	lcd_cmd@cmd_value1& (0+255),w,b
  4850  001BFA  ECD4  F007         	call	_lcdcmd_nibble
  4851                           
  4852                           ;LCD_4bit.h: 153: cmd_value1 = ((cmd_value<<4) & 0xF0);
  4853  001BFE  0100               	movlb	0	; () banked
  4854  001C00  399E               	swapf	lcd_cmd@cmd_value& (0+255),w,b
  4855  001C02  0BF0               	andlw	240
  4856  001C04  0BF0               	andlw	240
  4857  001C06  0100               	movlb	0	; () banked
  4858  001C08  6F9F               	movwf	lcd_cmd@cmd_value1& (0+255),b
  4859                           
  4860                           ;LCD_4bit.h: 154: lcdcmd_nibble(cmd_value1);
  4861  001C0A  0100               	movlb	0	; () banked
  4862  001C0C  519F               	movf	lcd_cmd@cmd_value1& (0+255),w,b
  4863  001C0E  ECD4  F007         	call	_lcdcmd_nibble
  4864  001C12  0012               	return		;funcret
  4865  001C14                     __end_of_lcd_cmd:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           intcon2	equ	0xFF1
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           indf1	equ	0xFE7
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           fsr2h	equ	0xFDA
  4882                           fsr2l	equ	0xFD9
  4883                           status	equ	0xFD8
  4884                           
  4885 ;; *************** function _lcdcmd_nibble *****************
  4886 ;; Defined at:
  4887 ;;		line 172 in file "LCD_4bit.h"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  cmdout          1    wreg     unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  cmdout          1   14[BANK0 ] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;		None               void
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4901 ;;      Params:         0       0       0       0       0       0       0
  4902 ;;      Locals:         0       1       0       0       0       0       0
  4903 ;;      Temps:          0       1       0       0       0       0       0
  4904 ;;      Totals:         0       2       0       0       0       0       0
  4905 ;;Total ram usage:        2 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    8
  4908 ;; This function calls:
  4909 ;;		_lcd_delay
  4910 ;; This function is called by:
  4911 ;;		_lcd_cmd
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text28
  4916  000FA8                     __ptext28:
  4917                           	opt stack 0
  4918  000FA8                     _lcdcmd_nibble:
  4919                           	opt stack 20
  4920                           
  4921                           ;incstack = 0
  4922                           ;lcdcmd_nibble@cmdout stored from wreg
  4923  000FA8  0100               	movlb	0	; () banked
  4924  000FAA  6F9D               	movwf	lcdcmd_nibble@cmdout& (0+255),b
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;LCD_4bit.h: 175: LATBbits.LATB4=((cmdout&0x10)? 1:0);
  4928  000FAC  0100               	movlb	0	; () banked
  4929  000FAE  A99D               	btfss	lcdcmd_nibble@cmdout& (0+255),4,b
  4930  000FB0  D004               	goto	u2610
  4931  000FB2  0100               	movlb	0	; () banked
  4932  000FB4  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4933  000FB6  2B9C               	incf	??_lcdcmd_nibble& (0+255),f,b
  4934  000FB8  D002               	goto	u2628
  4935  000FBA                     u2610:
  4936  000FBA  0100               	movlb	0	; () banked
  4937  000FBC  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4938  000FBE                     u2628:
  4939  000FBE  0100               	movlb	0	; () banked
  4940  000FC0  3B9C               	swapf	??_lcdcmd_nibble& (0+255),f,b
  4941  000FC2  508A               	movf	3978,w,c	;volatile
  4942  000FC4  0100               	movlb	0	; () banked
  4943  000FC6  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4944  000FC8  0BEF               	andlw	-17
  4945  000FCA  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4946  000FCC  6E8A               	movwf	3978,c	;volatile
  4947                           
  4948                           ;LCD_4bit.h: 176: LATBbits.LATB5=((cmdout&0x20)? 1:0);
  4949  000FCE  0100               	movlb	0	; () banked
  4950  000FD0  AB9D               	btfss	lcdcmd_nibble@cmdout& (0+255),5,b
  4951  000FD2  D004               	goto	u2630
  4952  000FD4  0100               	movlb	0	; () banked
  4953  000FD6  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4954  000FD8  2B9C               	incf	??_lcdcmd_nibble& (0+255),f,b
  4955  000FDA  D002               	goto	u2648
  4956  000FDC                     u2630:
  4957  000FDC  0100               	movlb	0	; () banked
  4958  000FDE  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4959  000FE0                     u2648:
  4960  000FE0  0100               	movlb	0	; () banked
  4961  000FE2  3B9C               	swapf	??_lcdcmd_nibble& (0+255),f,b
  4962  000FE4  479C               	rlncf	??_lcdcmd_nibble& (0+255),f,b
  4963  000FE6  508A               	movf	3978,w,c	;volatile
  4964  000FE8  0100               	movlb	0	; () banked
  4965  000FEA  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4966  000FEC  0BDF               	andlw	-33
  4967  000FEE  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4968  000FF0  6E8A               	movwf	3978,c	;volatile
  4969                           
  4970                           ;LCD_4bit.h: 177: LATBbits.LATB6=((cmdout&0x40)? 1:0);
  4971  000FF2  0100               	movlb	0	; () banked
  4972  000FF4  AD9D               	btfss	lcdcmd_nibble@cmdout& (0+255),6,b
  4973  000FF6  D004               	goto	u2650
  4974  000FF8  0100               	movlb	0	; () banked
  4975  000FFA  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4976  000FFC  2B9C               	incf	??_lcdcmd_nibble& (0+255),f,b
  4977  000FFE  D002               	goto	u2668
  4978  001000                     u2650:
  4979  001000  0100               	movlb	0	; () banked
  4980  001002  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4981  001004                     u2668:
  4982  001004  0100               	movlb	0	; () banked
  4983  001006  3B9C               	swapf	??_lcdcmd_nibble& (0+255),f,b
  4984  001008  479C               	rlncf	??_lcdcmd_nibble& (0+255),f,b
  4985  00100A  479C               	rlncf	??_lcdcmd_nibble& (0+255),f,b
  4986  00100C  508A               	movf	3978,w,c	;volatile
  4987  00100E  0100               	movlb	0	; () banked
  4988  001010  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4989  001012  0BBF               	andlw	-65
  4990  001014  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  4991  001016  6E8A               	movwf	3978,c	;volatile
  4992                           
  4993                           ;LCD_4bit.h: 178: LATBbits.LATB7=((cmdout&0x80)? 1:0);
  4994  001018  0100               	movlb	0	; () banked
  4995  00101A  AF9D               	btfss	lcdcmd_nibble@cmdout& (0+255),7,b
  4996  00101C  D004               	goto	u2670
  4997  00101E  0100               	movlb	0	; () banked
  4998  001020  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  4999  001022  2B9C               	incf	??_lcdcmd_nibble& (0+255),f,b
  5000  001024  D002               	goto	u2688
  5001  001026                     u2670:
  5002  001026  0100               	movlb	0	; () banked
  5003  001028  6B9C               	clrf	??_lcdcmd_nibble& (0+255),b
  5004  00102A                     u2688:
  5005  00102A  0100               	movlb	0	; () banked
  5006  00102C  339C               	rrcf	??_lcdcmd_nibble& (0+255),f,b
  5007  00102E  339C               	rrcf	??_lcdcmd_nibble& (0+255),f,b
  5008  001030  508A               	movf	3978,w,c	;volatile
  5009  001032  0100               	movlb	0	; () banked
  5010  001034  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  5011  001036  0B7F               	andlw	-129
  5012  001038  199C               	xorwf	??_lcdcmd_nibble& (0+255),w,b
  5013  00103A  6E8A               	movwf	3978,c	;volatile
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;LCD_4bit.h: 179: LATBbits.LB2=0;
  5017  00103C  948A               	bcf	3978,2,c	;volatile
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;LCD_4bit.h: 181: LATBbits.LB3=1;LATBbits.LB2=0;LATBbits.LB2=0;LATBbits.LB2=0;
  5021  00103E  868A               	bsf	3978,3,c	;volatile
  5022                           
  5023                           ; BSR set to: 0
  5024  001040  948A               	bcf	3978,2,c	;volatile
  5025                           
  5026                           ; BSR set to: 0
  5027  001042  948A               	bcf	3978,2,c	;volatile
  5028                           
  5029                           ; BSR set to: 0
  5030  001044  948A               	bcf	3978,2,c	;volatile
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;LCD_4bit.h: 182: LATBbits.LB3=0;
  5034  001046  968A               	bcf	3978,3,c	;volatile
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;LCD_4bit.h: 183: lcd_delay(20);
  5038  001048  0E14               	movlw	20
  5039  00104A  0100               	movlb	0	; () banked
  5040  00104C  6F8F               	movwf	lcd_delay@temp& (0+255),b
  5041  00104E  0E00               	movlw	0
  5042  001050  6F90               	movwf	(lcd_delay@temp+1)& (0+255),b
  5043  001052  0E00               	movlw	0
  5044  001054  6F91               	movwf	(lcd_delay@temp+2)& (0+255),b
  5045  001056  0E00               	movlw	0
  5046  001058  6F92               	movwf	(lcd_delay@temp+3)& (0+255),b
  5047  00105A  EC33  F009         	call	_lcd_delay	;wreg free
  5048  00105E  0012               	return		;funcret
  5049  001060                     __end_of_lcdcmd_nibble:
  5050                           	opt stack 0
  5051                           tblptru	equ	0xFF8
  5052                           tblptrh	equ	0xFF7
  5053                           tblptrl	equ	0xFF6
  5054                           tablat	equ	0xFF5
  5055                           prodh	equ	0xFF4
  5056                           prodl	equ	0xFF3
  5057                           intcon	equ	0xFF2
  5058                           intcon2	equ	0xFF1
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           indf1	equ	0xFE7
  5062                           fsr1h	equ	0xFE2
  5063                           fsr1l	equ	0xFE1
  5064                           indf2	equ	0xFDF
  5065                           fsr2h	equ	0xFDA
  5066                           fsr2l	equ	0xFD9
  5067                           status	equ	0xFD8
  5068                           
  5069 ;; *************** function _dis_string *****************
  5070 ;; Defined at:
  5071 ;;		line 65 in file "LCD_4bit.h"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  wrptr           2   17[BANK0 ] PTR unsigned char 
  5074 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  5075 ;;		 -> digits(4), STR_7(6), time_lcd(5), STR_6(6), 
  5076 ;;		 -> STR_5(17), STR_4(14), STR_3(17), STR_2(17), 
  5077 ;;		 -> STR_1(17), rx_position(4), 
  5078 ;;  len             1   19[BANK0 ] unsigned char 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  i               2   25[BANK0 ] int 
  5081 ;;  count           2   23[BANK0 ] unsigned int 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5091 ;;      Params:         0       3       0       0       0       0       0
  5092 ;;      Locals:         0       4       0       0       0       0       0
  5093 ;;      Temps:          0       3       0       0       0       0       0
  5094 ;;      Totals:         0      10       0       0       0       0       0
  5095 ;;Total ram usage:       10 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:   10
  5098 ;; This function calls:
  5099 ;;		_dis_char
  5100 ;; This function is called by:
  5101 ;;		_ProcessStepperData
  5102 ;;		_Timer0_Init
  5103 ;;		_Compressor_Timer
  5104 ;;		_ADXL_Display
  5105 ;;		_RxI1
  5106 ;;		_Init
  5107 ;;		_main
  5108 ;;		_dis_string_cod
  5109 ;;		_display_uptime
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text29
  5114  0014B8                     __ptext29:
  5115                           	opt stack 0
  5116  0014B8                     _dis_string:
  5117                           	opt stack 20
  5118                           
  5119                           ;LCD_4bit.h: 66: unsigned int count = 0;
  5120                           
  5121                           ;incstack = 0
  5122  0014B8  0E00               	movlw	0
  5123  0014BA  0100               	movlb	0	; () banked
  5124  0014BC  6FA7               	movwf	(dis_string@count+1)& (0+255),b
  5125  0014BE  0E00               	movlw	0
  5126  0014C0  6FA6               	movwf	dis_string@count& (0+255),b
  5127                           
  5128                           ;LCD_4bit.h: 67: int i;
  5129                           ;LCD_4bit.h: 68: for(i = 0; i< len; i++) {
  5130  0014C2  0E00               	movlw	0
  5131  0014C4  0100               	movlb	0	; () banked
  5132  0014C6  6FA9               	movwf	(dis_string@i+1)& (0+255),b
  5133  0014C8  0E00               	movlw	0
  5134  0014CA  6FA8               	movwf	dis_string@i& (0+255),b
  5135  0014CC  D025               	goto	l3155
  5136  0014CE                     l3149:
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;LCD_4bit.h: 69: dis_char(wrptr[count]);
  5140  0014CE  0100               	movlb	0	; () banked
  5141  0014D0  51A6               	movf	dis_string@count& (0+255),w,b
  5142  0014D2  0100               	movlb	0	; () banked
  5143  0014D4  25A0               	addwf	dis_string@wrptr& (0+255),w,b
  5144  0014D6  0100               	movlb	0	; () banked
  5145  0014D8  6FA3               	movwf	??_dis_string& (0+255),b
  5146  0014DA  0100               	movlb	0	; () banked
  5147  0014DC  51A7               	movf	(dis_string@count+1)& (0+255),w,b
  5148  0014DE  0100               	movlb	0	; () banked
  5149  0014E0  21A1               	addwfc	(dis_string@wrptr+1)& (0+255),w,b
  5150  0014E2  0100               	movlb	0	; () banked
  5151  0014E4  6FA4               	movwf	(??_dis_string+1)& (0+255),b
  5152  0014E6  C0A3  FFF6         	movff	??_dis_string,tblptrl
  5153  0014EA  C0A4  FFF7         	movff	??_dis_string+1,tblptrh
  5154  0014EE  6AF8               	clrf	tblptru,c
  5155  0014F0  0E05               	movlw	(high __ramtop+-1)
  5156  0014F2  64F7               	cpfsgt	tblptrh,c
  5157  0014F4  D003               	bra	u2907
  5158  0014F6  0008               	tblrd		*
  5159  0014F8  50F5               	movf	tablat,w,c
  5160  0014FA  D005               	bra	u2900
  5161  0014FC                     u2907:
  5162  0014FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5163  001500  CFF7 FFEA          	movff	tblptrh,fsr0h
  5164  001504  50EF               	movf	indf0,w,c
  5165  001506                     u2900:
  5166  001506  EC0A  F00E         	call	_dis_char
  5167                           
  5168                           ;LCD_4bit.h: 70: count++;
  5169  00150A  0100               	movlb	0	; () banked
  5170  00150C  4BA6               	infsnz	dis_string@count& (0+255),f,b
  5171  00150E  2BA7               	incf	(dis_string@count+1)& (0+255),f,b
  5172                           
  5173                           ; BSR set to: 0
  5174  001510  0100               	movlb	0	; () banked
  5175  001512  4BA8               	infsnz	dis_string@i& (0+255),f,b
  5176  001514  2BA9               	incf	(dis_string@i+1)& (0+255),f,b
  5177  001516  D000               	goto	l3155
  5178  001518                     l3155:
  5179                           
  5180                           ; BSR set to: 0
  5181  001518  0100               	movlb	0	; () banked
  5182  00151A  51A2               	movf	dis_string@len& (0+255),w,b
  5183  00151C  0100               	movlb	0	; () banked
  5184  00151E  6FA3               	movwf	??_dis_string& (0+255),b
  5185  001520  6BA4               	clrf	(??_dis_string+1)& (0+255),b
  5186  001522  0100               	movlb	0	; () banked
  5187  001524  51A3               	movf	??_dis_string& (0+255),w,b
  5188  001526  0100               	movlb	0	; () banked
  5189  001528  5DA8               	subwf	dis_string@i& (0+255),w,b
  5190  00152A  0100               	movlb	0	; () banked
  5191  00152C  51A9               	movf	(dis_string@i+1)& (0+255),w,b
  5192  00152E  0A80               	xorlw	128
  5193  001530  0100               	movlb	0	; () banked
  5194  001532  6FA5               	movwf	(??_dis_string+2)& (0+255),b
  5195  001534  0100               	movlb	0	; () banked
  5196  001536  51A4               	movf	(??_dis_string+1)& (0+255),w,b
  5197  001538  0A80               	xorlw	128
  5198  00153A  0100               	movlb	0	; () banked
  5199  00153C  59A5               	subwfb	(??_dis_string+2)& (0+255),w,b
  5200  00153E  A0D8               	btfss	status,0,c
  5201  001540  D7C6               	goto	l3149
  5202                           
  5203                           ; BSR set to: 0
  5204                           
  5205                           ; BSR set to: 0
  5206  001542  0012               	return		;funcret
  5207  001544                     __end_of_dis_string:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           indf0	equ	0xFEF
  5218                           postinc0	equ	0xFEE
  5219                           fsr0h	equ	0xFEA
  5220                           fsr0l	equ	0xFE9
  5221                           wreg	equ	0xFE8
  5222                           indf1	equ	0xFE7
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _dis_char *****************
  5231 ;; Defined at:
  5232 ;;		line 163 in file "LCD_4bit.h"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  data_value      1    wreg     unsigned char 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  data_value      1   15[BANK0 ] unsigned char 
  5237 ;;  data_value1     1   16[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		wreg, status,2, status,0, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5247 ;;      Params:         0       0       0       0       0       0       0
  5248 ;;      Locals:         0       2       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0
  5250 ;;      Totals:         0       2       0       0       0       0       0
  5251 ;;Total ram usage:        2 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    9
  5254 ;; This function calls:
  5255 ;;		_lcddata_nibble
  5256 ;; This function is called by:
  5257 ;;		_dis_string
  5258 ;;		_ProcessStepperData
  5259 ;;		_back_space
  5260 ;;		_dis_char_cod
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text30
  5265  001C14                     __ptext30:
  5266                           	opt stack 0
  5267  001C14                     _dis_char:
  5268                           	opt stack 20
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;incstack = 0
  5272                           ;dis_char@data_value stored from wreg
  5273  001C14  0100               	movlb	0	; () banked
  5274  001C16  6F9E               	movwf	dis_char@data_value& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;LCD_4bit.h: 164: unsigned char data_value1;
  5278                           ;LCD_4bit.h: 165: data_value1=(data_value&0xF0);
  5279  001C18  0100               	movlb	0	; () banked
  5280  001C1A  519E               	movf	dis_char@data_value& (0+255),w,b
  5281  001C1C  0BF0               	andlw	240
  5282  001C1E  0100               	movlb	0	; () banked
  5283  001C20  6F9F               	movwf	dis_char@data_value1& (0+255),b
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;LCD_4bit.h: 166: lcddata_nibble(data_value1);
  5287  001C22  0100               	movlb	0	; () banked
  5288  001C24  519F               	movf	dis_char@data_value1& (0+255),w,b
  5289  001C26  EC30  F008         	call	_lcddata_nibble
  5290                           
  5291                           ;LCD_4bit.h: 167: data_value1=((data_value<<4)&0xF0);
  5292  001C2A  0100               	movlb	0	; () banked
  5293  001C2C  399E               	swapf	dis_char@data_value& (0+255),w,b
  5294  001C2E  0BF0               	andlw	240
  5295  001C30  0BF0               	andlw	240
  5296  001C32  0100               	movlb	0	; () banked
  5297  001C34  6F9F               	movwf	dis_char@data_value1& (0+255),b
  5298                           
  5299                           ;LCD_4bit.h: 168: lcddata_nibble(data_value1);
  5300  001C36  0100               	movlb	0	; () banked
  5301  001C38  519F               	movf	dis_char@data_value1& (0+255),w,b
  5302  001C3A  EC30  F008         	call	_lcddata_nibble
  5303  001C3E  0012               	return		;funcret
  5304  001C40                     __end_of_dis_char:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon2	equ	0xFF1
  5314                           indf0	equ	0xFEF
  5315                           postinc0	equ	0xFEE
  5316                           fsr0h	equ	0xFEA
  5317                           fsr0l	equ	0xFE9
  5318                           wreg	equ	0xFE8
  5319                           indf1	equ	0xFE7
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           indf2	equ	0xFDF
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function _lcddata_nibble *****************
  5328 ;; Defined at:
  5329 ;;		line 186 in file "LCD_4bit.h"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  dataout         1    wreg     unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  dataout         1   14[BANK0 ] unsigned char 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;		None               void
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5343 ;;      Params:         0       0       0       0       0       0       0
  5344 ;;      Locals:         0       1       0       0       0       0       0
  5345 ;;      Temps:          0       1       0       0       0       0       0
  5346 ;;      Totals:         0       2       0       0       0       0       0
  5347 ;;Total ram usage:        2 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    8
  5350 ;; This function calls:
  5351 ;;		_lcd_delay
  5352 ;; This function is called by:
  5353 ;;		_dis_char
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text31
  5358  001060                     __ptext31:
  5359                           	opt stack 0
  5360  001060                     _lcddata_nibble:
  5361                           	opt stack 20
  5362                           
  5363                           ;incstack = 0
  5364                           ;lcddata_nibble@dataout stored from wreg
  5365  001060  0100               	movlb	0	; () banked
  5366  001062  6F9D               	movwf	lcddata_nibble@dataout& (0+255),b
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;LCD_4bit.h: 189: LATBbits.LATB4=((dataout&0x10)? 1:0);
  5370  001064  0100               	movlb	0	; () banked
  5371  001066  A99D               	btfss	lcddata_nibble@dataout& (0+255),4,b
  5372  001068  D004               	goto	u2690
  5373  00106A  0100               	movlb	0	; () banked
  5374  00106C  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5375  00106E  2B9C               	incf	??_lcddata_nibble& (0+255),f,b
  5376  001070  D002               	goto	u2708
  5377  001072                     u2690:
  5378  001072  0100               	movlb	0	; () banked
  5379  001074  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5380  001076                     u2708:
  5381  001076  0100               	movlb	0	; () banked
  5382  001078  3B9C               	swapf	??_lcddata_nibble& (0+255),f,b
  5383  00107A  508A               	movf	3978,w,c	;volatile
  5384  00107C  0100               	movlb	0	; () banked
  5385  00107E  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5386  001080  0BEF               	andlw	-17
  5387  001082  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5388  001084  6E8A               	movwf	3978,c	;volatile
  5389                           
  5390                           ;LCD_4bit.h: 190: LATBbits.LATB5=((dataout&0x20)? 1:0);
  5391  001086  0100               	movlb	0	; () banked
  5392  001088  AB9D               	btfss	lcddata_nibble@dataout& (0+255),5,b
  5393  00108A  D004               	goto	u2710
  5394  00108C  0100               	movlb	0	; () banked
  5395  00108E  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5396  001090  2B9C               	incf	??_lcddata_nibble& (0+255),f,b
  5397  001092  D002               	goto	u2728
  5398  001094                     u2710:
  5399  001094  0100               	movlb	0	; () banked
  5400  001096  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5401  001098                     u2728:
  5402  001098  0100               	movlb	0	; () banked
  5403  00109A  3B9C               	swapf	??_lcddata_nibble& (0+255),f,b
  5404  00109C  479C               	rlncf	??_lcddata_nibble& (0+255),f,b
  5405  00109E  508A               	movf	3978,w,c	;volatile
  5406  0010A0  0100               	movlb	0	; () banked
  5407  0010A2  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5408  0010A4  0BDF               	andlw	-33
  5409  0010A6  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5410  0010A8  6E8A               	movwf	3978,c	;volatile
  5411                           
  5412                           ;LCD_4bit.h: 191: LATBbits.LATB6=((dataout&0x40)? 1:0);
  5413  0010AA  0100               	movlb	0	; () banked
  5414  0010AC  AD9D               	btfss	lcddata_nibble@dataout& (0+255),6,b
  5415  0010AE  D004               	goto	u2730
  5416  0010B0  0100               	movlb	0	; () banked
  5417  0010B2  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5418  0010B4  2B9C               	incf	??_lcddata_nibble& (0+255),f,b
  5419  0010B6  D002               	goto	u2748
  5420  0010B8                     u2730:
  5421  0010B8  0100               	movlb	0	; () banked
  5422  0010BA  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5423  0010BC                     u2748:
  5424  0010BC  0100               	movlb	0	; () banked
  5425  0010BE  3B9C               	swapf	??_lcddata_nibble& (0+255),f,b
  5426  0010C0  479C               	rlncf	??_lcddata_nibble& (0+255),f,b
  5427  0010C2  479C               	rlncf	??_lcddata_nibble& (0+255),f,b
  5428  0010C4  508A               	movf	3978,w,c	;volatile
  5429  0010C6  0100               	movlb	0	; () banked
  5430  0010C8  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5431  0010CA  0BBF               	andlw	-65
  5432  0010CC  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5433  0010CE  6E8A               	movwf	3978,c	;volatile
  5434                           
  5435                           ;LCD_4bit.h: 192: LATBbits.LATB7=((dataout&0x80)? 1:0);
  5436  0010D0  0100               	movlb	0	; () banked
  5437  0010D2  AF9D               	btfss	lcddata_nibble@dataout& (0+255),7,b
  5438  0010D4  D004               	goto	u2750
  5439  0010D6  0100               	movlb	0	; () banked
  5440  0010D8  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5441  0010DA  2B9C               	incf	??_lcddata_nibble& (0+255),f,b
  5442  0010DC  D002               	goto	u2768
  5443  0010DE                     u2750:
  5444  0010DE  0100               	movlb	0	; () banked
  5445  0010E0  6B9C               	clrf	??_lcddata_nibble& (0+255),b
  5446  0010E2                     u2768:
  5447  0010E2  0100               	movlb	0	; () banked
  5448  0010E4  339C               	rrcf	??_lcddata_nibble& (0+255),f,b
  5449  0010E6  339C               	rrcf	??_lcddata_nibble& (0+255),f,b
  5450  0010E8  508A               	movf	3978,w,c	;volatile
  5451  0010EA  0100               	movlb	0	; () banked
  5452  0010EC  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5453  0010EE  0B7F               	andlw	-129
  5454  0010F0  199C               	xorwf	??_lcddata_nibble& (0+255),w,b
  5455  0010F2  6E8A               	movwf	3978,c	;volatile
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;LCD_4bit.h: 194: LATBbits.LB2=1;
  5459  0010F4  848A               	bsf	3978,2,c	;volatile
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;LCD_4bit.h: 196: LATBbits.LB3=1;
  5463  0010F6  868A               	bsf	3978,3,c	;volatile
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;LCD_4bit.h: 197: LATBbits.LB2=1;LATBbits.LB2=1;LATBbits.LB2=1;
  5467  0010F8  848A               	bsf	3978,2,c	;volatile
  5468                           
  5469                           ; BSR set to: 0
  5470  0010FA  848A               	bsf	3978,2,c	;volatile
  5471                           
  5472                           ; BSR set to: 0
  5473  0010FC  848A               	bsf	3978,2,c	;volatile
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;LCD_4bit.h: 198: LATBbits.LB3=0;
  5477  0010FE  968A               	bcf	3978,3,c	;volatile
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;LCD_4bit.h: 200: lcd_delay(10);
  5481  001100  0E0A               	movlw	10
  5482  001102  0100               	movlb	0	; () banked
  5483  001104  6F8F               	movwf	lcd_delay@temp& (0+255),b
  5484  001106  0E00               	movlw	0
  5485  001108  6F90               	movwf	(lcd_delay@temp+1)& (0+255),b
  5486  00110A  0E00               	movlw	0
  5487  00110C  6F91               	movwf	(lcd_delay@temp+2)& (0+255),b
  5488  00110E  0E00               	movlw	0
  5489  001110  6F92               	movwf	(lcd_delay@temp+3)& (0+255),b
  5490  001112  EC33  F009         	call	_lcd_delay	;wreg free
  5491  001116  0012               	return		;funcret
  5492  001118                     __end_of_lcddata_nibble:
  5493                           	opt stack 0
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           intcon2	equ	0xFF1
  5502                           indf0	equ	0xFEF
  5503                           postinc0	equ	0xFEE
  5504                           fsr0h	equ	0xFEA
  5505                           fsr0l	equ	0xFE9
  5506                           wreg	equ	0xFE8
  5507                           indf1	equ	0xFE7
  5508                           fsr1h	equ	0xFE2
  5509                           fsr1l	equ	0xFE1
  5510                           indf2	equ	0xFDF
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _lcd_delay *****************
  5516 ;; Defined at:
  5517 ;;		line 106 in file "LCD_4bit.h"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  temp            4    0[BANK0 ] long 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  i               4    9[BANK0 ] long 
  5522 ;;  j               4    5[BANK0 ] long 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;		None               void
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5532 ;;      Params:         0       4       0       0       0       0       0
  5533 ;;      Locals:         0       8       0       0       0       0       0
  5534 ;;      Temps:          0       1       0       0       0       0       0
  5535 ;;      Totals:         0      13       0       0       0       0       0
  5536 ;;Total ram usage:       13 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    7
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_lcd_ini
  5543 ;;		_lcdcmd_nibble
  5544 ;;		_lcddata_nibble
  5545 ;;		_ADXL_Display
  5546 ;;		_lcd_waiting_display
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text32
  5551  001266                     __ptext32:
  5552                           	opt stack 0
  5553  001266                     _lcd_delay:
  5554                           	opt stack 20
  5555                           
  5556                           ;LCD_4bit.h: 107: long i,j;
  5557                           ;LCD_4bit.h: 108: for(j=0;j<temp;j++)
  5558                           
  5559                           ;incstack = 0
  5560  001266  0E00               	movlw	0
  5561  001268  0100               	movlb	0	; () banked
  5562  00126A  6F94               	movwf	lcd_delay@j& (0+255),b
  5563  00126C  0E00               	movlw	0
  5564  00126E  6F95               	movwf	(lcd_delay@j+1)& (0+255),b
  5565  001270  0E00               	movlw	0
  5566  001272  6F96               	movwf	(lcd_delay@j+2)& (0+255),b
  5567  001274  0E00               	movlw	0
  5568  001276  6F97               	movwf	(lcd_delay@j+3)& (0+255),b
  5569  001278  D02A               	goto	l193
  5570  00127A                     l2947:
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;LCD_4bit.h: 109: for( i=0;i<150;i++)
  5574  00127A  0E00               	movlw	0
  5575  00127C  0100               	movlb	0	; () banked
  5576  00127E  6F98               	movwf	lcd_delay@i& (0+255),b
  5577  001280  0E00               	movlw	0
  5578  001282  6F99               	movwf	(lcd_delay@i+1)& (0+255),b
  5579  001284  0E00               	movlw	0
  5580  001286  6F9A               	movwf	(lcd_delay@i+2)& (0+255),b
  5581  001288  0E00               	movlw	0
  5582  00128A  6F9B               	movwf	(lcd_delay@i+3)& (0+255),b
  5583  00128C                     l2949:
  5584                           
  5585                           ; BSR set to: 0
  5586  00128C  0100               	movlb	0	; () banked
  5587  00128E  BF9B               	btfsc	(lcd_delay@i+3)& (0+255),7,b
  5588  001290  D00E               	goto	l2953
  5589  001292  0100               	movlb	0	; () banked
  5590  001294  519B               	movf	(lcd_delay@i+3)& (0+255),w,b
  5591  001296  0100               	movlb	0	; () banked
  5592  001298  119A               	iorwf	(lcd_delay@i+2)& (0+255),w,b
  5593  00129A  0100               	movlb	0	; () banked
  5594  00129C  1199               	iorwf	(lcd_delay@i+1)& (0+255),w,b
  5595  00129E  E110               	bnz	l2955
  5596  0012A0  0E96               	movlw	150
  5597  0012A2  0100               	movlb	0	; () banked
  5598  0012A4  5D98               	subwf	lcd_delay@i& (0+255),w,b
  5599  0012A6  B0D8               	btfsc	status,0,c
  5600  0012A8  D00B               	goto	l2955
  5601  0012AA  D001               	goto	l2953
  5602                           
  5603                           ; BSR set to: 0
  5604  0012AC  D009               	goto	l2955
  5605  0012AE                     l2953:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;LCD_4bit.h: 110: ;
  5609  0012AE  0E01               	movlw	1
  5610  0012B0  0100               	movlb	0	; () banked
  5611  0012B2  2798               	addwf	lcd_delay@i& (0+255),f,b
  5612  0012B4  0E00               	movlw	0
  5613  0012B6  2399               	addwfc	(lcd_delay@i+1)& (0+255),f,b
  5614  0012B8  239A               	addwfc	(lcd_delay@i+2)& (0+255),f,b
  5615  0012BA  239B               	addwfc	(lcd_delay@i+3)& (0+255),f,b
  5616  0012BC  D7E7               	goto	l2949
  5617  0012BE  D000               	goto	l2955
  5618  0012C0                     l2955:
  5619                           
  5620                           ; BSR set to: 0
  5621  0012C0  0E01               	movlw	1
  5622  0012C2  0100               	movlb	0	; () banked
  5623  0012C4  2794               	addwf	lcd_delay@j& (0+255),f,b
  5624  0012C6  0E00               	movlw	0
  5625  0012C8  2395               	addwfc	(lcd_delay@j+1)& (0+255),f,b
  5626  0012CA  2396               	addwfc	(lcd_delay@j+2)& (0+255),f,b
  5627  0012CC  2397               	addwfc	(lcd_delay@j+3)& (0+255),f,b
  5628  0012CE                     l193:
  5629                           
  5630                           ; BSR set to: 0
  5631  0012CE  0100               	movlb	0	; () banked
  5632  0012D0  518F               	movf	lcd_delay@temp& (0+255),w,b
  5633  0012D2  0100               	movlb	0	; () banked
  5634  0012D4  5D94               	subwf	lcd_delay@j& (0+255),w,b
  5635  0012D6  0100               	movlb	0	; () banked
  5636  0012D8  5190               	movf	(lcd_delay@temp+1)& (0+255),w,b
  5637  0012DA  0100               	movlb	0	; () banked
  5638  0012DC  5995               	subwfb	(lcd_delay@j+1)& (0+255),w,b
  5639  0012DE  0100               	movlb	0	; () banked
  5640  0012E0  5191               	movf	(lcd_delay@temp+2)& (0+255),w,b
  5641  0012E2  0100               	movlb	0	; () banked
  5642  0012E4  5996               	subwfb	(lcd_delay@j+2)& (0+255),w,b
  5643  0012E6  0100               	movlb	0	; () banked
  5644  0012E8  5197               	movf	(lcd_delay@j+3)& (0+255),w,b
  5645  0012EA  0A80               	xorlw	128
  5646  0012EC  0100               	movlb	0	; () banked
  5647  0012EE  6F93               	movwf	??_lcd_delay& (0+255),b
  5648  0012F0  0100               	movlb	0	; () banked
  5649  0012F2  5192               	movf	(lcd_delay@temp+3)& (0+255),w,b
  5650  0012F4  0A80               	xorlw	128
  5651  0012F6  0100               	movlb	0	; () banked
  5652  0012F8  5993               	subwfb	??_lcd_delay& (0+255),w,b
  5653  0012FA  A0D8               	btfss	status,0,c
  5654  0012FC  D7BE               	goto	l2947
  5655                           
  5656                           ; BSR set to: 0
  5657                           
  5658                           ; BSR set to: 0
  5659  0012FE  0012               	return		;funcret
  5660  001300                     __end_of_lcd_delay:
  5661                           	opt stack 0
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           intcon2	equ	0xFF1
  5670                           indf0	equ	0xFEF
  5671                           postinc0	equ	0xFEE
  5672                           fsr0h	equ	0xFEA
  5673                           fsr0l	equ	0xFE9
  5674                           wreg	equ	0xFE8
  5675                           indf1	equ	0xFE7
  5676                           fsr1h	equ	0xFE2
  5677                           fsr1l	equ	0xFE1
  5678                           indf2	equ	0xFDF
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function ___lwmod *****************
  5684 ;; Defined at:
  5685 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  dividend        2    7[BANK0 ] unsigned int 
  5688 ;;  divisor         2    9[BANK0 ] unsigned int 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  counter         1   11[BANK0 ] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  2    7[BANK0 ] unsigned int 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5700 ;;      Params:         0       4       0       0       0       0       0
  5701 ;;      Locals:         0       1       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0
  5703 ;;      Totals:         0       5       0       0       0       0       0
  5704 ;;Total ram usage:        5 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    7
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_ADXL_Display
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text33
  5715  0018CA                     __ptext33:
  5716                           	opt stack 0
  5717  0018CA                     ___lwmod:
  5718                           	opt stack 22
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;incstack = 0
  5722  0018CA  0100               	movlb	0	; () banked
  5723  0018CC  5198               	movf	___lwmod@divisor& (0+255),w,b
  5724  0018CE  0100               	movlb	0	; () banked
  5725  0018D0  1199               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5726  0018D2  B4D8               	btfsc	status,2,c
  5727  0018D4  D02B               	goto	l1000
  5728                           
  5729                           ; BSR set to: 0
  5730  0018D6  0E01               	movlw	1
  5731  0018D8  0100               	movlb	0	; () banked
  5732  0018DA  6F9A               	movwf	___lwmod@counter& (0+255),b
  5733  0018DC  D007               	goto	l3381
  5734  0018DE                     l3379:
  5735                           
  5736                           ; BSR set to: 0
  5737  0018DE  0100               	movlb	0	; () banked
  5738  0018E0  90D8               	bcf	status,0,c
  5739  0018E2  3798               	rlcf	___lwmod@divisor& (0+255),f,b
  5740  0018E4  3799               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5741  0018E6  0100               	movlb	0	; () banked
  5742  0018E8  2B9A               	incf	___lwmod@counter& (0+255),f,b
  5743  0018EA  D000               	goto	l3381
  5744  0018EC                     l3381:
  5745                           
  5746                           ; BSR set to: 0
  5747  0018EC  0100               	movlb	0	; () banked
  5748  0018EE  BF99               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
  5749  0018F0  D002               	goto	l3383
  5750  0018F2  D7F5               	goto	l3379
  5751                           
  5752                           ; BSR set to: 0
  5753  0018F4  D000               	goto	l3383
  5754  0018F6                     l3383:
  5755                           
  5756                           ; BSR set to: 0
  5757  0018F6  0100               	movlb	0	; () banked
  5758  0018F8  5198               	movf	___lwmod@divisor& (0+255),w,b
  5759  0018FA  0100               	movlb	0	; () banked
  5760  0018FC  5D96               	subwf	___lwmod@dividend& (0+255),w,b
  5761  0018FE  0100               	movlb	0	; () banked
  5762  001900  5199               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5763  001902  0100               	movlb	0	; () banked
  5764  001904  5997               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5765  001906  A0D8               	btfss	status,0,c
  5766  001908  D009               	goto	l3387
  5767                           
  5768                           ; BSR set to: 0
  5769  00190A  0100               	movlb	0	; () banked
  5770  00190C  5198               	movf	___lwmod@divisor& (0+255),w,b
  5771  00190E  0100               	movlb	0	; () banked
  5772  001910  5F96               	subwf	___lwmod@dividend& (0+255),f,b
  5773  001912  0100               	movlb	0	; () banked
  5774  001914  5199               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5775  001916  0100               	movlb	0	; () banked
  5776  001918  5B97               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5777  00191A  D000               	goto	l3387
  5778  00191C                     l3387:
  5779                           
  5780                           ; BSR set to: 0
  5781  00191C  0100               	movlb	0	; () banked
  5782  00191E  90D8               	bcf	status,0,c
  5783  001920  3399               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5784  001922  3398               	rrcf	___lwmod@divisor& (0+255),f,b
  5785                           
  5786                           ; BSR set to: 0
  5787  001924  0100               	movlb	0	; () banked
  5788  001926  2F9A               	decfsz	___lwmod@counter& (0+255),f,b
  5789  001928  D7E6               	goto	l3383
  5790  00192A  D000               	goto	l1000
  5791  00192C                     l1000:
  5792                           
  5793                           ; BSR set to: 0
  5794  00192C  C096  F096         	movff	___lwmod@dividend,?___lwmod
  5795  001930  C097  F097         	movff	___lwmod@dividend+1,?___lwmod+1
  5796                           
  5797                           ; BSR set to: 0
  5798  001934  0012               	return		;funcret
  5799  001936                     __end_of___lwmod:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           intcon2	equ	0xFF1
  5809                           indf0	equ	0xFEF
  5810                           postinc0	equ	0xFEE
  5811                           fsr0h	equ	0xFEA
  5812                           fsr0l	equ	0xFE9
  5813                           wreg	equ	0xFE8
  5814                           indf1	equ	0xFE7
  5815                           fsr1h	equ	0xFE2
  5816                           fsr1l	equ	0xFE1
  5817                           indf2	equ	0xFDF
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function ___lwdiv *****************
  5823 ;; Defined at:
  5824 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  dividend        2    0[BANK0 ] unsigned int 
  5827 ;;  divisor         2    2[BANK0 ] unsigned int 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  quotient        2    5[BANK0 ] unsigned int 
  5830 ;;  counter         1    4[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  2    0[BANK0 ] unsigned int 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5840 ;;      Params:         0       4       0       0       0       0       0
  5841 ;;      Locals:         0       3       0       0       0       0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0
  5843 ;;      Totals:         0       7       0       0       0       0       0
  5844 ;;Total ram usage:        7 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    7
  5847 ;; This function calls:
  5848 ;;		Nothing
  5849 ;; This function is called by:
  5850 ;;		_ADXL_Display
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text34
  5855  0016E0                     __ptext34:
  5856                           	opt stack 0
  5857  0016E0                     ___lwdiv:
  5858                           	opt stack 22
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;incstack = 0
  5862  0016E0  0E00               	movlw	0
  5863  0016E2  0100               	movlb	0	; () banked
  5864  0016E4  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5865  0016E6  0E00               	movlw	0
  5866  0016E8  6F94               	movwf	___lwdiv@quotient& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869  0016EA  0100               	movlb	0	; () banked
  5870  0016EC  5191               	movf	___lwdiv@divisor& (0+255),w,b
  5871  0016EE  0100               	movlb	0	; () banked
  5872  0016F0  1192               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5873  0016F2  B4D8               	btfsc	status,2,c
  5874  0016F4  D031               	goto	l990
  5875                           
  5876                           ; BSR set to: 0
  5877  0016F6  0E01               	movlw	1
  5878  0016F8  0100               	movlb	0	; () banked
  5879  0016FA  6F93               	movwf	___lwdiv@counter& (0+255),b
  5880  0016FC  D007               	goto	l3361
  5881  0016FE                     l3359:
  5882                           
  5883                           ; BSR set to: 0
  5884  0016FE  0100               	movlb	0	; () banked
  5885  001700  90D8               	bcf	status,0,c
  5886  001702  3791               	rlcf	___lwdiv@divisor& (0+255),f,b
  5887  001704  3792               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5888  001706  0100               	movlb	0	; () banked
  5889  001708  2B93               	incf	___lwdiv@counter& (0+255),f,b
  5890  00170A  D000               	goto	l3361
  5891  00170C                     l3361:
  5892                           
  5893                           ; BSR set to: 0
  5894  00170C  0100               	movlb	0	; () banked
  5895  00170E  BF92               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
  5896  001710  D002               	goto	l3363
  5897  001712  D7F5               	goto	l3359
  5898                           
  5899                           ; BSR set to: 0
  5900  001714  D000               	goto	l3363
  5901  001716                     l3363:
  5902                           
  5903                           ; BSR set to: 0
  5904  001716  0100               	movlb	0	; () banked
  5905  001718  90D8               	bcf	status,0,c
  5906  00171A  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  5907  00171C  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5908                           
  5909                           ; BSR set to: 0
  5910  00171E  0100               	movlb	0	; () banked
  5911  001720  5191               	movf	___lwdiv@divisor& (0+255),w,b
  5912  001722  0100               	movlb	0	; () banked
  5913  001724  5D8F               	subwf	___lwdiv@dividend& (0+255),w,b
  5914  001726  0100               	movlb	0	; () banked
  5915  001728  5192               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5916  00172A  0100               	movlb	0	; () banked
  5917  00172C  5990               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5918  00172E  A0D8               	btfss	status,0,c
  5919  001730  D00B               	goto	l3371
  5920                           
  5921                           ; BSR set to: 0
  5922  001732  0100               	movlb	0	; () banked
  5923  001734  5191               	movf	___lwdiv@divisor& (0+255),w,b
  5924  001736  0100               	movlb	0	; () banked
  5925  001738  5F8F               	subwf	___lwdiv@dividend& (0+255),f,b
  5926  00173A  0100               	movlb	0	; () banked
  5927  00173C  5192               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5928  00173E  0100               	movlb	0	; () banked
  5929  001740  5B90               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5930                           
  5931                           ; BSR set to: 0
  5932  001742  0100               	movlb	0	; () banked
  5933  001744  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  5934  001746  D000               	goto	l3371
  5935  001748                     l3371:
  5936                           
  5937                           ; BSR set to: 0
  5938  001748  0100               	movlb	0	; () banked
  5939  00174A  90D8               	bcf	status,0,c
  5940  00174C  3392               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5941  00174E  3391               	rrcf	___lwdiv@divisor& (0+255),f,b
  5942                           
  5943                           ; BSR set to: 0
  5944  001750  0100               	movlb	0	; () banked
  5945  001752  2F93               	decfsz	___lwdiv@counter& (0+255),f,b
  5946  001754  D7E0               	goto	l3363
  5947  001756  D000               	goto	l990
  5948  001758                     l990:
  5949                           
  5950                           ; BSR set to: 0
  5951  001758  C094  F08F         	movff	___lwdiv@quotient,?___lwdiv
  5952  00175C  C095  F090         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5953                           
  5954                           ; BSR set to: 0
  5955  001760  0012               	return		;funcret
  5956  001762                     __end_of___lwdiv:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           intcon2	equ	0xFF1
  5966                           indf0	equ	0xFEF
  5967                           postinc0	equ	0xFEE
  5968                           fsr0h	equ	0xFEA
  5969                           fsr0l	equ	0xFE9
  5970                           wreg	equ	0xFE8
  5971                           indf1	equ	0xFE7
  5972                           fsr1h	equ	0xFE2
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _high_isr *****************
  5980 ;; Defined at:
  5981 ;;		line 66 in file "Dual_UART.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;		None               void
  5988 ;; Registers used:
  5989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5995 ;;      Params:         0       0       0       0       0       0       0
  5996 ;;      Locals:         0       0       0       0       0       0       0
  5997 ;;      Temps:         14       0       0       0       0       0       0
  5998 ;;      Totals:        14       0       0       0       0       0       0
  5999 ;;Total ram usage:       14 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    6
  6002 ;; This function calls:
  6003 ;;		_Reload_Timer
  6004 ;;		_second_inc
  6005 ;; This function is called by:
  6006 ;;		Interrupt level 2
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	intcode
  6011  000008                     __pintcode:
  6012                           	opt stack 0
  6013  000008                     _high_isr:
  6014                           	opt stack 18
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;incstack = 0
  6018  000008  CFFA F01E          	movff	pclath,??_high_isr
  6019  00000C  CFFB F01F          	movff	pclatu,??_high_isr+1
  6020  000010  CFE9 F020          	movff	fsr0l,??_high_isr+2
  6021  000014  CFEA F021          	movff	fsr0h,??_high_isr+3
  6022  000018  CFE1 F022          	movff	fsr1l,??_high_isr+4
  6023  00001C  CFE2 F023          	movff	fsr1h,??_high_isr+5
  6024  000020  CFD9 F024          	movff	fsr2l,??_high_isr+6
  6025  000024  CFDA F025          	movff	fsr2h,??_high_isr+7
  6026  000028  CFF3 F026          	movff	prodl,??_high_isr+8
  6027  00002C  CFF4 F027          	movff	prodh,??_high_isr+9
  6028  000030  CFF6 F028          	movff	tblptrl,??_high_isr+10
  6029  000034  CFF7 F029          	movff	tblptrh,??_high_isr+11
  6030  000038  CFF8 F02A          	movff	tblptru,??_high_isr+12
  6031  00003C  CFF5 F02B          	movff	tablat,??_high_isr+13
  6032                           
  6033                           ;Dual_UART.c: 68: if(PIR1bits.RC1IF) {
  6034  000040  AA9E               	btfss	3998,5,c	;volatile
  6035  000042  D003               	goto	i2l464
  6036                           
  6037                           ;Dual_UART.c: 69: byte1 = RCREG1;
  6038  000044  CFAE F08A          	movff	4014,_byte1	;volatile
  6039                           
  6040                           ;Dual_UART.c: 70: int1flag = 1;
  6041  000048  8645               	bsf	_int1flag/(0+8),_int1flag& (0+7),c	;volatile
  6042  00004A                     i2l464:
  6043                           
  6044                           ;Dual_UART.c: 71: }
  6045                           ;Dual_UART.c: 73: if(PIR3bits.RC2IF) {
  6046  00004A  AAA4               	btfss	4004,5,c	;volatile
  6047  00004C  D003               	goto	i2l465
  6048                           
  6049                           ;Dual_UART.c: 74: byte2 = RCREG2;
  6050  00004E  CF74 F036          	movff	3956,_byte2	;volatile
  6051                           
  6052                           ;Dual_UART.c: 75: int2flag = 1;
  6053  000052  8845               	bsf	_int2flag/(0+8),_int2flag& (0+7),c	;volatile
  6054  000054                     i2l465:
  6055                           
  6056                           ;Dual_UART.c: 77: }
  6057                           ;Dual_UART.c: 79: if(INTCONbits.INT0IF) {
  6058  000054  A2F2               	btfss	intcon,1,c	;volatile
  6059  000056  D003               	goto	i2l466
  6060                           
  6061                           ;Dual_UART.c: 80: if(INTCON2bits.INTEDG0 == 0) {
  6062  000058  ACF1               	btfss	intcon2,6,c	;volatile
  6063                           
  6064                           ;Dual_UART.c: 81: rstflag = 0;
  6065  00005A  9A45               	bcf	_rstflag/(0+8),_rstflag& (0+7),c	;volatile
  6066                           
  6067                           ;Dual_UART.c: 82: }
  6068                           ;Dual_UART.c: 83: INTCONbits.INT0IF = 0;
  6069  00005C  92F2               	bcf	intcon,1,c	;volatile
  6070  00005E                     i2l466:
  6071                           
  6072                           ;Dual_UART.c: 84: }
  6073                           ;Dual_UART.c: 86: if(INTCONbits.TMR0IF && comp_tmr_en) {
  6074  00005E  B4F2               	btfsc	intcon,2,c	;volatile
  6075  000060  A245               	btfss	_comp_tmr_en/(0+8),_comp_tmr_en& (0+7),c	;volatile
  6076  000062  D006               	goto	i2l469
  6077                           
  6078                           ;Dual_UART.c: 87: Reload_Timer();
  6079  000064  EC9E  F00E         	call	_Reload_Timer	;wreg free
  6080                           
  6081                           ;Dual_UART.c: 88: second_inc();
  6082  000068  EC52  F00D         	call	_second_inc	;wreg free
  6083                           
  6084                           ;Dual_UART.c: 89: INTCONbits.TMR0IF = 0;
  6085  00006C  94F2               	bcf	intcon,2,c	;volatile
  6086  00006E  D000               	goto	i2l469
  6087  000070                     i2l469:
  6088  000070  C02B  FFF5         	movff	??_high_isr+13,tablat
  6089  000074  C02A  FFF8         	movff	??_high_isr+12,tblptru
  6090  000078  C029  FFF7         	movff	??_high_isr+11,tblptrh
  6091  00007C  C028  FFF6         	movff	??_high_isr+10,tblptrl
  6092  000080  C027  FFF4         	movff	??_high_isr+9,prodh
  6093  000084  C026  FFF3         	movff	??_high_isr+8,prodl
  6094  000088  C025  FFDA         	movff	??_high_isr+7,fsr2h
  6095  00008C  C024  FFD9         	movff	??_high_isr+6,fsr2l
  6096  000090  C023  FFE2         	movff	??_high_isr+5,fsr1h
  6097  000094  C022  FFE1         	movff	??_high_isr+4,fsr1l
  6098  000098  C021  FFEA         	movff	??_high_isr+3,fsr0h
  6099  00009C  C020  FFE9         	movff	??_high_isr+2,fsr0l
  6100  0000A0  C01F  FFFB         	movff	??_high_isr+1,pclatu
  6101  0000A4  C01E  FFFA         	movff	??_high_isr,pclath
  6102  0000A8  0011               	retfie		f
  6103  0000AA                     __end_of_high_isr:
  6104                           	opt stack 0
  6105                           pclatu	equ	0xFFB
  6106                           pclath	equ	0xFFA
  6107                           tblptru	equ	0xFF8
  6108                           tblptrh	equ	0xFF7
  6109                           tblptrl	equ	0xFF6
  6110                           tablat	equ	0xFF5
  6111                           prodh	equ	0xFF4
  6112                           prodl	equ	0xFF3
  6113                           intcon	equ	0xFF2
  6114                           intcon2	equ	0xFF1
  6115                           indf0	equ	0xFEF
  6116                           postinc0	equ	0xFEE
  6117                           fsr0h	equ	0xFEA
  6118                           fsr0l	equ	0xFE9
  6119                           wreg	equ	0xFE8
  6120                           indf1	equ	0xFE7
  6121                           fsr1h	equ	0xFE2
  6122                           fsr1l	equ	0xFE1
  6123                           indf2	equ	0xFDF
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _second_inc *****************
  6129 ;; Defined at:
  6130 ;;		line 70 in file "TIMER_45k222.h"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;		None
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6144 ;;      Params:         0       0       0       0       0       0       0
  6145 ;;      Locals:         0       0       0       0       0       0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0
  6147 ;;      Totals:         0       0       0       0       0       0       0
  6148 ;;Total ram usage:        0 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    5
  6151 ;; This function calls:
  6152 ;;		_display_downtime
  6153 ;; This function is called by:
  6154 ;;		_high_isr
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	text36
  6159  001AA4                     __ptext36:
  6160                           	opt stack 0
  6161  001AA4                     _second_inc:
  6162                           	opt stack 18
  6163                           
  6164                           ;TIMER_45k222.h: 71: second++;
  6165                           
  6166                           ;incstack = 0
  6167  001AA4  0100               	movlb	0	; () banked
  6168  001AA6  4B88               	infsnz	_second& (0+255),f,b
  6169  001AA8  2B89               	incf	(_second+1)& (0+255),f,b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;TIMER_45k222.h: 72: if(second > 59) {
  6173  001AAA  0100               	movlb	0	; () banked
  6174  001AAC  BF89               	btfsc	(_second+1)& (0+255),7,b
  6175  001AAE  D010               	goto	i2l2725
  6176  001AB0  0100               	movlb	0	; () banked
  6177  001AB2  5189               	movf	(_second+1)& (0+255),w,b
  6178  001AB4  E105               	bnz	i2u230_40
  6179  001AB6  0E3C               	movlw	60
  6180  001AB8  0100               	movlb	0	; () banked
  6181  001ABA  5D88               	subwf	_second& (0+255),w,b
  6182  001ABC  A0D8               	btfss	status,0,c
  6183  001ABE  D008               	goto	i2l2725
  6184  001AC0                     i2u230_40:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;TIMER_45k222.h: 73: minute++;
  6188  001AC0  4A34               	infsnz	_minute,f,c
  6189  001AC2  2A35               	incf	_minute+1,f,c
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;TIMER_45k222.h: 74: second = 0;
  6193  001AC4  0E00               	movlw	0
  6194  001AC6  0100               	movlb	0	; () banked
  6195  001AC8  6F89               	movwf	(_second+1)& (0+255),b
  6196  001ACA  0E00               	movlw	0
  6197  001ACC  6F88               	movwf	_second& (0+255),b
  6198  001ACE  D000               	goto	i2l2725
  6199  001AD0                     i2l2725:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;TIMER_45k222.h: 75: }
  6203                           ;TIMER_45k222.h: 76: if(minute > 59)
  6204  001AD0  BE35               	btfsc	_minute+1,7,c
  6205  001AD2  D00B               	goto	i2l2729
  6206  001AD4  5035               	movf	_minute+1,w,c
  6207  001AD6  E104               	bnz	i2u231_40
  6208  001AD8  0E3C               	movlw	60
  6209  001ADA  5C34               	subwf	_minute,w,c
  6210  001ADC  A0D8               	btfss	status,0,c
  6211  001ADE  D005               	goto	i2l2729
  6212  001AE0                     i2u231_40:
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;TIMER_45k222.h: 77: minute = 0;
  6216  001AE0  0E00               	movlw	0
  6217  001AE2  6E35               	movwf	_minute+1,c
  6218  001AE4  0E00               	movlw	0
  6219  001AE6  6E34               	movwf	_minute,c
  6220  001AE8  D000               	goto	i2l2729
  6221  001AEA                     i2l2729:
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;TIMER_45k222.h: 78: display_downtime();
  6225  001AEA  ECF2  F006         	call	_display_downtime	;wreg free
  6226  001AEE  0012               	return		;funcret
  6227  001AF0                     __end_of_second_inc:
  6228                           	opt stack 0
  6229                           pclatu	equ	0xFFB
  6230                           pclath	equ	0xFFA
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           indf0	equ	0xFEF
  6240                           postinc0	equ	0xFEE
  6241                           fsr0h	equ	0xFEA
  6242                           fsr0l	equ	0xFE9
  6243                           wreg	equ	0xFE8
  6244                           indf1	equ	0xFE7
  6245                           fsr1h	equ	0xFE2
  6246                           fsr1l	equ	0xFE1
  6247                           indf2	equ	0xFDF
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _display_downtime *****************
  6253 ;; Defined at:
  6254 ;;		line 81 in file "TIMER_45k222.h"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;		None               void
  6261 ;; Registers used:
  6262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6268 ;;      Params:         0       0       0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0
  6270 ;;      Temps:          2       0       0       0       0       0       0
  6271 ;;      Totals:         2       0       0       0       0       0       0
  6272 ;;Total ram usage:        2 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    4
  6275 ;; This function calls:
  6276 ;;		___awdiv
  6277 ;;		___awmod
  6278 ;;		_lcd_right_shift
  6279 ;;		i2_dis_string
  6280 ;;		i2_second_line
  6281 ;; This function is called by:
  6282 ;;		_second_inc
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text37
  6287  000DE4                     __ptext37:
  6288                           	opt stack 0
  6289  000DE4                     _display_downtime:
  6290                           	opt stack 18
  6291                           
  6292                           ;TIMER_45k222.h: 82: second_line();
  6293                           
  6294                           ;incstack = 0
  6295  000DE4  ECAF  F00E         	call	i2_second_line	;wreg free
  6296                           
  6297                           ;TIMER_45k222.h: 83: dis_string("TIME:", 5);
  6298  000DE8  0E75               	movlw	low STR_6
  6299  000DEA  6E12               	movwf	i2dis_string@wrptr,c
  6300  000DEC  0E06               	movlw	high STR_6
  6301  000DEE  6E13               	movwf	i2dis_string@wrptr+1,c
  6302  000DF0  0E05               	movlw	5
  6303  000DF2  6E14               	movwf	i2dis_string@len,c
  6304  000DF4  EC9B  F00C         	call	i2_dis_string	;wreg free
  6305                           
  6306                           ;TIMER_45k222.h: 84: time_lcd[2] = ':';
  6307  000DF8  0E3A               	movlw	58
  6308  000DFA  6E3E               	movwf	_time_lcd+2,c
  6309                           
  6310                           ;TIMER_45k222.h: 85: lcd_right_shift(0);
  6311  000DFC  0E00               	movlw	0
  6312  000DFE  6E13               	movwf	lcd_right_shift@n+1,c
  6313  000E00  0E00               	movlw	0
  6314  000E02  6E12               	movwf	lcd_right_shift@n,c
  6315  000E04  EC20  F00E         	call	_lcd_right_shift	;wreg free
  6316                           
  6317                           ;TIMER_45k222.h: 86: time_lcd[0] = ((minute / 10) % 10) + 48;
  6318  000E08  0E00               	movlw	0
  6319  000E0A  6E04               	movwf	___awdiv@divisor+1,c
  6320  000E0C  0E0A               	movlw	10
  6321  000E0E  6E03               	movwf	___awdiv@divisor,c
  6322  000E10  C034  F001         	movff	_minute,___awdiv@dividend
  6323  000E14  C035  F002         	movff	_minute+1,___awdiv@dividend+1
  6324  000E18  EC80  F009         	call	___awdiv	;wreg free
  6325  000E1C  C001  F009         	movff	?___awdiv,___awmod@dividend
  6326  000E20  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  6327  000E24  0E00               	movlw	0
  6328  000E26  6E0C               	movwf	___awmod@divisor+1,c
  6329  000E28  0E0A               	movlw	10
  6330  000E2A  6E0B               	movwf	___awmod@divisor,c
  6331  000E2C  ECB1  F00B         	call	___awmod	;wreg free
  6332  000E30  5009               	movf	?___awmod,w,c
  6333  000E32  0F30               	addlw	48
  6334  000E34  6E3C               	movwf	_time_lcd,c
  6335                           
  6336                           ;TIMER_45k222.h: 87: time_lcd[1] = (minute % 10) + 48;
  6337  000E36  C034  F009         	movff	_minute,___awmod@dividend
  6338  000E3A  C035  F00A         	movff	_minute+1,___awmod@dividend+1
  6339  000E3E  0E00               	movlw	0
  6340  000E40  6E0C               	movwf	___awmod@divisor+1,c
  6341  000E42  0E0A               	movlw	10
  6342  000E44  6E0B               	movwf	___awmod@divisor,c
  6343  000E46  ECB1  F00B         	call	___awmod	;wreg free
  6344  000E4A  5009               	movf	?___awmod,w,c
  6345  000E4C  0F30               	addlw	48
  6346  000E4E  6E3D               	movwf	_time_lcd+1,c
  6347                           
  6348                           ;TIMER_45k222.h: 88: time_lcd[3] = (((10-second) / 10) % 10) + 48;
  6349  000E50  0E00               	movlw	0
  6350  000E52  6E04               	movwf	___awdiv@divisor+1,c
  6351  000E54  0E0A               	movlw	10
  6352  000E56  6E03               	movwf	___awdiv@divisor,c
  6353  000E58  C088  F01C         	movff	_second,??_display_downtime
  6354  000E5C  C089  F01D         	movff	_second+1,??_display_downtime+1
  6355  000E60  1E1C               	comf	??_display_downtime,f,c
  6356  000E62  1E1D               	comf	??_display_downtime+1,f,c
  6357  000E64  4A1C               	infsnz	??_display_downtime,f,c
  6358  000E66  2A1D               	incf	??_display_downtime+1,f,c
  6359  000E68  0E0A               	movlw	10
  6360  000E6A  241C               	addwf	??_display_downtime,w,c
  6361  000E6C  6E01               	movwf	___awdiv@dividend,c
  6362  000E6E  0E00               	movlw	0
  6363  000E70  201D               	addwfc	??_display_downtime+1,w,c
  6364  000E72  6E02               	movwf	___awdiv@dividend+1,c
  6365  000E74  EC80  F009         	call	___awdiv	;wreg free
  6366  000E78  C001  F009         	movff	?___awdiv,___awmod@dividend
  6367  000E7C  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  6368  000E80  0E00               	movlw	0
  6369  000E82  6E0C               	movwf	___awmod@divisor+1,c
  6370  000E84  0E0A               	movlw	10
  6371  000E86  6E0B               	movwf	___awmod@divisor,c
  6372  000E88  ECB1  F00B         	call	___awmod	;wreg free
  6373  000E8C  5009               	movf	?___awmod,w,c
  6374  000E8E  0F30               	addlw	48
  6375  000E90  6E3F               	movwf	_time_lcd+3,c
  6376                           
  6377                           ;TIMER_45k222.h: 89: time_lcd[4] = ((10-second) % 10) + 48;
  6378  000E92  C088  F01C         	movff	_second,??_display_downtime
  6379  000E96  C089  F01D         	movff	_second+1,??_display_downtime+1
  6380  000E9A  1E1C               	comf	??_display_downtime,f,c
  6381  000E9C  1E1D               	comf	??_display_downtime+1,f,c
  6382  000E9E  4A1C               	infsnz	??_display_downtime,f,c
  6383  000EA0  2A1D               	incf	??_display_downtime+1,f,c
  6384  000EA2  0E0A               	movlw	10
  6385  000EA4  241C               	addwf	??_display_downtime,w,c
  6386  000EA6  6E09               	movwf	___awmod@dividend,c
  6387  000EA8  0E00               	movlw	0
  6388  000EAA  201D               	addwfc	??_display_downtime+1,w,c
  6389  000EAC  6E0A               	movwf	___awmod@dividend+1,c
  6390  000EAE  0E00               	movlw	0
  6391  000EB0  6E0C               	movwf	___awmod@divisor+1,c
  6392  000EB2  0E0A               	movlw	10
  6393  000EB4  6E0B               	movwf	___awmod@divisor,c
  6394  000EB6  ECB1  F00B         	call	___awmod	;wreg free
  6395  000EBA  5009               	movf	?___awmod,w,c
  6396  000EBC  0F30               	addlw	48
  6397  000EBE  6E40               	movwf	_time_lcd+4,c
  6398                           
  6399                           ;TIMER_45k222.h: 90: dis_string(time_lcd, 5);
  6400  000EC0  0E3C               	movlw	low _time_lcd
  6401  000EC2  6E12               	movwf	i2dis_string@wrptr,c
  6402  000EC4  0E00               	movlw	high _time_lcd
  6403  000EC6  6E13               	movwf	i2dis_string@wrptr+1,c
  6404  000EC8  0E05               	movlw	5
  6405  000ECA  6E14               	movwf	i2dis_string@len,c
  6406  000ECC  EC9B  F00C         	call	i2_dis_string	;wreg free
  6407  000ED0  0012               	return		;funcret
  6408  000ED2                     __end_of_display_downtime:
  6409                           	opt stack 0
  6410                           pclatu	equ	0xFFB
  6411                           pclath	equ	0xFFA
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           intcon2	equ	0xFF1
  6420                           indf0	equ	0xFEF
  6421                           postinc0	equ	0xFEE
  6422                           fsr0h	equ	0xFEA
  6423                           fsr0l	equ	0xFE9
  6424                           wreg	equ	0xFE8
  6425                           indf1	equ	0xFE7
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function i2_second_line *****************
  6434 ;; Defined at:
  6435 ;;		line 53 in file "LCD_4bit.h"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;		None               void
  6442 ;; Registers used:
  6443 ;;		wreg, status,2, status,0, cstack
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6449 ;;      Params:         0       0       0       0       0       0       0
  6450 ;;      Locals:         0       0       0       0       0       0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0
  6452 ;;      Totals:         0       0       0       0       0       0       0
  6453 ;;Total ram usage:        0 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    3
  6456 ;; This function calls:
  6457 ;;		i2_lcd_cmd
  6458 ;; This function is called by:
  6459 ;;		_display_downtime
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text38
  6464  001D5E                     __ptext38:
  6465                           	opt stack 0
  6466  001D5E                     i2_second_line:
  6467                           	opt stack 18
  6468                           
  6469                           ;LCD_4bit.h: 54: lcd_cmd(0xc0);
  6470                           
  6471                           ;incstack = 0
  6472  001D5E  0EC0               	movlw	192
  6473  001D60  EC41  F00E         	call	i2_lcd_cmd
  6474  001D64  0012               	return		;funcret
  6475  001D66                     __end_ofi2_second_line:
  6476                           	opt stack 0
  6477                           pclatu	equ	0xFFB
  6478                           pclath	equ	0xFFA
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           intcon	equ	0xFF2
  6486                           intcon2	equ	0xFF1
  6487                           indf0	equ	0xFEF
  6488                           postinc0	equ	0xFEE
  6489                           fsr0h	equ	0xFEA
  6490                           fsr0l	equ	0xFE9
  6491                           wreg	equ	0xFE8
  6492                           indf1	equ	0xFE7
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function i2_dis_string *****************
  6501 ;; Defined at:
  6502 ;;		line 65 in file "LCD_4bit.h"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  wrptr           2   17[COMRAM] PTR unsigned char 
  6505 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  6506 ;;		 -> digits(4), STR_7(6), time_lcd(5), STR_6(6), 
  6507 ;;		 -> STR_5(17), STR_4(14), STR_3(17), STR_2(17), 
  6508 ;;		 -> STR_1(17), rx_position(4), 
  6509 ;;  len             1   19[COMRAM] unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  dis_string      2   25[COMRAM] int 
  6512 ;;  dis_string      2   23[COMRAM] unsigned int 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;		None               void
  6515 ;; Registers used:
  6516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6522 ;;      Params:         3       0       0       0       0       0       0
  6523 ;;      Locals:         4       0       0       0       0       0       0
  6524 ;;      Temps:          3       0       0       0       0       0       0
  6525 ;;      Totals:        10       0       0       0       0       0       0
  6526 ;;Total ram usage:       10 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    3
  6529 ;; This function calls:
  6530 ;;		i2_dis_char
  6531 ;; This function is called by:
  6532 ;;		_display_downtime
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text39
  6537  001936                     __ptext39:
  6538                           	opt stack 0
  6539  001936                     i2_dis_string:
  6540                           	opt stack 18
  6541                           
  6542                           ;LCD_4bit.h: 66: unsigned int count = 0;
  6543                           
  6544                           ;incstack = 0
  6545  001936  0E00               	movlw	0
  6546  001938  6E19               	movwf	i2dis_string@count+1,c
  6547  00193A  0E00               	movlw	0
  6548  00193C  6E18               	movwf	i2dis_string@count,c
  6549                           
  6550                           ;LCD_4bit.h: 67: int i;
  6551                           ;LCD_4bit.h: 68: for(i = 0; i< len; i++) {
  6552  00193E  0E00               	movlw	0
  6553  001940  6E1B               	movwf	i2dis_string@i+1,c
  6554  001942  0E00               	movlw	0
  6555  001944  6E1A               	movwf	i2dis_string@i,c
  6556  001946  D01D               	goto	i2l2455
  6557  001948                     i2l2449:
  6558                           
  6559                           ;LCD_4bit.h: 69: dis_char(wrptr[count]);
  6560  001948  5018               	movf	i2dis_string@count,w,c
  6561  00194A  2412               	addwf	i2dis_string@wrptr,w,c
  6562  00194C  6E15               	movwf	??i2_dis_string& (0+255),c
  6563  00194E  5019               	movf	i2dis_string@count+1,w,c
  6564  001950  2013               	addwfc	i2dis_string@wrptr+1,w,c
  6565  001952  6E16               	movwf	(??i2_dis_string+1)& (0+255),c
  6566  001954  C015  FFF6         	movff	??i2_dis_string,tblptrl
  6567  001958  C016  FFF7         	movff	??i2_dis_string+1,tblptrh
  6568  00195C  6AF8               	clrf	tblptru,c
  6569  00195E  0E05               	movlw	(high __ramtop+-1)
  6570  001960  64F7               	cpfsgt	tblptrh,c
  6571  001962  D003               	bra	i2u205_47
  6572  001964  0008               	tblrd		*
  6573  001966  50F5               	movf	tablat,w,c
  6574  001968  D005               	bra	i2u205_40
  6575  00196A                     i2u205_47:
  6576  00196A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6577  00196E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6578  001972  50EF               	movf	indf0,w,c
  6579  001974                     i2u205_40:
  6580  001974  EC32  F00E         	call	i2_dis_char
  6581                           
  6582                           ;LCD_4bit.h: 70: count++;
  6583  001978  4A18               	infsnz	i2dis_string@count,f,c
  6584  00197A  2A19               	incf	i2dis_string@count+1,f,c
  6585  00197C  4A1A               	infsnz	i2dis_string@i,f,c
  6586  00197E  2A1B               	incf	i2dis_string@i+1,f,c
  6587  001980  D000               	goto	i2l2455
  6588  001982                     i2l2455:
  6589  001982  5014               	movf	i2dis_string@len,w,c
  6590  001984  6E15               	movwf	??i2_dis_string& (0+255),c
  6591  001986  6A16               	clrf	(??i2_dis_string+1)& (0+255),c
  6592  001988  5015               	movf	??i2_dis_string,w,c
  6593  00198A  5C1A               	subwf	i2dis_string@i,w,c
  6594  00198C  501B               	movf	i2dis_string@i+1,w,c
  6595  00198E  0A80               	xorlw	128
  6596  001990  6E17               	movwf	(??i2_dis_string+2)& (0+255),c
  6597  001992  5016               	movf	??i2_dis_string+1,w,c
  6598  001994  0A80               	xorlw	128
  6599  001996  5817               	subwfb	(??i2_dis_string+2)& (0+255),w,c
  6600  001998  A0D8               	btfss	status,0,c
  6601  00199A  D7D6               	goto	i2l2449
  6602  00199C  0012               	return		;funcret
  6603  00199E                     __end_ofi2_dis_string:
  6604                           	opt stack 0
  6605                           pclatu	equ	0xFFB
  6606                           pclath	equ	0xFFA
  6607                           tblptru	equ	0xFF8
  6608                           tblptrh	equ	0xFF7
  6609                           tblptrl	equ	0xFF6
  6610                           tablat	equ	0xFF5
  6611                           prodh	equ	0xFF4
  6612                           prodl	equ	0xFF3
  6613                           intcon	equ	0xFF2
  6614                           intcon2	equ	0xFF1
  6615                           indf0	equ	0xFEF
  6616                           postinc0	equ	0xFEE
  6617                           fsr0h	equ	0xFEA
  6618                           fsr0l	equ	0xFE9
  6619                           wreg	equ	0xFE8
  6620                           indf1	equ	0xFE7
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function i2_dis_char *****************
  6629 ;; Defined at:
  6630 ;;		line 163 in file "LCD_4bit.h"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  data_value      1    wreg     unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  data_value      1   15[COMRAM] unsigned char 
  6635 ;;  dis_char        1   16[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6645 ;;      Params:         0       0       0       0       0       0       0
  6646 ;;      Locals:         2       0       0       0       0       0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0
  6648 ;;      Totals:         2       0       0       0       0       0       0
  6649 ;;Total ram usage:        2 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    2
  6652 ;; This function calls:
  6653 ;;		i2_lcddata_nibble
  6654 ;; This function is called by:
  6655 ;;		i2_dis_string
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text40
  6660  001C64                     __ptext40:
  6661                           	opt stack 0
  6662  001C64                     i2_dis_char:
  6663                           	opt stack 18
  6664                           
  6665                           ;incstack = 0
  6666                           ;i2dis_char@data_value stored from wreg
  6667  001C64  6E10               	movwf	i2dis_char@data_value,c
  6668                           
  6669                           ;LCD_4bit.h: 164: unsigned char data_value1;
  6670                           ;LCD_4bit.h: 165: data_value1=(data_value&0xF0);
  6671  001C66  5010               	movf	i2dis_char@data_value,w,c
  6672  001C68  0BF0               	andlw	240
  6673  001C6A  6E11               	movwf	i2dis_char@data_value1,c
  6674                           
  6675                           ;LCD_4bit.h: 166: lcddata_nibble(data_value1);
  6676  001C6C  5011               	movf	i2dis_char@data_value1,w,c
  6677  001C6E  ECA2  F00A         	call	i2_lcddata_nibble
  6678                           
  6679                           ;LCD_4bit.h: 167: data_value1=((data_value<<4)&0xF0);
  6680  001C72  3810               	swapf	i2dis_char@data_value,w,c
  6681  001C74  0BF0               	andlw	240
  6682  001C76  0BF0               	andlw	240
  6683  001C78  6E11               	movwf	i2dis_char@data_value1,c
  6684                           
  6685                           ;LCD_4bit.h: 168: lcddata_nibble(data_value1);
  6686  001C7A  5011               	movf	i2dis_char@data_value1,w,c
  6687  001C7C  ECA2  F00A         	call	i2_lcddata_nibble
  6688  001C80  0012               	return		;funcret
  6689  001C82                     __end_ofi2_dis_char:
  6690                           	opt stack 0
  6691                           pclatu	equ	0xFFB
  6692                           pclath	equ	0xFFA
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           intcon2	equ	0xFF1
  6701                           indf0	equ	0xFEF
  6702                           postinc0	equ	0xFEE
  6703                           fsr0h	equ	0xFEA
  6704                           fsr0l	equ	0xFE9
  6705                           wreg	equ	0xFE8
  6706                           indf1	equ	0xFE7
  6707                           fsr1h	equ	0xFE2
  6708                           fsr1l	equ	0xFE1
  6709                           indf2	equ	0xFDF
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function i2_lcddata_nibble *****************
  6715 ;; Defined at:
  6716 ;;		line 186 in file "LCD_4bit.h"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  dataout         1    wreg     unsigned char 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  dataout         1   14[COMRAM] unsigned char 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;		None               void
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6730 ;;      Params:         0       0       0       0       0       0       0
  6731 ;;      Locals:         1       0       0       0       0       0       0
  6732 ;;      Temps:          1       0       0       0       0       0       0
  6733 ;;      Totals:         2       0       0       0       0       0       0
  6734 ;;Total ram usage:        2 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    1
  6737 ;; This function calls:
  6738 ;;		i2_lcd_delay
  6739 ;; This function is called by:
  6740 ;;		i2_dis_char
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text41
  6745  001544                     __ptext41:
  6746                           	opt stack 0
  6747  001544                     i2_lcddata_nibble:
  6748                           	opt stack 18
  6749                           
  6750                           ;incstack = 0
  6751                           ;i2lcddata_nibble@dataout stored from wreg
  6752  001544  6E0F               	movwf	i2lcddata_nibble@dataout,c
  6753                           
  6754                           ;LCD_4bit.h: 189: LATBbits.LATB4=((dataout&0x10)? 1:0);
  6755  001546  A80F               	btfss	i2lcddata_nibble@dataout,4,c
  6756  001548  D003               	goto	i2u166_40
  6757  00154A  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6758  00154C  2A0E               	incf	??i2_lcddata_nibble& (0+255),f,c
  6759  00154E  D001               	goto	i2u167_48
  6760  001550                     i2u166_40:
  6761  001550  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6762  001552                     i2u167_48:
  6763  001552  3A0E               	swapf	??i2_lcddata_nibble,f,c
  6764  001554  508A               	movf	3978,w,c	;volatile
  6765  001556  180E               	xorwf	??i2_lcddata_nibble,w,c
  6766  001558  0BEF               	andlw	-17
  6767  00155A  180E               	xorwf	??i2_lcddata_nibble,w,c
  6768  00155C  6E8A               	movwf	3978,c	;volatile
  6769                           
  6770                           ;LCD_4bit.h: 190: LATBbits.LATB5=((dataout&0x20)? 1:0);
  6771  00155E  AA0F               	btfss	i2lcddata_nibble@dataout,5,c
  6772  001560  D003               	goto	i2u168_40
  6773  001562  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6774  001564  2A0E               	incf	??i2_lcddata_nibble& (0+255),f,c
  6775  001566  D001               	goto	i2u169_48
  6776  001568                     i2u168_40:
  6777  001568  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6778  00156A                     i2u169_48:
  6779  00156A  3A0E               	swapf	??i2_lcddata_nibble,f,c
  6780  00156C  460E               	rlncf	??i2_lcddata_nibble,f,c
  6781  00156E  508A               	movf	3978,w,c	;volatile
  6782  001570  180E               	xorwf	??i2_lcddata_nibble,w,c
  6783  001572  0BDF               	andlw	-33
  6784  001574  180E               	xorwf	??i2_lcddata_nibble,w,c
  6785  001576  6E8A               	movwf	3978,c	;volatile
  6786                           
  6787                           ;LCD_4bit.h: 191: LATBbits.LATB6=((dataout&0x40)? 1:0);
  6788  001578  AC0F               	btfss	i2lcddata_nibble@dataout,6,c
  6789  00157A  D003               	goto	i2u170_40
  6790  00157C  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6791  00157E  2A0E               	incf	??i2_lcddata_nibble& (0+255),f,c
  6792  001580  D001               	goto	i2u171_48
  6793  001582                     i2u170_40:
  6794  001582  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6795  001584                     i2u171_48:
  6796  001584  3A0E               	swapf	??i2_lcddata_nibble,f,c
  6797  001586  460E               	rlncf	??i2_lcddata_nibble,f,c
  6798  001588  460E               	rlncf	??i2_lcddata_nibble,f,c
  6799  00158A  508A               	movf	3978,w,c	;volatile
  6800  00158C  180E               	xorwf	??i2_lcddata_nibble,w,c
  6801  00158E  0BBF               	andlw	-65
  6802  001590  180E               	xorwf	??i2_lcddata_nibble,w,c
  6803  001592  6E8A               	movwf	3978,c	;volatile
  6804                           
  6805                           ;LCD_4bit.h: 192: LATBbits.LATB7=((dataout&0x80)? 1:0);
  6806  001594  AE0F               	btfss	i2lcddata_nibble@dataout,7,c
  6807  001596  D003               	goto	i2u172_40
  6808  001598  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6809  00159A  2A0E               	incf	??i2_lcddata_nibble& (0+255),f,c
  6810  00159C  D001               	goto	i2u173_48
  6811  00159E                     i2u172_40:
  6812  00159E  6A0E               	clrf	??i2_lcddata_nibble& (0+255),c
  6813  0015A0                     i2u173_48:
  6814  0015A0  320E               	rrcf	??i2_lcddata_nibble,f,c
  6815  0015A2  320E               	rrcf	??i2_lcddata_nibble,f,c
  6816  0015A4  508A               	movf	3978,w,c	;volatile
  6817  0015A6  180E               	xorwf	??i2_lcddata_nibble,w,c
  6818  0015A8  0B7F               	andlw	-129
  6819  0015AA  180E               	xorwf	??i2_lcddata_nibble,w,c
  6820  0015AC  6E8A               	movwf	3978,c	;volatile
  6821                           
  6822                           ;LCD_4bit.h: 194: LATBbits.LB2=1;
  6823  0015AE  848A               	bsf	3978,2,c	;volatile
  6824                           
  6825                           ;LCD_4bit.h: 196: LATBbits.LB3=1;
  6826  0015B0  868A               	bsf	3978,3,c	;volatile
  6827                           
  6828                           ;LCD_4bit.h: 197: LATBbits.LB2=1;LATBbits.LB2=1;LATBbits.LB2=1;
  6829  0015B2  848A               	bsf	3978,2,c	;volatile
  6830  0015B4  848A               	bsf	3978,2,c	;volatile
  6831  0015B6  848A               	bsf	3978,2,c	;volatile
  6832                           
  6833                           ;LCD_4bit.h: 198: LATBbits.LB3=0;
  6834  0015B8  968A               	bcf	3978,3,c	;volatile
  6835                           
  6836                           ;LCD_4bit.h: 200: lcd_delay(10);
  6837  0015BA  0E0A               	movlw	10
  6838  0015BC  6E01               	movwf	i2lcd_delay@temp,c
  6839  0015BE  0E00               	movlw	0
  6840  0015C0  6E02               	movwf	i2lcd_delay@temp+1,c
  6841  0015C2  0E00               	movlw	0
  6842  0015C4  6E03               	movwf	i2lcd_delay@temp+2,c
  6843  0015C6  0E00               	movlw	0
  6844  0015C8  6E04               	movwf	i2lcd_delay@temp+3,c
  6845  0015CA  ECF2  F00B         	call	i2_lcd_delay	;wreg free
  6846  0015CE  0012               	return		;funcret
  6847  0015D0                     __end_ofi2_lcddata_nibble:
  6848                           	opt stack 0
  6849                           pclatu	equ	0xFFB
  6850                           pclath	equ	0xFFA
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           intcon2	equ	0xFF1
  6859                           indf0	equ	0xFEF
  6860                           postinc0	equ	0xFEE
  6861                           fsr0h	equ	0xFEA
  6862                           fsr0l	equ	0xFE9
  6863                           wreg	equ	0xFE8
  6864                           indf1	equ	0xFE7
  6865                           fsr1h	equ	0xFE2
  6866                           fsr1l	equ	0xFE1
  6867                           indf2	equ	0xFDF
  6868                           fsr2h	equ	0xFDA
  6869                           fsr2l	equ	0xFD9
  6870                           status	equ	0xFD8
  6871                           
  6872 ;; *************** function _lcd_right_shift *****************
  6873 ;; Defined at:
  6874 ;;		line 157 in file "LCD_4bit.h"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;  n               2   17[COMRAM] unsigned int 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  p               2   19[COMRAM] unsigned int 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;		None               void
  6881 ;; Registers used:
  6882 ;;		wreg, status,2, status,0, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6888 ;;      Params:         2       0       0       0       0       0       0
  6889 ;;      Locals:         2       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0
  6891 ;;      Totals:         4       0       0       0       0       0       0
  6892 ;;Total ram usage:        4 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    3
  6895 ;; This function calls:
  6896 ;;		i2_lcd_cmd
  6897 ;; This function is called by:
  6898 ;;		_display_downtime
  6899 ;;		_display_uptime
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text42
  6904  001C40                     __ptext42:
  6905                           	opt stack 0
  6906  001C40                     _lcd_right_shift:
  6907                           	opt stack 18
  6908                           
  6909                           ;LCD_4bit.h: 158: unsigned int p;
  6910                           ;LCD_4bit.h: 159: for(p=0;p<n;p++)
  6911                           
  6912                           ;incstack = 0
  6913  001C40  0E00               	movlw	0
  6914  001C42  6E15               	movwf	lcd_right_shift@p+1,c
  6915  001C44  0E00               	movlw	0
  6916  001C46  6E14               	movwf	lcd_right_shift@p,c
  6917  001C48  D006               	goto	i2l2321
  6918  001C4A                     i2l2317:
  6919                           
  6920                           ;LCD_4bit.h: 160: lcd_cmd(0b00010100);
  6921  001C4A  0E14               	movlw	20
  6922  001C4C  EC41  F00E         	call	i2_lcd_cmd
  6923  001C50  4A14               	infsnz	lcd_right_shift@p,f,c
  6924  001C52  2A15               	incf	lcd_right_shift@p+1,f,c
  6925  001C54  D000               	goto	i2l2321
  6926  001C56                     i2l2321:
  6927  001C56  5012               	movf	lcd_right_shift@n,w,c
  6928  001C58  5C14               	subwf	lcd_right_shift@p,w,c
  6929  001C5A  5013               	movf	lcd_right_shift@n+1,w,c
  6930  001C5C  5815               	subwfb	lcd_right_shift@p+1,w,c
  6931  001C5E  A0D8               	btfss	status,0,c
  6932  001C60  D7F4               	goto	i2l2317
  6933  001C62  0012               	return		;funcret
  6934  001C64                     __end_of_lcd_right_shift:
  6935                           	opt stack 0
  6936                           pclatu	equ	0xFFB
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           intcon2	equ	0xFF1
  6946                           indf0	equ	0xFEF
  6947                           postinc0	equ	0xFEE
  6948                           fsr0h	equ	0xFEA
  6949                           fsr0l	equ	0xFE9
  6950                           wreg	equ	0xFE8
  6951                           indf1	equ	0xFE7
  6952                           fsr1h	equ	0xFE2
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function i2_lcd_cmd *****************
  6960 ;; Defined at:
  6961 ;;		line 148 in file "LCD_4bit.h"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  cmd_value       1    wreg     unsigned char 
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  cmd_value       1   15[COMRAM] unsigned char 
  6966 ;;  lcd_cmd         1   16[COMRAM] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6976 ;;      Params:         0       0       0       0       0       0       0
  6977 ;;      Locals:         2       0       0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0
  6979 ;;      Totals:         2       0       0       0       0       0       0
  6980 ;;Total ram usage:        2 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    2
  6983 ;; This function calls:
  6984 ;;		i2_lcdcmd_nibble
  6985 ;; This function is called by:
  6986 ;;		_lcd_right_shift
  6987 ;;		i2_second_line
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text43
  6992  001C82                     __ptext43:
  6993                           	opt stack 0
  6994  001C82                     i2_lcd_cmd:
  6995                           	opt stack 18
  6996                           
  6997                           ;incstack = 0
  6998                           ;i2lcd_cmd@cmd_value stored from wreg
  6999  001C82  6E10               	movwf	i2lcd_cmd@cmd_value,c
  7000                           
  7001                           ;LCD_4bit.h: 150: unsigned char cmd_value1;
  7002                           ;LCD_4bit.h: 151: cmd_value1 = (cmd_value & 0xF0);
  7003  001C84  5010               	movf	i2lcd_cmd@cmd_value,w,c
  7004  001C86  0BF0               	andlw	240
  7005  001C88  6E11               	movwf	i2lcd_cmd@cmd_value1,c
  7006                           
  7007                           ;LCD_4bit.h: 152: lcdcmd_nibble(cmd_value1);
  7008  001C8A  5011               	movf	i2lcd_cmd@cmd_value1,w,c
  7009  001C8C  ECE8  F00A         	call	i2_lcdcmd_nibble
  7010                           
  7011                           ;LCD_4bit.h: 153: cmd_value1 = ((cmd_value<<4) & 0xF0);
  7012  001C90  3810               	swapf	i2lcd_cmd@cmd_value,w,c
  7013  001C92  0BF0               	andlw	240
  7014  001C94  0BF0               	andlw	240
  7015  001C96  6E11               	movwf	i2lcd_cmd@cmd_value1,c
  7016                           
  7017                           ;LCD_4bit.h: 154: lcdcmd_nibble(cmd_value1);
  7018  001C98  5011               	movf	i2lcd_cmd@cmd_value1,w,c
  7019  001C9A  ECE8  F00A         	call	i2_lcdcmd_nibble
  7020  001C9E  0012               	return		;funcret
  7021  001CA0                     __end_ofi2_lcd_cmd:
  7022                           	opt stack 0
  7023                           pclatu	equ	0xFFB
  7024                           pclath	equ	0xFFA
  7025                           tblptru	equ	0xFF8
  7026                           tblptrh	equ	0xFF7
  7027                           tblptrl	equ	0xFF6
  7028                           tablat	equ	0xFF5
  7029                           prodh	equ	0xFF4
  7030                           prodl	equ	0xFF3
  7031                           intcon	equ	0xFF2
  7032                           intcon2	equ	0xFF1
  7033                           indf0	equ	0xFEF
  7034                           postinc0	equ	0xFEE
  7035                           fsr0h	equ	0xFEA
  7036                           fsr0l	equ	0xFE9
  7037                           wreg	equ	0xFE8
  7038                           indf1	equ	0xFE7
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function i2_lcdcmd_nibble *****************
  7047 ;; Defined at:
  7048 ;;		line 172 in file "LCD_4bit.h"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  cmdout          1    wreg     unsigned char 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  cmdout          1   14[COMRAM] unsigned char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7062 ;;      Params:         0       0       0       0       0       0       0
  7063 ;;      Locals:         1       0       0       0       0       0       0
  7064 ;;      Temps:          1       0       0       0       0       0       0
  7065 ;;      Totals:         2       0       0       0       0       0       0
  7066 ;;Total ram usage:        2 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    1
  7069 ;; This function calls:
  7070 ;;		i2_lcd_delay
  7071 ;; This function is called by:
  7072 ;;		i2_lcd_cmd
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text44
  7077  0015D0                     __ptext44:
  7078                           	opt stack 0
  7079  0015D0                     i2_lcdcmd_nibble:
  7080                           	opt stack 18
  7081                           
  7082                           ;incstack = 0
  7083                           ;i2lcdcmd_nibble@cmdout stored from wreg
  7084  0015D0  6E0F               	movwf	i2lcdcmd_nibble@cmdout,c
  7085                           
  7086                           ;LCD_4bit.h: 175: LATBbits.LATB4=((cmdout&0x10)? 1:0);
  7087  0015D2  A80F               	btfss	i2lcdcmd_nibble@cmdout,4,c
  7088  0015D4  D003               	goto	i2u158_40
  7089  0015D6  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7090  0015D8  2A0E               	incf	??i2_lcdcmd_nibble& (0+255),f,c
  7091  0015DA  D001               	goto	i2u159_48
  7092  0015DC                     i2u158_40:
  7093  0015DC  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7094  0015DE                     i2u159_48:
  7095  0015DE  3A0E               	swapf	??i2_lcdcmd_nibble,f,c
  7096  0015E0  508A               	movf	3978,w,c	;volatile
  7097  0015E2  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7098  0015E4  0BEF               	andlw	-17
  7099  0015E6  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7100  0015E8  6E8A               	movwf	3978,c	;volatile
  7101                           
  7102                           ;LCD_4bit.h: 176: LATBbits.LATB5=((cmdout&0x20)? 1:0);
  7103  0015EA  AA0F               	btfss	i2lcdcmd_nibble@cmdout,5,c
  7104  0015EC  D003               	goto	i2u160_40
  7105  0015EE  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7106  0015F0  2A0E               	incf	??i2_lcdcmd_nibble& (0+255),f,c
  7107  0015F2  D001               	goto	i2u161_48
  7108  0015F4                     i2u160_40:
  7109  0015F4  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7110  0015F6                     i2u161_48:
  7111  0015F6  3A0E               	swapf	??i2_lcdcmd_nibble,f,c
  7112  0015F8  460E               	rlncf	??i2_lcdcmd_nibble,f,c
  7113  0015FA  508A               	movf	3978,w,c	;volatile
  7114  0015FC  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7115  0015FE  0BDF               	andlw	-33
  7116  001600  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7117  001602  6E8A               	movwf	3978,c	;volatile
  7118                           
  7119                           ;LCD_4bit.h: 177: LATBbits.LATB6=((cmdout&0x40)? 1:0);
  7120  001604  AC0F               	btfss	i2lcdcmd_nibble@cmdout,6,c
  7121  001606  D003               	goto	i2u162_40
  7122  001608  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7123  00160A  2A0E               	incf	??i2_lcdcmd_nibble& (0+255),f,c
  7124  00160C  D001               	goto	i2u163_48
  7125  00160E                     i2u162_40:
  7126  00160E  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7127  001610                     i2u163_48:
  7128  001610  3A0E               	swapf	??i2_lcdcmd_nibble,f,c
  7129  001612  460E               	rlncf	??i2_lcdcmd_nibble,f,c
  7130  001614  460E               	rlncf	??i2_lcdcmd_nibble,f,c
  7131  001616  508A               	movf	3978,w,c	;volatile
  7132  001618  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7133  00161A  0BBF               	andlw	-65
  7134  00161C  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7135  00161E  6E8A               	movwf	3978,c	;volatile
  7136                           
  7137                           ;LCD_4bit.h: 178: LATBbits.LATB7=((cmdout&0x80)? 1:0);
  7138  001620  AE0F               	btfss	i2lcdcmd_nibble@cmdout,7,c
  7139  001622  D003               	goto	i2u164_40
  7140  001624  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7141  001626  2A0E               	incf	??i2_lcdcmd_nibble& (0+255),f,c
  7142  001628  D001               	goto	i2u165_48
  7143  00162A                     i2u164_40:
  7144  00162A  6A0E               	clrf	??i2_lcdcmd_nibble& (0+255),c
  7145  00162C                     i2u165_48:
  7146  00162C  320E               	rrcf	??i2_lcdcmd_nibble,f,c
  7147  00162E  320E               	rrcf	??i2_lcdcmd_nibble,f,c
  7148  001630  508A               	movf	3978,w,c	;volatile
  7149  001632  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7150  001634  0B7F               	andlw	-129
  7151  001636  180E               	xorwf	??i2_lcdcmd_nibble,w,c
  7152  001638  6E8A               	movwf	3978,c	;volatile
  7153                           
  7154                           ;LCD_4bit.h: 179: LATBbits.LB2=0;
  7155  00163A  948A               	bcf	3978,2,c	;volatile
  7156                           
  7157                           ;LCD_4bit.h: 181: LATBbits.LB3=1;LATBbits.LB2=0;LATBbits.LB2=0;LATBbits.LB2=0;
  7158  00163C  868A               	bsf	3978,3,c	;volatile
  7159  00163E  948A               	bcf	3978,2,c	;volatile
  7160  001640  948A               	bcf	3978,2,c	;volatile
  7161  001642  948A               	bcf	3978,2,c	;volatile
  7162                           
  7163                           ;LCD_4bit.h: 182: LATBbits.LB3=0;
  7164  001644  968A               	bcf	3978,3,c	;volatile
  7165                           
  7166                           ;LCD_4bit.h: 183: lcd_delay(20);
  7167  001646  0E14               	movlw	20
  7168  001648  6E01               	movwf	i2lcd_delay@temp,c
  7169  00164A  0E00               	movlw	0
  7170  00164C  6E02               	movwf	i2lcd_delay@temp+1,c
  7171  00164E  0E00               	movlw	0
  7172  001650  6E03               	movwf	i2lcd_delay@temp+2,c
  7173  001652  0E00               	movlw	0
  7174  001654  6E04               	movwf	i2lcd_delay@temp+3,c
  7175  001656  ECF2  F00B         	call	i2_lcd_delay	;wreg free
  7176  00165A  0012               	return		;funcret
  7177  00165C                     __end_ofi2_lcdcmd_nibble:
  7178                           	opt stack 0
  7179                           pclatu	equ	0xFFB
  7180                           pclath	equ	0xFFA
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           intcon	equ	0xFF2
  7188                           intcon2	equ	0xFF1
  7189                           indf0	equ	0xFEF
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           indf1	equ	0xFE7
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function i2_lcd_delay *****************
  7203 ;; Defined at:
  7204 ;;		line 106 in file "LCD_4bit.h"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  temp            4    0[COMRAM] long 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  lcd_delay       4    9[COMRAM] long 
  7209 ;;  lcd_delay       4    5[COMRAM] long 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg, status,2, status,0
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7219 ;;      Params:         4       0       0       0       0       0       0
  7220 ;;      Locals:         8       0       0       0       0       0       0
  7221 ;;      Temps:          1       0       0       0       0       0       0
  7222 ;;      Totals:        13       0       0       0       0       0       0
  7223 ;;Total ram usage:       13 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		i2_lcdcmd_nibble
  7229 ;;		i2_lcddata_nibble
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text45
  7234  0017E4                     __ptext45:
  7235                           	opt stack 0
  7236  0017E4                     i2_lcd_delay:
  7237                           	opt stack 18
  7238                           
  7239                           ;LCD_4bit.h: 107: long i,j;
  7240                           ;LCD_4bit.h: 108: for(j=0;j<temp;j++)
  7241                           
  7242                           ;incstack = 0
  7243  0017E4  0E00               	movlw	0
  7244  0017E6  6E06               	movwf	i2lcd_delay@j,c
  7245  0017E8  0E00               	movlw	0
  7246  0017EA  6E07               	movwf	i2lcd_delay@j+1,c
  7247  0017EC  0E00               	movlw	0
  7248  0017EE  6E08               	movwf	i2lcd_delay@j+2,c
  7249  0017F0  0E00               	movlw	0
  7250  0017F2  6E09               	movwf	i2lcd_delay@j+3,c
  7251  0017F4  D022               	goto	i2l193
  7252  0017F6                     i2l2061:
  7253                           
  7254                           ;LCD_4bit.h: 109: for( i=0;i<150;i++)
  7255  0017F6  0E00               	movlw	0
  7256  0017F8  6E0A               	movwf	i2lcd_delay@i,c
  7257  0017FA  0E00               	movlw	0
  7258  0017FC  6E0B               	movwf	i2lcd_delay@i+1,c
  7259  0017FE  0E00               	movlw	0
  7260  001800  6E0C               	movwf	i2lcd_delay@i+2,c
  7261  001802  0E00               	movlw	0
  7262  001804  6E0D               	movwf	i2lcd_delay@i+3,c
  7263  001806                     i2l2063:
  7264  001806  BE0D               	btfsc	i2lcd_delay@i+3,7,c
  7265  001808  D00A               	goto	i2l2067
  7266  00180A  500D               	movf	i2lcd_delay@i+3,w,c
  7267  00180C  100C               	iorwf	i2lcd_delay@i+2,w,c
  7268  00180E  100B               	iorwf	i2lcd_delay@i+1,w,c
  7269  001810  E10E               	bnz	i2l2069
  7270  001812  0E96               	movlw	150
  7271  001814  5C0A               	subwf	i2lcd_delay@i,w,c
  7272  001816  B0D8               	btfsc	status,0,c
  7273  001818  D00A               	goto	i2l2069
  7274  00181A  D001               	goto	i2l2067
  7275  00181C  D008               	goto	i2l2069
  7276  00181E                     i2l2067:
  7277                           
  7278                           ;LCD_4bit.h: 110: ;
  7279  00181E  0E01               	movlw	1
  7280  001820  260A               	addwf	i2lcd_delay@i,f,c
  7281  001822  0E00               	movlw	0
  7282  001824  220B               	addwfc	i2lcd_delay@i+1,f,c
  7283  001826  220C               	addwfc	i2lcd_delay@i+2,f,c
  7284  001828  220D               	addwfc	i2lcd_delay@i+3,f,c
  7285  00182A  D7ED               	goto	i2l2063
  7286  00182C  D000               	goto	i2l2069
  7287  00182E                     i2l2069:
  7288  00182E  0E01               	movlw	1
  7289  001830  2606               	addwf	i2lcd_delay@j,f,c
  7290  001832  0E00               	movlw	0
  7291  001834  2207               	addwfc	i2lcd_delay@j+1,f,c
  7292  001836  2208               	addwfc	i2lcd_delay@j+2,f,c
  7293  001838  2209               	addwfc	i2lcd_delay@j+3,f,c
  7294  00183A                     i2l193:
  7295  00183A  5001               	movf	i2lcd_delay@temp,w,c
  7296  00183C  5C06               	subwf	i2lcd_delay@j,w,c
  7297  00183E  5002               	movf	i2lcd_delay@temp+1,w,c
  7298  001840  5807               	subwfb	i2lcd_delay@j+1,w,c
  7299  001842  5003               	movf	i2lcd_delay@temp+2,w,c
  7300  001844  5808               	subwfb	i2lcd_delay@j+2,w,c
  7301  001846  5009               	movf	i2lcd_delay@j+3,w,c
  7302  001848  0A80               	xorlw	128
  7303  00184A  6E05               	movwf	??i2_lcd_delay& (0+255),c
  7304  00184C  5004               	movf	i2lcd_delay@temp+3,w,c
  7305  00184E  0A80               	xorlw	128
  7306  001850  5805               	subwfb	??i2_lcd_delay& (0+255),w,c
  7307  001852  A0D8               	btfss	status,0,c
  7308  001854  D7D0               	goto	i2l2061
  7309  001856  0012               	return		;funcret
  7310  001858                     __end_ofi2_lcd_delay:
  7311                           	opt stack 0
  7312                           pclatu	equ	0xFFB
  7313                           pclath	equ	0xFFA
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           intcon	equ	0xFF2
  7321                           intcon2	equ	0xFF1
  7322                           indf0	equ	0xFEF
  7323                           postinc0	equ	0xFEE
  7324                           fsr0h	equ	0xFEA
  7325                           fsr0l	equ	0xFE9
  7326                           wreg	equ	0xFE8
  7327                           indf1	equ	0xFE7
  7328                           fsr1h	equ	0xFE2
  7329                           fsr1l	equ	0xFE1
  7330                           indf2	equ	0xFDF
  7331                           fsr2h	equ	0xFDA
  7332                           fsr2l	equ	0xFD9
  7333                           status	equ	0xFD8
  7334                           
  7335 ;; *************** function ___awmod *****************
  7336 ;; Defined at:
  7337 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  dividend        2    8[COMRAM] int 
  7340 ;;  divisor         2   10[COMRAM] int 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  sign            1   13[COMRAM] unsigned char 
  7343 ;;  counter         1   12[COMRAM] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  2    8[COMRAM] int 
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7353 ;;      Params:         4       0       0       0       0       0       0
  7354 ;;      Locals:         2       0       0       0       0       0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0
  7356 ;;      Totals:         6       0       0       0       0       0       0
  7357 ;;Total ram usage:        6 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_display_downtime
  7363 ;;		_display_uptime
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text46
  7368  001762                     __ptext46:
  7369                           	opt stack 0
  7370  001762                     ___awmod:
  7371                           	opt stack 21
  7372                           
  7373                           ;incstack = 0
  7374  001762  0E00               	movlw	0
  7375  001764  6E0E               	movwf	___awmod@sign,c
  7376  001766  AE0A               	btfss	___awmod@dividend+1,7,c
  7377  001768  D007               	goto	i2l2417
  7378  00176A  6C09               	negf	___awmod@dividend,c
  7379  00176C  1E0A               	comf	___awmod@dividend+1,f,c
  7380  00176E  B0D8               	btfsc	status,0,c
  7381  001770  2A0A               	incf	___awmod@dividend+1,f,c
  7382  001772  0E01               	movlw	1
  7383  001774  6E0E               	movwf	___awmod@sign,c
  7384  001776  D000               	goto	i2l2417
  7385  001778                     i2l2417:
  7386  001778  AE0C               	btfss	___awmod@divisor+1,7,c
  7387  00177A  D005               	goto	i2l2421
  7388  00177C  6C0B               	negf	___awmod@divisor,c
  7389  00177E  1E0C               	comf	___awmod@divisor+1,f,c
  7390  001780  B0D8               	btfsc	status,0,c
  7391  001782  2A0C               	incf	___awmod@divisor+1,f,c
  7392  001784  D000               	goto	i2l2421
  7393  001786                     i2l2421:
  7394  001786  500B               	movf	___awmod@divisor,w,c
  7395  001788  100C               	iorwf	___awmod@divisor+1,w,c
  7396  00178A  B4D8               	btfsc	status,2,c
  7397  00178C  D01D               	goto	i2l2437
  7398  00178E  0E01               	movlw	1
  7399  001790  6E0D               	movwf	___awmod@counter,c
  7400  001792  D005               	goto	i2l2427
  7401  001794                     i2l2425:
  7402  001794  90D8               	bcf	status,0,c
  7403  001796  360B               	rlcf	___awmod@divisor,f,c
  7404  001798  360C               	rlcf	___awmod@divisor+1,f,c
  7405  00179A  2A0D               	incf	___awmod@counter,f,c
  7406  00179C  D000               	goto	i2l2427
  7407  00179E                     i2l2427:
  7408  00179E  BE0C               	btfsc	___awmod@divisor+1,7,c
  7409  0017A0  D002               	goto	i2l2429
  7410  0017A2  D7F8               	goto	i2l2425
  7411  0017A4  D000               	goto	i2l2429
  7412  0017A6                     i2l2429:
  7413  0017A6  500B               	movf	___awmod@divisor,w,c
  7414  0017A8  5C09               	subwf	___awmod@dividend,w,c
  7415  0017AA  500C               	movf	___awmod@divisor+1,w,c
  7416  0017AC  580A               	subwfb	___awmod@dividend+1,w,c
  7417  0017AE  A0D8               	btfss	status,0,c
  7418  0017B0  D005               	goto	i2l2433
  7419  0017B2  500B               	movf	___awmod@divisor,w,c
  7420  0017B4  5E09               	subwf	___awmod@dividend,f,c
  7421  0017B6  500C               	movf	___awmod@divisor+1,w,c
  7422  0017B8  5A0A               	subwfb	___awmod@dividend+1,f,c
  7423  0017BA  D000               	goto	i2l2433
  7424  0017BC                     i2l2433:
  7425  0017BC  90D8               	bcf	status,0,c
  7426  0017BE  320C               	rrcf	___awmod@divisor+1,f,c
  7427  0017C0  320B               	rrcf	___awmod@divisor,f,c
  7428  0017C2  2E0D               	decfsz	___awmod@counter,f,c
  7429  0017C4  D7F0               	goto	i2l2429
  7430  0017C6  D000               	goto	i2l2437
  7431  0017C8                     i2l2437:
  7432  0017C8  500E               	movf	___awmod@sign,w,c
  7433  0017CA  B4D8               	btfsc	status,2,c
  7434  0017CC  D005               	goto	i2l2441
  7435  0017CE  6C09               	negf	___awmod@dividend,c
  7436  0017D0  1E0A               	comf	___awmod@dividend+1,f,c
  7437  0017D2  B0D8               	btfsc	status,0,c
  7438  0017D4  2A0A               	incf	___awmod@dividend+1,f,c
  7439  0017D6  D000               	goto	i2l2441
  7440  0017D8                     i2l2441:
  7441  0017D8  C009  F009         	movff	___awmod@dividend,?___awmod
  7442  0017DC  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  7443  0017E0  0012               	return	
  7444  0017E2  0012               	return		;funcret
  7445  0017E4                     __end_of___awmod:
  7446                           	opt stack 0
  7447                           pclatu	equ	0xFFB
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon2	equ	0xFF1
  7457                           indf0	equ	0xFEF
  7458                           postinc0	equ	0xFEE
  7459                           fsr0h	equ	0xFEA
  7460                           fsr0l	equ	0xFE9
  7461                           wreg	equ	0xFE8
  7462                           indf1	equ	0xFE7
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           fsr2h	equ	0xFDA
  7467                           fsr2l	equ	0xFD9
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function ___awdiv *****************
  7471 ;; Defined at:
  7472 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  dividend        2    0[COMRAM] int 
  7475 ;;  divisor         2    2[COMRAM] int 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  quotient        2    6[COMRAM] int 
  7478 ;;  sign            1    5[COMRAM] unsigned char 
  7479 ;;  counter         1    4[COMRAM] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  2    0[COMRAM] int 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7489 ;;      Params:         4       0       0       0       0       0       0
  7490 ;;      Locals:         4       0       0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0
  7492 ;;      Totals:         8       0       0       0       0       0       0
  7493 ;;Total ram usage:        8 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_display_downtime
  7499 ;;		_display_uptime
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text47
  7504  001300                     __ptext47:
  7505                           	opt stack 0
  7506  001300                     ___awdiv:
  7507                           	opt stack 21
  7508                           
  7509                           ;incstack = 0
  7510  001300  0E00               	movlw	0
  7511  001302  6E06               	movwf	___awdiv@sign,c
  7512  001304  AE04               	btfss	___awdiv@divisor+1,7,c
  7513  001306  D007               	goto	i2l2373
  7514  001308  6C03               	negf	___awdiv@divisor,c
  7515  00130A  1E04               	comf	___awdiv@divisor+1,f,c
  7516  00130C  B0D8               	btfsc	status,0,c
  7517  00130E  2A04               	incf	___awdiv@divisor+1,f,c
  7518  001310  0E01               	movlw	1
  7519  001312  6E06               	movwf	___awdiv@sign,c
  7520  001314  D000               	goto	i2l2373
  7521  001316                     i2l2373:
  7522  001316  AE02               	btfss	___awdiv@dividend+1,7,c
  7523  001318  D007               	goto	i2l2379
  7524  00131A  6C01               	negf	___awdiv@dividend,c
  7525  00131C  1E02               	comf	___awdiv@dividend+1,f,c
  7526  00131E  B0D8               	btfsc	status,0,c
  7527  001320  2A02               	incf	___awdiv@dividend+1,f,c
  7528  001322  0E01               	movlw	1
  7529  001324  1A06               	xorwf	___awdiv@sign,f,c
  7530  001326  D000               	goto	i2l2379
  7531  001328                     i2l2379:
  7532  001328  0E00               	movlw	0
  7533  00132A  6E08               	movwf	___awdiv@quotient+1,c
  7534  00132C  0E00               	movlw	0
  7535  00132E  6E07               	movwf	___awdiv@quotient,c
  7536  001330  5003               	movf	___awdiv@divisor,w,c
  7537  001332  1004               	iorwf	___awdiv@divisor+1,w,c
  7538  001334  B4D8               	btfsc	status,2,c
  7539  001336  D021               	goto	i2l2401
  7540  001338  0E01               	movlw	1
  7541  00133A  6E05               	movwf	___awdiv@counter,c
  7542  00133C  D005               	goto	i2l2387
  7543  00133E                     i2l2385:
  7544  00133E  90D8               	bcf	status,0,c
  7545  001340  3603               	rlcf	___awdiv@divisor,f,c
  7546  001342  3604               	rlcf	___awdiv@divisor+1,f,c
  7547  001344  2A05               	incf	___awdiv@counter,f,c
  7548  001346  D000               	goto	i2l2387
  7549  001348                     i2l2387:
  7550  001348  BE04               	btfsc	___awdiv@divisor+1,7,c
  7551  00134A  D002               	goto	i2l2389
  7552  00134C  D7F8               	goto	i2l2385
  7553  00134E  D000               	goto	i2l2389
  7554  001350                     i2l2389:
  7555  001350  90D8               	bcf	status,0,c
  7556  001352  3607               	rlcf	___awdiv@quotient,f,c
  7557  001354  3608               	rlcf	___awdiv@quotient+1,f,c
  7558  001356  5003               	movf	___awdiv@divisor,w,c
  7559  001358  5C01               	subwf	___awdiv@dividend,w,c
  7560  00135A  5004               	movf	___awdiv@divisor+1,w,c
  7561  00135C  5802               	subwfb	___awdiv@dividend+1,w,c
  7562  00135E  A0D8               	btfss	status,0,c
  7563  001360  D006               	goto	i2l2397
  7564  001362  5003               	movf	___awdiv@divisor,w,c
  7565  001364  5E01               	subwf	___awdiv@dividend,f,c
  7566  001366  5004               	movf	___awdiv@divisor+1,w,c
  7567  001368  5A02               	subwfb	___awdiv@dividend+1,f,c
  7568  00136A  8007               	bsf	___awdiv@quotient,0,c
  7569  00136C  D000               	goto	i2l2397
  7570  00136E                     i2l2397:
  7571  00136E  90D8               	bcf	status,0,c
  7572  001370  3204               	rrcf	___awdiv@divisor+1,f,c
  7573  001372  3203               	rrcf	___awdiv@divisor,f,c
  7574  001374  2E05               	decfsz	___awdiv@counter,f,c
  7575  001376  D7EC               	goto	i2l2389
  7576  001378  D000               	goto	i2l2401
  7577  00137A                     i2l2401:
  7578  00137A  5006               	movf	___awdiv@sign,w,c
  7579  00137C  B4D8               	btfsc	status,2,c
  7580  00137E  D005               	goto	i2l2405
  7581  001380  6C07               	negf	___awdiv@quotient,c
  7582  001382  1E08               	comf	___awdiv@quotient+1,f,c
  7583  001384  B0D8               	btfsc	status,0,c
  7584  001386  2A08               	incf	___awdiv@quotient+1,f,c
  7585  001388  D000               	goto	i2l2405
  7586  00138A                     i2l2405:
  7587  00138A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7588  00138E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7589  001392  0012               	return	
  7590  001394  0012               	return		;funcret
  7591  001396                     __end_of___awdiv:
  7592                           	opt stack 0
  7593                           pclatu	equ	0xFFB
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           indf0	equ	0xFEF
  7604                           postinc0	equ	0xFEE
  7605                           fsr0h	equ	0xFEA
  7606                           fsr0l	equ	0xFE9
  7607                           wreg	equ	0xFE8
  7608                           indf1	equ	0xFE7
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           fsr2h	equ	0xFDA
  7613                           fsr2l	equ	0xFD9
  7614                           status	equ	0xFD8
  7615                           
  7616 ;; *************** function _Reload_Timer *****************
  7617 ;; Defined at:
  7618 ;;		line 105 in file "TIMER_45k222.h"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		wreg, status,2
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7632 ;;      Params:         0       0       0       0       0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0       0       0
  7635 ;;      Totals:         0       0       0       0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_high_isr
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text48
  7646  001D3C                     __ptext48:
  7647                           	opt stack 0
  7648  001D3C                     _Reload_Timer:
  7649                           	opt stack 23
  7650                           
  7651                           ;TIMER_45k222.h: 106: TMR0H = 0xC2;
  7652                           
  7653                           ;incstack = 0
  7654  001D3C  0EC2               	movlw	194
  7655  001D3E  6ED7               	movwf	4055,c	;volatile
  7656                           
  7657                           ;TIMER_45k222.h: 107: TMR0L = 0xF7;
  7658  001D40  0EF7               	movlw	247
  7659  001D42  6ED6               	movwf	4054,c	;volatile
  7660  001D44  0012               	return		;funcret
  7661  001D46                     __end_of_Reload_Timer:
  7662                           	opt stack 0
  7663                           pclatu	equ	0xFFB
  7664                           pclath	equ	0xFFA
  7665                           tblptru	equ	0xFF8
  7666                           tblptrh	equ	0xFF7
  7667                           tblptrl	equ	0xFF6
  7668                           tablat	equ	0xFF5
  7669                           prodh	equ	0xFF4
  7670                           prodl	equ	0xFF3
  7671                           intcon	equ	0xFF2
  7672                           intcon2	equ	0xFF1
  7673                           indf0	equ	0xFEF
  7674                           postinc0	equ	0xFEE
  7675                           fsr0h	equ	0xFEA
  7676                           fsr0l	equ	0xFE9
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           fsr1h	equ	0xFE2
  7680                           fsr1l	equ	0xFE1
  7681                           indf2	equ	0xFDF
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           pclatu	equ	0xFFB
  7686                           pclath	equ	0xFFA
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           intcon2	equ	0xFF1
  7695                           indf0	equ	0xFEF
  7696                           postinc0	equ	0xFEE
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           indf1	equ	0xFE7
  7701                           fsr1h	equ	0xFE2
  7702                           fsr1l	equ	0xFE1
  7703                           indf2	equ	0xFDF
  7704                           fsr2h	equ	0xFDA
  7705                           fsr2l	equ	0xFD9
  7706                           status	equ	0xFD8
  7707                           
  7708                           	psect	rparam
  7709  0000                     pclatu	equ	0xFFB
  7710                           pclath	equ	0xFFA
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           intcon	equ	0xFF2
  7718                           intcon2	equ	0xFF1
  7719                           indf0	equ	0xFEF
  7720                           postinc0	equ	0xFEE
  7721                           fsr0h	equ	0xFEA
  7722                           fsr0l	equ	0xFE9
  7723                           wreg	equ	0xFE8
  7724                           indf1	equ	0xFE7
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           fsr2h	equ	0xFDA
  7729                           fsr2l	equ	0xFD9
  7730                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    0
    Data        2
    BSS         72
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     43      73
    BANK0           160     35      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    dis_string@wrptr	PTR unsigned char  size(2) Largest target is 17
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> digits(COMRAM[4]), STR_7(CODE[6]), time_lcd(COMRAM[5]), STR_6(CODE[6]), 
		 -> STR_5(CODE[17]), STR_4(CODE[14]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), rx_position(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _second_inc->_display_downtime
    _display_downtime->i2_dis_string
    i2_second_line->i2_lcd_cmd
    i2_dis_string->i2_dis_char
    i2_dis_char->i2_lcddata_nibble
    i2_lcddata_nibble->i2_lcd_delay
    _lcd_right_shift->i2_lcd_cmd
    i2_lcd_cmd->i2_lcdcmd_nibble
    i2_lcdcmd_nibble->i2_lcd_delay
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    _ProcessNMEA->_Shift
    _RxI1->_ProcessStepperData
    _Timer0_Init->_dis_string
    _ProcessStepperData->_ProcessSteps
    _ProcessSteps->_FullStepsNeg
    _ProcessSteps->_FullStepsPos
    _FullStepsPos->_delay
    _FullStepsNeg->_delay
    _Init->_dis_string
    _lcd_ini->_lcd_cmd
    _GetReset->_delay
    _Compressor_Timer->_dis_string
    _tx1_byte_n->_tx1_byte
    _first_line->_lcd_cmd
    _clr_scr->_lcd_cmd
    _ADXL_Display->_dis_string
    _second_line->_lcd_cmd
    _lcd_cmd->_lcdcmd_nibble
    _lcdcmd_nibble->_lcd_delay
    _dis_string->_dis_char
    _dis_char->_lcddata_nibble
    _lcddata_nibble->_lcd_delay
    ___lwmod->___lwdiv

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   42272
                       _ADXL_Display
                          _ADXL_Read
                   _Compressor_Timer
                           _GetReset
                               _Init
                         _Open_UART1
                         _Open_UART2
                               _RxI1
                               _RxI2
                            _clr_scr
                         _dis_string
                         _first_line
 ---------------------------------------------------------------------------------
 (1) _RxI2                                                 0     0      0     164
                        _ProcessNMEA
 ---------------------------------------------------------------------------------
 (2) _ProcessNMEA                                          0     0      0     164
                              _Shift
 ---------------------------------------------------------------------------------
 (3) _Shift                                                7     7      0     164
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _RxI1                                                 0     0      0   17996
                          _ADXL_Init
                 _ProcessStepperData
                        _Timer0_Init
                         _dis_string
                        _second_line
 ---------------------------------------------------------------------------------
 (2) _Timer0_Init                                          0     0      0    4318
                         _dis_string
                         _first_line
 ---------------------------------------------------------------------------------
 (2) _ProcessStepperData                                   5     5      0    9360
                                             30 BANK0      5     5      0
                       _ProcessSteps
                             ___wmul
                            _clr_scr
                           _dis_char
                         _dis_string
                         _first_line
                        _second_line
                           _tx1_byte
                         _tx1_byte_n
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     694
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ProcessSteps                                        24    20      4    1375
                                              6 BANK0     24    20      4
                       _FullStepsNeg
                       _FullStepsPos
 ---------------------------------------------------------------------------------
 (4) _FullStepsPos                                         2     0      2     463
                                              4 BANK0      2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (4) _FullStepsNeg                                         2     0      2     463
                                              4 BANK0      2     0      2
                              _delay
 ---------------------------------------------------------------------------------
 (2) _ADXL_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Open_UART2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Open_UART1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0    5922
                       _Stepper_Init
                            _clr_scr
                         _dis_string
                            _lcd_ini
 ---------------------------------------------------------------------------------
 (2) _lcd_ini                                              2     2      0    1604
                            _lcd_cmd
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (2) _Stepper_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetReset                                             0     0      0     142
                              _delay
 ---------------------------------------------------------------------------------
 (1) _Compressor_Timer                                     0     0      0    6411
                            _clr_scr
                              _delay
                         _dis_string
                         _first_line
                        _second_line
                           _tx1_byte
                         _tx1_byte_n
 ---------------------------------------------------------------------------------
 (3) _tx1_byte_n                                           1     1      0      62
                                              1 BANK0      1     1      0
                           _tx1_byte
 ---------------------------------------------------------------------------------
 (4) _tx1_byte                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _first_line                                           0     0      0     929
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (5) _delay                                                4     4      0     142
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _clr_scr                                              0     0      0     929
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _ADXL_Read                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADXL_Display                                         0     0      0    6390
                            ___lwdiv
                            ___lwmod
                         _dis_string
                          _lcd_delay
                        _second_line
 ---------------------------------------------------------------------------------
 (2) _second_line                                          0     0      0     929
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     929
                                             15 BANK0      2     2      0
                      _lcdcmd_nibble
 ---------------------------------------------------------------------------------
 (3) _lcdcmd_nibble                                        2     2      0     799
                                             13 BANK0      2     2      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _dis_string                                          10     7      3    3389
                                             17 BANK0     10     7      3
                           _dis_char
 ---------------------------------------------------------------------------------
 (2) _dis_char                                             2     2      0     929
                                             15 BANK0      2     2      0
                     _lcddata_nibble
 ---------------------------------------------------------------------------------
 (3) _lcddata_nibble                                       2     2      0     799
                                             13 BANK0      2     2      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (4) _lcd_delay                                           13     9      4     675
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     694
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     703
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0    3468
                                             29 COMRAM    14    14      0
                       _Reload_Timer
                         _second_inc
 ---------------------------------------------------------------------------------
 (8) _second_inc                                           0     0      0    3468
                   _display_downtime
 ---------------------------------------------------------------------------------
 (9) _display_downtime                                     2     2      0    3468
                                             27 COMRAM     2     2      0
                            ___awdiv
                            ___awmod
                    _lcd_right_shift
                       i2_dis_string
                      i2_second_line
 ---------------------------------------------------------------------------------
 (10) i2_second_line                                       0     0      0     322
                          i2_lcd_cmd
 ---------------------------------------------------------------------------------
 (10) i2_dis_string                                       10     7      3     518
                                             17 COMRAM    10     7      3
                         i2_dis_char
 ---------------------------------------------------------------------------------
 (11) i2_dis_char                                          2     2      0     322
                                             15 COMRAM     2     2      0
                   i2_lcddata_nibble
 ---------------------------------------------------------------------------------
 (12) i2_lcddata_nibble                                    2     2      0     232
                                             13 COMRAM     2     2      0
                        i2_lcd_delay
 ---------------------------------------------------------------------------------
 (10) _lcd_right_shift                                     4     2      2     496
                                             17 COMRAM     4     2      2
                          i2_lcd_cmd
 ---------------------------------------------------------------------------------
 (11) i2_lcd_cmd                                           2     2      0     322
                                             15 COMRAM     2     2      0
                    i2_lcdcmd_nibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdcmd_nibble                                     2     2      0     232
                                             13 COMRAM     2     2      0
                        i2_lcd_delay
 ---------------------------------------------------------------------------------
 (13) i2_lcd_delay                                        13     9      4     144
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4    1320
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             8     4      4     812
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _Reload_Timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL_Display
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _dis_string
       _dis_char
         _lcddata_nibble
           _lcd_delay
     _lcd_delay
     _second_line
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
   _ADXL_Read
   _Compressor_Timer
     _clr_scr
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
     _delay
     _dis_string
       _dis_char
         _lcddata_nibble
           _lcd_delay
     _first_line
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
     _second_line
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
     _tx1_byte
     _tx1_byte_n
       _tx1_byte
   _GetReset
     _delay
   _Init
     _Stepper_Init
     _clr_scr
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
     _dis_string
       _dis_char
         _lcddata_nibble
           _lcd_delay
     _lcd_ini
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
       _lcd_delay
   _Open_UART1
   _Open_UART2
   _RxI1
     _ADXL_Init
     _ProcessStepperData
       _ProcessSteps
         _FullStepsNeg
           _delay
         _FullStepsPos
           _delay
       ___wmul
       _clr_scr
         _lcd_cmd
           _lcdcmd_nibble
             _lcd_delay
       _dis_char
         _lcddata_nibble
           _lcd_delay
       _dis_string
         _dis_char
           _lcddata_nibble
             _lcd_delay
       _first_line
         _lcd_cmd
           _lcdcmd_nibble
             _lcd_delay
       _second_line
         _lcd_cmd
           _lcdcmd_nibble
             _lcd_delay
       _tx1_byte
       _tx1_byte_n
         _tx1_byte
     _Timer0_Init
       _dis_string
         _dis_char
           _lcddata_nibble
             _lcd_delay
       _first_line
         _lcd_cmd
           _lcdcmd_nibble
             _lcd_delay
     _dis_string
       _dis_char
         _lcddata_nibble
           _lcd_delay
     _second_line
       _lcd_cmd
         _lcdcmd_nibble
           _lcd_delay
   _RxI2
     _ProcessNMEA
       _Shift
   _clr_scr
     _lcd_cmd
       _lcdcmd_nibble
         _lcd_delay
   _dis_string
     _dis_char
       _lcddata_nibble
         _lcd_delay
   _first_line
     _lcd_cmd
       _lcdcmd_nibble
         _lcd_delay

 _high_isr (ROOT)
   _Reload_Timer
   _second_inc
     _display_downtime
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _lcd_right_shift
         i2_lcd_cmd
           i2_lcdcmd_nibble
             i2_lcd_delay
       i2_dis_string
         i2_dis_char
           i2_lcddata_nibble
             i2_lcd_delay
       i2_second_line
         i2_lcd_cmd
           i2_lcdcmd_nibble
             i2_lcd_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      52       4       51.3%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     2B      49       1       76.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B       9        0.0%
DATA                 0      0      9B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Apr 16 15:53:48 2016

       __end_of_ADXL_Display 0FA8                            _i 0084                            _j 0086  
             ?_lcdcmd_nibble 0001                 ___awdiv@sign 0006          ___wmul@multiplicand 0091  
                dis_string@i 00A8           dis_char@data_value 009E                          l122 1D36  
                        l320 0C6E                          l340 0D44                          l316 0C02  
                        l341 0D68                          l421 147C                          l342 0D8C  
                        l318 0C26                          l414 142C                          l430 11EE  
                        l319 0C4A                          l423 14B0                          l416 144A  
                        l193 12CE                          l417 1468                          l274 18B2  
                        l338 0D20                          l291 1406                          l276 18C8  
                        l444 11BE                          l437 1260                          l390 1B7A  
                        l358 1676                          l294 13A8                          l296 13B8  
                        l297 13C8                          l298 13D8                          l990 1758  
         __size_of_ADXL_Init 0014           __size_of_ADXL_Read 003A                          _eol 022A  
      __end_ofi2_second_line 1D66                 ___awmod@sign 000E                          wreg 000FE8  
                 _TXSTA1bits 000FAC                   _TXSTA2bits 000F72                  _rx_position 008B  
              lcd_delay@temp 008F                   i2_dis_char 1C64          dis_char@data_value1 009F  
                       l1000 192C                         l3005 18BE                         l3101 0BDC  
                       l3031 0CDC                         l3103 0BF8                         l3041 0CF4  
                       l3035 0CE8                         l3131 0C94                         l3037 0CEC  
                       l3045 0CFA                         l3133 0CB0                         l3039 0CF0  
                       l3047 0D16                         l3161 06AA                         l3155 1518  
                       l3075 0DB2                         l3091 0BCA                         l3083 0BB0  
                       l3149 14CE                         l3077 0DCE                         l3093 0BCE  
                       l3253 0A22                         l3245 09EE                         l3501 1470  
                       l3341 1234                         l3325 11D8                         l3095 0BD2  
                       l3087 0BBC                         l3175 0982                         l3167 07FE  
                       l3255 0A36                         l3503 1476                         l3335 1216  
                       l3361 170C                         l3097 0BD6                         l3169 082E  
                       l3177 09B2                         l3249 0A06                         l3345 1244  
                       l3371 1748                         l3363 1716                         l3451 13EA  
                       l3187 1148                         l3381 18EC                         l3509 148A  
                       l3359 16FE                         l3383 18F6                         l3457 1672  
                       l3387 191C                         l3379 18DE                         l3661 19CE  
                       l3671 19E6                         l2953 12AE                         l2955 12C0  
                       l2947 127A                         l3675 19F0                         l3667 19DC  
                       l2949 128C                         l2991 1876                         l2995 188E  
                       l2997 1898                         STR_1 0645                         STR_2 0634  
                       STR_3 0656                         STR_4 0667                         STR_5 0634  
                       STR_6 0675                         STR_8 0612                         STR_9 0601  
                       u3040 11FA                         u2610 0FBA                         u2710 1094  
                       u2630 0FDC                         u2730 10B8                         u2650 1000  
                       u2708 1076                         u2900 1506                         u2628 0FBE  
                       u2750 10DE                         u2670 1026                         u2728 1098  
                       u2648 0FE0                         u2690 1072                         u2907 14FC  
                       u2748 10BC                         u2668 1004                         u2768 10E2  
                       u2688 102A                         u2980 11BE                         _RxI1 142A  
                       _RxI2 1D46                         _Init 1A54                         _main 199E  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       pclat 000FFA                         prodh 000FF4                         prodl 000FF3  
                       start 00AA             ?_lcd_right_shift 0012                 ___param_bank 000010  
           lcd_cmd@cmd_value 009E                dis_string@len 00A2                  i2_lcd_delay 17E4  
                      ?_RxI1 0001                        ?_RxI2 0001                        ?_Init 0001  
                      ?_main 0001              __end_of___awdiv 1396                        STR_10 0623  
                      STR_11 0634              __end_of___awmod 17E4              ___awdiv@divisor 0003  
            __end_of___lwdiv 1762              __end_of___lwmod 1936                        i2l193 183A  
                      i2l464 004A                        i2l465 0054                        i2l466 005E  
                      i2l469 0070              ___awdiv@counter 0005     __end_of_display_downtime 0ED2  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _TRISE 000F96  
              ?_FullStepsNeg 0093           _ProcessStepperData 09C4                ?_FullStepsPos 0093  
      i2lcdcmd_nibble@cmdout 000F                        _Shift 1118              __end_of_clr_scr 1CEE  
            __end_of_lcd_cmd 1C14              __end_of_lcd_ini 1A54                        _delay 1858  
           _Compressor_Timer 165C                        _byte1 008A                        _byte2 0036  
                      _count 0048           __CFG_MCLRE$INTMCLR 000000               _state_neg_half 0039  
             _state_neg_full 0038                        _state 0037          ?_ProcessStepperData 0001  
             __pbitbssCOMRAM 0228                        tablat 000FF5        __size_ofi2_dis_string 0068  
                      status 000FD8            ??i2_lcdcmd_nibble 000E            __end_of_ADXL_Init 1D1A  
          __end_of_ADXL_Read 1BB0               _state_pos_half 003B             __end_of_GetReset 142A  
             _state_pos_full 003A                 __end_of_RxI1 14B8                 __end_of_RxI2 1D4E  
            __initialization 1B3A                 __end_of_Init 1AA4              ??_lcdcmd_nibble 009C  
               __end_of_main 19FE           __size_ofi2_lcd_cmd 001E            lcd_cmd@cmd_value1 009F  
       ??_ProcessStepperData 00AD                       ??_RxI1 00B2                       ??_RxI2 0096  
                     ??_Init 00AA                       ??_main 00B2                __activetblptr 000002  
             ??_FullStepsNeg 0095               ??_FullStepsPos 0095                 ?_second_line 0001  
               i2_dis_string 1936                       ?_Shift 0001             tx1_byte_n@data1n 0090  
                     ?_delay 0001                  ?i2_dis_char 0001                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ADCON2 000FC0                   _Open_UART1 1CEE  
                 _Open_UART2 1CA0                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 0001                       _ANSELA 000F38                       _ANSELB 000F39  
                     _ANSELC 000F3A                       _ANSELD 000F3B                       _ANSELE 000F3C  
                     i2l2061 17F6                       i2l2063 1806                       i2l2401 137A  
                     i2l2321 1C56                       i2l2067 181E                       i2l2405 138A  
                     i2l2421 1786                       i2l2069 182E                       i2l2317 1C4A  
                     i2l2441 17D8                       i2l2433 17BC                       i2l2425 1794  
                     i2l2417 1778                       i2l2427 179E                       i2l2373 1316  
                     i2l2429 17A6                       i2l2437 17C8               __CFG_WDTEN$OFF 000000  
                     i2l2455 1982                       i2l2385 133E                       i2l2449 1948  
                     i2l2387 1348                       i2l2379 1328                       i2l2397 136E  
                     i2l2389 1350                       i2l2725 1AD0                       i2l2729 1AEA  
                     _RCREG1 000FAE                       _RCREG2 000F74      i2lcddata_nibble@dataout 000F  
                     _OSCCON 000FD3                       _SPBRG1 000FAF                       _SPBRG2 000F75  
                     _TXREG1 000FAD                       _TXREG2 000F73        __size_of_ADXL_Display 00D6  
              ??_Timer0_Init 00AA                       Shift@i 0094             __end_of_dis_char 1C40  
           __end_of_high_isr 00AA                       ___wmul 1BB0                    ??___awdiv 0005  
                  ??___awmod 000D            ?i2_lcddata_nibble 0001                       _digits 0041  
                  ??___lwdiv 0093                    ??___lwmod 009A             __end_of_tx1_byte 1D3C  
                     delay@x 008F                       delay@y 0091                       clear_0 1B40  
                     clear_1 1B4E             ___awdiv@quotient 0007                       _minute 0034  
                     _second 0088              ___awmod@divisor 000B           ??i2_lcddata_nibble 000E  
            ___awmod@counter 000D                    ??_clr_scr 00A0                    ??_lcd_cmd 009E  
                  ??_lcd_ini 00A0                       _strbuf 0060                 _abs_position 007C  
               __pdataCOMRAM 0048                ??_ProcessNMEA 0096                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
               _ADXL_Display 0ED2            __end_ofi2_lcd_cmd 1CA0         ProcessSteps@position 0095  
           ??_lcddata_nibble 009C                ?_Reload_Timer 0001                   __accesstop 0060  
    __end_of__initialization 1B6C                ___rparam_used 000001                _last_position 0080  
             __pcstackCOMRAM 0001                __end_of_Shift 11C4                __end_of_delay 18CA  
        __size_ofi2_dis_char 001E          __end_of_Timer0_Init 1B3A               _rx_position_en 022E  
        lcdcmd_nibble@cmdout 009D           __size_of_lcd_delay 009A                      ??_Shift 008F  
                  ?_GetReset 0001                      ??_delay 008F                  ?_Open_UART1 0001  
                ?_Open_UART2 0001            FullStepsNeg@steps 0093                 i2lcd_delay@i 000A  
               i2lcd_delay@j 0006               ??_Reload_Timer 0001              dis_string@count 00A6  
                 __pbssBANK0 0060          __end_of_ProcessNMEA 1266              dis_string@wrptr 00A0  
                 __pnvCOMRAM 0046         __end_of_FullStepsNeg 0DE4         __end_of_FullStepsPos 0CC6  
   __end_of_Compressor_Timer 16E0                      ?___wmul 008F                 ?i2_lcd_delay 0001  
          FullStepsPos@steps 0093                      _ADC_low 002E            ?_display_downtime 0001  
                 _dis_string 14B8              i2_lcdcmd_nibble 15D0         __size_of_second_line 0008  
                 ??_GetReset 0093           ??_display_downtime 001C                    ?_dis_char 0001  
                  ?_high_isr 0001                    ?_tx1_byte 0001                   _first_line 1D4E  
                    __Hparam 0000                  _Timer0_Init 1AF0                      __Lparam 0000  
           lcd_right_shift@n 0012             lcd_right_shift@p 0014       __size_ofi2_second_line 0008  
          __end_of_lcd_delay 1300                    _ADXL_Init 1D06                    _ADXL_Read 1B76  
                    ___awdiv 1300                      ___awmod 1762                ?_ProcessSteps 0095  
            __size_of___wmul 0038                      ___lwdiv 16E0                      ___lwmod 18CA  
        __size_of_Open_UART1 0018          __size_of_Open_UART2 001A                 __psmallconst 0600  
                 _init_count 0046              __CFG_STVREN$OFF 000000                   _tx1_byte_n 1CBA  
                    __pcinit 1B3A     __size_of_lcd_right_shift 0024                      _adxl_en 0228  
                    __ramtop 0600                      __ptext0 199E                      __ptext1 1D46  
                    __ptext2 11C4                      __ptext3 1118                      __ptext4 142A  
                    __ptext5 1AF0                      __ptext6 09C4                      __ptext7 1BB0  
                    __ptext8 067C                      __ptext9 0BA2                      _clr_scr 1CD4  
       i2dis_char@data_value 0010                      _lcd_cmd 1BE8                      _lcd_ini 19FE  
         i2lcd_cmd@cmd_value 0010                    _T0CONbits 000FD5             ___awmod@dividend 0009  
                _ProcessNMEA 11C4                 ??i2_dis_char 0010                   ??_dis_char 009E  
                    _rstflag 022D                   ??_high_isr 001E         end_of_initialization 1B6C  
                 _second_inc 1AA4                __Lmediumconst 0000                   ??_tx1_byte 008F  
            i2lcd_delay@temp 0001               ??_ProcessSteps 0099                   ?_ADXL_Init 0001  
                 ?_ADXL_Read 0001                      postinc0 000FEE        __end_of_lcdcmd_nibble 1060  
__size_of_ProcessStepperData 01DE         __end_of_Reload_Timer 1D46           __end_ofi2_dis_char 1C82  
    __end_ofi2_lcdcmd_nibble 165C                    _PORTAbits 000F80                  ?_dis_string 00A0  
            i2dis_string@len 0014                    _TRISAbits 000F92                i2_second_line 1D5E  
                  _TRISBbits 000F93                    _TRISCbits 000F94                    _TRISDbits 000F95  
                 lcd_delay@i 0098                   lcd_delay@j 0094    __size_ofi2_lcddata_nibble 008C  
      __size_of_FullStepsNeg 011E        __size_of_FullStepsPos 0124                ?_Stepper_Init 0001  
                  i2_lcd_cmd 1C82                  ?_first_line 0001               __end_of___wmul 1BE8  
                ?_tx1_byte_n 0001                __pidataCOMRAM 1D66         __size_ofi2_lcd_delay 0074  
             ?i2_second_line 0001      ProcessStepperData@data1 00B1                 _FullStepsNeg 0CC6  
        start_initialization 1B3A                 _FullStepsPos 0BA2            ??_lcd_right_shift 0014  
               ??_Open_UART1 008F                 ??_Open_UART2 008F                    Shift@data 0093  
          __size_of_GetReset 0094                  ?_second_inc 0001               ??_Stepper_Init 008F  
                 ?i2_lcd_cmd 0001          __size_of_dis_string 008C                  ??_ADXL_Init 008F  
                ??_ADXL_Read 008F                     ??___wmul 0093            ?_Compressor_Timer 0001  
         __end_of_Open_UART1 1D06           __end_of_Open_UART2 1CBA             ?i2_lcdcmd_nibble 0001  
         ??_Compressor_Timer 00AA                i2dis_string@i 001A                  __pbssCOMRAM 002C  
        __size_of_first_line 0008                __pcstackBANK0 008F         __end_of_ProcessSteps 09C4  
          __size_of_dis_char 002C            __size_of_high_isr 00A2          __size_of_tx1_byte_n 001A  
  __size_of_display_downtime 00EE                 ?_Timer0_Init 0001            __size_of_tx1_byte 0010  
      __size_of_Reload_Timer 000A             ___lwdiv@dividend 008F      __size_of_lcddata_nibble 00B8  
                  __pintcode 0008                     ?___awdiv 0001                     ?___awmod 0009  
                   ?___lwdiv 008F                     ?___lwmod 0096                    _lcd_delay 1266  
        __size_of_second_inc 004C                     ?_clr_scr 0001                     ?_lcd_cmd 0001  
                   ?_lcd_ini 0001              ??i2_second_line 0012                  __smallconst 0600  
              ??_second_line 00A0                ?i2_dis_string 0012                 ?_ProcessNMEA 0001  
                   _ADC_high 002C               __size_of_Shift 00AC             i2_lcddata_nibble 1544  
           ___lwdiv@quotient 0094               __size_of_delay 0072                 _Reload_Timer 1D3C  
                ??i2_lcd_cmd 0010               ___wmul@product 0093                     _LATBbits 000F8A  
                   _LATDbits 000F8C                     _PIE1bits 000F9D                     _IPR3bits 000FA5  
                   _PIE3bits 000FA3                     i2u205_40 1974                     i2u205_47 196A  
                   i2u230_40 1AC0                     i2u231_40 1AE0                     i2u160_40 15F4  
                   i2u162_40 160E                     i2u161_48 15F6                     i2u170_40 1582  
                   i2u164_40 162A                     i2u163_48 1610                     i2u172_40 159E  
                   i2u171_48 1584                     i2u165_48 162C                     i2u158_40 15DC  
                   i2u173_48 15A0                     i2u166_40 1550                     i2u159_48 15DE  
                   i2u168_40 1568                     i2u167_48 1552                     _PIR1bits 000F9E  
                   i2u169_48 156A                     _PIR3bits 000FA4                     _RCONbits 000FD0  
                 ?_lcd_delay 008F                  _comp_tmr_en 0229                   _ADCON0bits 000FC2  
       __end_of_Stepper_Init 1D2C            ___wmul@multiplier 008F               ??i2_dis_string 0015  
               ??_dis_string 00A3                ?_ADXL_Display 0001                     _GetReset 1396  
                _INTCON2bits 000FF1          __end_of_second_line 1D5E                 ??_first_line 00A0  
                   __Hrparam 0000                     __Lrparam 0000   __end_of_ProcessStepperData 0BA2  
         __end_of_dis_string 1544                   _ADC_result 0030              _lcd_right_shift 1C40  
           __size_of___awdiv 0096             __size_of___awmod 0082                 ??_tx1_byte_n 0090  
           __size_of___lwdiv 0082             __size_of___lwmod 006C                  _last_status 0032  
           __size_of_clr_scr 001A             __size_of_lcd_cmd 002C             __size_of_lcd_ini 0056  
      __size_of_ProcessSteps 0348               ??_ADXL_Display 00AA              ___lwdiv@divisor 0091  
         __end_of_first_line 1D56              ___lwdiv@counter 0093                     __ptext10 0CC6  
                   __ptext11 1D06                     __ptext20 1D2C                     __ptext12 1CA0  
                   __ptext21 1D4E                     __ptext13 1CEE                     __ptext30 1C14  
                   __ptext22 1858                     __ptext14 1A54                     __ptext31 1060  
                   __ptext23 1CD4                     __ptext15 19FE                     __ptext40 1C64  
                   __ptext32 1266                     __ptext24 1B76                     __ptext16 1D1A  
                   __ptext41 1544                     __ptext33 18CA                     __ptext25 0ED2  
                   __ptext17 1396                     __ptext42 1C40                     __ptext34 16E0  
                   __ptext26 1D56                     __ptext18 165C                     __ptext43 1C82  
                   __ptext27 1BE8                     __ptext19 1CBA                     __ptext44 15D0  
                   __ptext36 1AA4                     __ptext28 0FA8                     _dis_char 1C14  
                   __ptext45 17E4                     __ptext37 0DE4                     __ptext29 14B8  
                   __ptext46 1762                     __ptext38 1D5E                     __ptext47 1300  
                   __ptext39 1936                     __ptext48 1D3C        i2dis_char@data_value1 0011  
        i2lcd_cmd@cmd_value1 0011                     _high_isr 0008                     _int1flag 022B  
                   _int2flag 022C                 ??_second_inc 001E       __size_of_lcdcmd_nibble 00B8  
              __size_of_RxI1 008E                __size_of_RxI2 0008                __size_of_Init 0050  
              __size_of_main 0060                     _tx1_byte 1D2C           __end_of_tx1_byte_n 1CD4  
           _display_downtime 0DE4               _lcddata_nibble 1060                     _time_lcd 003C  
       __size_of_Timer0_Init 004A                 _ProcessSteps 067C                ??i2_lcd_delay 0005  
                ??_lcd_delay 0093                tx1_byte@data1 008F           __end_of_second_inc 1AF0  
                _second_line 1D56                   _INTCONbits 000FF2    __size_of_Compressor_Timer 0084  
       __size_of_ProcessNMEA 00A2                     intlevel2 0000             ___lwmod@dividend 0096  
                 _RCSTA1bits 000FAB                   _RCSTA2bits 000F71       __end_of_lcddata_nibble 1118  
    __end_of_lcd_right_shift 1C64         __end_ofi2_dis_string 199E     __end_ofi2_lcddata_nibble 15D0  
      __size_of_Stepper_Init 0012                _lcdcmd_nibble 0FA8              ___lwmod@divisor 0098  
            ___lwmod@counter 009A          __end_ofi2_lcd_delay 1858     __size_ofi2_lcdcmd_nibble 008C  
          i2dis_string@count 0018            __CFG_FOSC$INTIO67 000000                 _Stepper_Init 1D1A  
      lcddata_nibble@dataout 009D            i2dis_string@wrptr 0012              ?_lcddata_nibble 0001  
